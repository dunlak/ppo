
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de4  08006ca4  08006ca4  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a88  08008a88  0000a094  2**0
                  CONTENTS
  4 .ARM          00000008  08008a88  08008a88  00009a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a90  08008a90  0000a094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00009a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a94  08008a94  00009a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008a98  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a094  2**0
                  CONTENTS
 10 .bss          000002dc  20000094  20000094  0000a094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  0000a094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e27  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000315d  00000000  00000000  0001ceeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00020048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee5  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027940  00000000  00000000  000222a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018713  00000000  00000000  00049be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e152b  00000000  00000000  000622f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143823  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005098  00000000  00000000  00143868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00148900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000094 	.word	0x20000094
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006c8c 	.word	0x08006c8c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000098 	.word	0x20000098
 80001e8:	08006c8c 	.word	0x08006c8c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800051c:	f000 fef2 	bl	8001304 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000520:	20ca      	movs	r0, #202	@ 0xca
 8000522:	f000 f95d 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000526:	20c3      	movs	r0, #195	@ 0xc3
 8000528:	f000 f967 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800052c:	2008      	movs	r0, #8
 800052e:	f000 f964 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000532:	2050      	movs	r0, #80	@ 0x50
 8000534:	f000 f961 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000538:	20cf      	movs	r0, #207	@ 0xcf
 800053a:	f000 f951 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f95b 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000544:	20c1      	movs	r0, #193	@ 0xc1
 8000546:	f000 f958 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800054a:	2030      	movs	r0, #48	@ 0x30
 800054c:	f000 f955 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000550:	20ed      	movs	r0, #237	@ 0xed
 8000552:	f000 f945 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000556:	2064      	movs	r0, #100	@ 0x64
 8000558:	f000 f94f 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f94c 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f000 f949 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000568:	2081      	movs	r0, #129	@ 0x81
 800056a:	f000 f946 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800056e:	20e8      	movs	r0, #232	@ 0xe8
 8000570:	f000 f936 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000574:	2085      	movs	r0, #133	@ 0x85
 8000576:	f000 f940 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f93d 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000580:	2078      	movs	r0, #120	@ 0x78
 8000582:	f000 f93a 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000586:	20cb      	movs	r0, #203	@ 0xcb
 8000588:	f000 f92a 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800058c:	2039      	movs	r0, #57	@ 0x39
 800058e:	f000 f934 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000592:	202c      	movs	r0, #44	@ 0x2c
 8000594:	f000 f931 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f92e 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800059e:	2034      	movs	r0, #52	@ 0x34
 80005a0:	f000 f92b 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 f928 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80005aa:	20f7      	movs	r0, #247	@ 0xf7
 80005ac:	f000 f918 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80005b0:	2020      	movs	r0, #32
 80005b2:	f000 f922 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80005b6:	20ea      	movs	r0, #234	@ 0xea
 80005b8:	f000 f912 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f91c 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f919 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005c8:	20b1      	movs	r0, #177	@ 0xb1
 80005ca:	f000 f909 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f913 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005d4:	201b      	movs	r0, #27
 80005d6:	f000 f910 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005da:	20b6      	movs	r0, #182	@ 0xb6
 80005dc:	f000 f900 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 f90a 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005e6:	20a2      	movs	r0, #162	@ 0xa2
 80005e8:	f000 f907 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005ec:	20c0      	movs	r0, #192	@ 0xc0
 80005ee:	f000 f8f7 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005f2:	2010      	movs	r0, #16
 80005f4:	f000 f901 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005f8:	20c1      	movs	r0, #193	@ 0xc1
 80005fa:	f000 f8f1 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005fe:	2010      	movs	r0, #16
 8000600:	f000 f8fb 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000604:	20c5      	movs	r0, #197	@ 0xc5
 8000606:	f000 f8eb 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800060a:	2045      	movs	r0, #69	@ 0x45
 800060c:	f000 f8f5 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000610:	2015      	movs	r0, #21
 8000612:	f000 f8f2 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000616:	20c7      	movs	r0, #199	@ 0xc7
 8000618:	f000 f8e2 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800061c:	2090      	movs	r0, #144	@ 0x90
 800061e:	f000 f8ec 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000622:	2036      	movs	r0, #54	@ 0x36
 8000624:	f000 f8dc 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000628:	20c8      	movs	r0, #200	@ 0xc8
 800062a:	f000 f8e6 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800062e:	20f2      	movs	r0, #242	@ 0xf2
 8000630:	f000 f8d6 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f8e0 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800063a:	20b0      	movs	r0, #176	@ 0xb0
 800063c:	f000 f8d0 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000640:	20c2      	movs	r0, #194	@ 0xc2
 8000642:	f000 f8da 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000646:	20b6      	movs	r0, #182	@ 0xb6
 8000648:	f000 f8ca 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800064c:	200a      	movs	r0, #10
 800064e:	f000 f8d4 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000652:	20a7      	movs	r0, #167	@ 0xa7
 8000654:	f000 f8d1 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000658:	2027      	movs	r0, #39	@ 0x27
 800065a:	f000 f8ce 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800065e:	2004      	movs	r0, #4
 8000660:	f000 f8cb 	bl	80007fa <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000664:	202a      	movs	r0, #42	@ 0x2a
 8000666:	f000 f8bb 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f8c5 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f8c2 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f8bf 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800067c:	20ef      	movs	r0, #239	@ 0xef
 800067e:	f000 f8bc 	bl	80007fa <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000682:	202b      	movs	r0, #43	@ 0x2b
 8000684:	f000 f8ac 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f8b6 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f8b3 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f8b0 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800069a:	203f      	movs	r0, #63	@ 0x3f
 800069c:	f000 f8ad 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80006a0:	20f6      	movs	r0, #246	@ 0xf6
 80006a2:	f000 f89d 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 f8a7 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f8a4 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80006b2:	2006      	movs	r0, #6
 80006b4:	f000 f8a1 	bl	80007fa <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80006b8:	202c      	movs	r0, #44	@ 0x2c
 80006ba:	f000 f891 	bl	80007e0 <ili9341_WriteReg>
  LCD_Delay(200);
 80006be:	20c8      	movs	r0, #200	@ 0xc8
 80006c0:	f000 ff0e 	bl	80014e0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006c4:	2026      	movs	r0, #38	@ 0x26
 80006c6:	f000 f88b 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f895 	bl	80007fa <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006d0:	20e0      	movs	r0, #224	@ 0xe0
 80006d2:	f000 f885 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006d6:	200f      	movs	r0, #15
 80006d8:	f000 f88f 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006dc:	2029      	movs	r0, #41	@ 0x29
 80006de:	f000 f88c 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006e2:	2024      	movs	r0, #36	@ 0x24
 80006e4:	f000 f889 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006e8:	200c      	movs	r0, #12
 80006ea:	f000 f886 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006ee:	200e      	movs	r0, #14
 80006f0:	f000 f883 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006f4:	2009      	movs	r0, #9
 80006f6:	f000 f880 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006fa:	204e      	movs	r0, #78	@ 0x4e
 80006fc:	f000 f87d 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000700:	2078      	movs	r0, #120	@ 0x78
 8000702:	f000 f87a 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000706:	203c      	movs	r0, #60	@ 0x3c
 8000708:	f000 f877 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800070c:	2009      	movs	r0, #9
 800070e:	f000 f874 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000712:	2013      	movs	r0, #19
 8000714:	f000 f871 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000718:	2005      	movs	r0, #5
 800071a:	f000 f86e 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800071e:	2017      	movs	r0, #23
 8000720:	f000 f86b 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000724:	2011      	movs	r0, #17
 8000726:	f000 f868 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f865 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000730:	20e1      	movs	r0, #225	@ 0xe1
 8000732:	f000 f855 	bl	80007e0 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f85f 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800073c:	2016      	movs	r0, #22
 800073e:	f000 f85c 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000742:	201b      	movs	r0, #27
 8000744:	f000 f859 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000748:	2004      	movs	r0, #4
 800074a:	f000 f856 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800074e:	2011      	movs	r0, #17
 8000750:	f000 f853 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000754:	2007      	movs	r0, #7
 8000756:	f000 f850 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800075a:	2031      	movs	r0, #49	@ 0x31
 800075c:	f000 f84d 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000760:	2033      	movs	r0, #51	@ 0x33
 8000762:	f000 f84a 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000766:	2042      	movs	r0, #66	@ 0x42
 8000768:	f000 f847 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800076c:	2005      	movs	r0, #5
 800076e:	f000 f844 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000772:	200c      	movs	r0, #12
 8000774:	f000 f841 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000778:	200a      	movs	r0, #10
 800077a:	f000 f83e 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800077e:	2028      	movs	r0, #40	@ 0x28
 8000780:	f000 f83b 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000784:	202f      	movs	r0, #47	@ 0x2f
 8000786:	f000 f838 	bl	80007fa <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800078a:	200f      	movs	r0, #15
 800078c:	f000 f835 	bl	80007fa <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000790:	2011      	movs	r0, #17
 8000792:	f000 f825 	bl	80007e0 <ili9341_WriteReg>
  LCD_Delay(200);
 8000796:	20c8      	movs	r0, #200	@ 0xc8
 8000798:	f000 fea2 	bl	80014e0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800079c:	2029      	movs	r0, #41	@ 0x29
 800079e:	f000 f81f 	bl	80007e0 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80007a2:	202c      	movs	r0, #44	@ 0x2c
 80007a4:	f000 f81c 	bl	80007e0 <ili9341_WriteReg>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80007b0:	f000 fda8 	bl	8001304 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80007b4:	2103      	movs	r1, #3
 80007b6:	20d3      	movs	r0, #211	@ 0xd3
 80007b8:	f000 f82c 	bl	8000814 <ili9341_ReadData>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29b      	uxth	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007c8:	2029      	movs	r0, #41	@ 0x29
 80007ca:	f000 f809 	bl	80007e0 <ili9341_WriteReg>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007d6:	2028      	movs	r0, #40	@ 0x28
 80007d8:	f000 f802 	bl	80007e0 <ili9341_WriteReg>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fe23 	bl	8001438 <LCD_IO_WriteReg>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fdf4 	bl	80013f4 <LCD_IO_WriteData>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	80fb      	strh	r3, [r7, #6]
 8000820:	4613      	mov	r3, r2
 8000822:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000824:	797a      	ldrb	r2, [r7, #5]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fe26 	bl	800147c <LCD_IO_ReadData>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800083e:	23f0      	movs	r3, #240	@ 0xf0
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800084e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fa59 	bl	8000d20 <stmpe811_GetInstance>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2bff      	cmp	r3, #255	@ 0xff
 8000876:	d112      	bne.n	800089e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fa51 	bl	8000d20 <stmpe811_GetInstance>
 800087e:	4603      	mov	r3, r0
 8000880:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d80a      	bhi.n	800089e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	b2d1      	uxtb	r1, r2
 800088e:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <stmpe811_Init+0x4c>)
 8000890:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8000892:	f000 fe30 	bl	80014f6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f807 	bl	80008ac <stmpe811_Reset>
    }
  }
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000b0 	.word	0x200000b0

080008ac <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2202      	movs	r2, #2
 80008bc:	2103      	movs	r1, #3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fe25 	bl	800150e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80008c4:	200a      	movs	r0, #10
 80008c6:	f000 fe5e 	bl	8001586 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2200      	movs	r2, #0
 80008d0:	2103      	movs	r1, #3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fe1b 	bl	800150e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80008d8:	2002      	movs	r0, #2
 80008da:	f000 fe54 	bl	8001586 <IOE_Delay>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80008e6:	b590      	push	{r4, r7, lr}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80008f0:	f000 fe01 	bl	80014f6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fe1a 	bl	8001534 <IOE_Read>
 8000900:	4603      	mov	r3, r0
 8000902:	b21b      	sxth	r3, r3
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fe10 	bl	8001534 <IOE_Read>
 8000914:	4603      	mov	r3, r0
 8000916:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000918:	4323      	orrs	r3, r4
 800091a:	b21b      	sxth	r3, r3
 800091c:	b29b      	uxth	r3, r3
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bd90      	pop	{r4, r7, pc}

08000926 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b084      	sub	sp, #16
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2109      	movs	r1, #9
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fdfa 	bl	8001534 <IOE_Read>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	2109      	movs	r1, #9
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fdda 	bl	800150e <IOE_Write>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2109      	movs	r1, #9
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fddc 	bl	8001534 <IOE_Read>
 800097c:	4603      	mov	r3, r0
 800097e:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	f023 0301 	bic.w	r3, r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	2109      	movs	r1, #9
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fdbc 	bl	800150e <IOE_Write>
    
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	460a      	mov	r2, r1
 80009a8:	80fb      	strh	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	210a      	movs	r1, #10
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fdbb 	bl	8001534 <IOE_Read>
 80009be:	4603      	mov	r3, r0
 80009c0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	797b      	ldrb	r3, [r7, #5]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	210a      	movs	r1, #10
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fd9b 	bl	800150e <IOE_Write>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	460a      	mov	r2, r1
 80009ea:	80fb      	strh	r3, [r7, #6]
 80009ec:	4613      	mov	r3, r2
 80009ee:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	210a      	movs	r1, #10
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fd9a 	bl	8001534 <IOE_Read>
 8000a00:	4603      	mov	r3, r0
 8000a02:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8000a04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	b25a      	sxtb	r2, r3
 8000a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a10:	4013      	ands	r3, r2
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fd75 	bl	800150e <IOE_Write>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	210b      	movs	r1, #11
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fd76 	bl	8001534 <IOE_Read>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	797b      	ldrb	r3, [r7, #5]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	460a      	mov	r2, r1
 8000a64:	80fb      	strh	r3, [r7, #6]
 8000a66:	4613      	mov	r3, r2
 8000a68:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	797a      	ldrb	r2, [r7, #5]
 8000a70:	210b      	movs	r1, #11
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fd4b 	bl	800150e <IOE_Write>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2117      	movs	r1, #23
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd4c 	bl	8001534 <IOE_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	b25a      	sxtb	r2, r3
 8000aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aac:	4013      	ands	r3, r2
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	2117      	movs	r1, #23
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fd27 	bl	800150e <IOE_Write>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fd2b 	bl	8001534 <IOE_Read>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	f023 0304 	bic.w	r3, r3, #4
 8000ae8:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	2104      	movs	r1, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fd0b 	bl	800150e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	21f0      	movs	r1, #240	@ 0xf0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ffbf 	bl	8000a80 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f023 0303 	bic.w	r3, r3, #3
 8000b08:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	7bfa      	ldrb	r2, [r7, #15]
 8000b10:	2104      	movs	r1, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fcfb 	bl	800150e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2249      	movs	r2, #73	@ 0x49
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fcf4 	bl	800150e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8000b26:	2002      	movs	r0, #2
 8000b28:	f000 fd2d 	bl	8001586 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2201      	movs	r2, #1
 8000b32:	2121      	movs	r1, #33	@ 0x21
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fcea 	bl	800150e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	229a      	movs	r2, #154	@ 0x9a
 8000b40:	2141      	movs	r1, #65	@ 0x41
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fce3 	bl	800150e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	214a      	movs	r1, #74	@ 0x4a
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fcdc 	bl	800150e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	214b      	movs	r1, #75	@ 0x4b
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fcd5 	bl	800150e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	214b      	movs	r1, #75	@ 0x4b
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fcce 	bl	800150e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2201      	movs	r2, #1
 8000b78:	2156      	movs	r1, #86	@ 0x56
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fcc7 	bl	800150e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	2158      	movs	r1, #88	@ 0x58
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fcc0 	bl	800150e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2201      	movs	r2, #1
 8000b94:	2140      	movs	r1, #64	@ 0x40
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fcb9 	bl	800150e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	22ff      	movs	r2, #255	@ 0xff
 8000ba2:	210b      	movs	r1, #11
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fcb2 	bl	800150e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8000baa:	2002      	movs	r0, #2
 8000bac:	f000 fceb 	bl	8001586 <IOE_Delay>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2140      	movs	r1, #64	@ 0x40
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fcb1 	bl	8001534 <IOE_Read>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd8:	2b80      	cmp	r3, #128	@ 0x80
 8000bda:	bf0c      	ite	eq
 8000bdc:	2301      	moveq	r3, #1
 8000bde:	2300      	movne	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00b      	beq.n	8000c02 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	214c      	movs	r1, #76	@ 0x4c
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fc9f 	bl	8001534 <IOE_Read>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d010      	beq.n	8000c1e <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e00d      	b.n	8000c1e <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2201      	movs	r2, #1
 8000c08:	214b      	movs	r1, #75	@ 0x4b
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fc7f 	bl	800150e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	214b      	movs	r1, #75	@ 0x4b
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fc78 	bl	800150e <IOE_Write>
  }
  
  return ret;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	b2d8      	uxtb	r0, r3
 8000c3a:	f107 0210 	add.w	r2, r7, #16
 8000c3e:	2304      	movs	r3, #4
 8000c40:	21d7      	movs	r1, #215	@ 0xd7
 8000c42:	f000 fc8a 	bl	800155a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000c46:	7c3b      	ldrb	r3, [r7, #16]
 8000c48:	061a      	lsls	r2, r3, #24
 8000c4a:	7c7b      	ldrb	r3, [r7, #17]
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	7cbb      	ldrb	r3, [r7, #18]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	4313      	orrs	r3, r2
 8000c56:	7cfa      	ldrb	r2, [r7, #19]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	0d1b      	lsrs	r3, r3, #20
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	214b      	movs	r1, #75	@ 0x4b
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fc45 	bl	800150e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000c84:	89fb      	ldrh	r3, [r7, #14]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	214b      	movs	r1, #75	@ 0x4b
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fc3e 	bl	800150e <IOE_Write>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8000ca4:	f000 fc2d 	bl	8001502 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	211f      	movs	r1, #31
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe76 	bl	800099e <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe36 	bl	8000926 <stmpe811_EnableGlobalIT>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe47 	bl	8000962 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	211f      	movs	r1, #31
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe81 	bl	80009e0 <stmpe811_DisableITSource>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	211f      	movs	r1, #31
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe99 	bl	8000a2c <stmpe811_ReadGITStatus>
 8000cfa:	4603      	mov	r3, r0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	211f      	movs	r1, #31
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fea1 	bl	8000a5a <stmpe811_ClearGlobalIT>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]
 8000d32:	e00b      	b.n	8000d4c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <stmpe811_GetInstance+0x40>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	e006      	b.n	8000d54 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d9f0      	bls.n	8000d34 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000d52:	23ff      	movs	r3, #255	@ 0xff
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	200000b0 	.word	0x200000b0

08000d64 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10e      	bne.n	8000d92 <BSP_LED_Init+0x2e>
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <BSP_LED_Init+0x9c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <BSP_LED_Init+0x9c>)
 8000d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <BSP_LED_Init+0x9c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	e010      	b.n	8000db4 <BSP_LED_Init+0x50>
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10d      	bne.n	8000db4 <BSP_LED_Init+0x50>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <BSP_LED_Init+0x9c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <BSP_LED_Init+0x9c>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <BSP_LED_Init+0x9c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <BSP_LED_Init+0xa0>)
 8000db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000e08 <BSP_LED_Init+0xa4>)
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	f107 0214 	add.w	r2, r7, #20
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 f8eb 	bl	8002fb4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a09      	ldr	r2, [pc, #36]	@ (8000e08 <BSP_LED_Init+0xa4>)
 8000de2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <BSP_LED_Init+0xa0>)
 8000dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	f002 fa8b 	bl	800330c <HAL_GPIO_WritePin>
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	08006cb4 	.word	0x08006cb4
 8000e08:	20000060 	.word	0x20000060

08000e0c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10d      	bne.n	8000e3e <BSP_PB_Init+0x32>
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <BSP_PB_Init+0xa4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <BSP_PB_Init+0xa4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <BSP_PB_Init+0xa4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d111      	bne.n	8000e68 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <BSP_PB_Init+0xa8>)
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	f107 020c 	add.w	r2, r7, #12
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 f8a6 	bl	8002fb4 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d11c      	bne.n	8000ea8 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <BSP_PB_Init+0xa8>)
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	f107 020c 	add.w	r2, r7, #12
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 f892 	bl	8002fb4 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000e90:	2306      	movs	r3, #6
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	210f      	movs	r1, #15
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fc00 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fc17 	bl	80026d6 <HAL_NVIC_EnableIRQ>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	20000068 	.word	0x20000068

08000eb8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a33      	ldr	r2, [pc, #204]	@ (8000f94 <I2Cx_MspInit+0xdc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d15f      	bne.n	8000f8a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a31      	ldr	r2, [pc, #196]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a2a      	ldr	r2, [pc, #168]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8000f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000f14:	2304      	movs	r3, #4
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <I2Cx_MspInit+0xe4>)
 8000f20:	f002 f848 	bl	8002fb4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f28:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481b      	ldr	r0, [pc, #108]	@ (8000fa0 <I2Cx_MspInit+0xe8>)
 8000f32:	f002 f83f 	bl	8002fb4 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f5c:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <I2Cx_MspInit+0xe0>)
 8000f64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f68:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	2048      	movs	r0, #72	@ 0x48
 8000f70:	f001 fb95 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f74:	2048      	movs	r0, #72	@ 0x48
 8000f76:	f001 fbae 	bl	80026d6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	2049      	movs	r0, #73	@ 0x49
 8000f80:	f001 fb8d 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f84:	2049      	movs	r0, #73	@ 0x49
 8000f86:	f001 fba6 	bl	80026d6 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40005c00 	.word	0x40005c00
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <I2Cx_Init+0x58>)
 8000faa:	f002 fea1 	bl	8003cf0 <HAL_I2C_GetState>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d121      	bne.n	8000ff8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <I2Cx_Init+0x5c>)
 8000fb8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fbc:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <I2Cx_Init+0x60>)
 8000fbe:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <I2Cx_Init+0x58>)
 8000fee:	f7ff ff63 	bl	8000eb8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000ff2:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <I2Cx_Init+0x58>)
 8000ff4:	f002 f9c8 	bl	8003388 <HAL_I2C_Init>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200000b4 	.word	0x200000b4
 8001000:	40005c00 	.word	0x40005c00
 8001004:	000186a0 	.word	0x000186a0

08001008 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <I2Cx_ITConfig+0x58>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <I2Cx_ITConfig+0x58>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <I2Cx_ITConfig+0x58>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800102a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800102e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001038:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800103c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	@ (8001064 <I2Cx_ITConfig+0x5c>)
 8001044:	f001 ffb6 	bl	8002fb4 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001048:	2200      	movs	r2, #0
 800104a:	210f      	movs	r1, #15
 800104c:	2028      	movs	r0, #40	@ 0x28
 800104e:	f001 fb26 	bl	800269e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001052:	2028      	movs	r0, #40	@ 0x28
 8001054:	f001 fb3f 	bl	80026d6 <HAL_NVIC_EnableIRQ>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af04      	add	r7, sp, #16
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	b299      	uxth	r1, r3
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <I2Cx_WriteData+0x4c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1d7b      	adds	r3, r7, #5
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <I2Cx_WriteData+0x50>)
 8001098:	f002 fafe 	bl	8003698 <HAL_I2C_Mem_Write>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80010a6:	f000 f863 	bl	8001170 <I2Cx_Error>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000006c 	.word	0x2000006c
 80010b8:	200000b4 	.word	0x200000b4

080010bc <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	b299      	uxth	r1, r3
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <I2Cx_ReadData+0x50>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f107 030e 	add.w	r3, r7, #14
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	4808      	ldr	r0, [pc, #32]	@ (8001110 <I2Cx_ReadData+0x54>)
 80010f0:	f002 fbcc 	bl	800388c <HAL_I2C_Mem_Read>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80010fe:	f000 f837 	bl	8001170 <I2Cx_Error>

  }
  return value;
 8001102:	7bbb      	ldrb	r3, [r7, #14]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000006c 	.word	0x2000006c
 8001110:	200000b4 	.word	0x200000b4

08001114 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	603a      	str	r2, [r7, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	460b      	mov	r3, r1
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	4613      	mov	r3, r2
 8001128:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	b299      	uxth	r1, r3
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <I2Cx_ReadBuffer+0x54>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <I2Cx_ReadBuffer+0x58>)
 8001148:	f002 fba0 	bl	800388c <HAL_I2C_Mem_Read>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8001156:	2300      	movs	r3, #0
 8001158:	e002      	b.n	8001160 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800115a:	f000 f809 	bl	8001170 <I2Cx_Error>

    return 1;
 800115e:	2301      	movs	r3, #1
  }
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000006c 	.word	0x2000006c
 800116c:	200000b4 	.word	0x200000b4

08001170 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <I2Cx_Error+0x14>)
 8001176:	f002 fa4b 	bl	8003610 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800117a:	f7ff ff13 	bl	8000fa4 <I2Cx_Init>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000b4 	.word	0x200000b4

08001188 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800118c:	4819      	ldr	r0, [pc, #100]	@ (80011f4 <SPIx_Init+0x6c>)
 800118e:	f005 f98a 	bl	80064a6 <HAL_SPI_GetState>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d12b      	bne.n	80011f0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <SPIx_Init+0x6c>)
 800119a:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <SPIx_Init+0x70>)
 800119c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <SPIx_Init+0x6c>)
 80011a0:	2218      	movs	r2, #24
 80011a2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <SPIx_Init+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <SPIx_Init+0x6c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <SPIx_Init+0x6c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <SPIx_Init+0x6c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <SPIx_Init+0x6c>)
 80011be:	2207      	movs	r2, #7
 80011c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <SPIx_Init+0x6c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <SPIx_Init+0x6c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <SPIx_Init+0x6c>)
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <SPIx_Init+0x6c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SPIx_Init+0x6c>)
 80011de:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e2:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <SPIx_Init+0x6c>)
 80011e6:	f000 f853 	bl	8001290 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80011ea:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <SPIx_Init+0x6c>)
 80011ec:	f004 fb51 	bl	8005892 <HAL_SPI_Init>
  }
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000108 	.word	0x20000108
 80011f8:	40015000 	.word	0x40015000

080011fc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <SPIx_Read+0x38>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	4808      	ldr	r0, [pc, #32]	@ (8001238 <SPIx_Read+0x3c>)
 8001218:	f004 fd6d 	bl	8005cf6 <HAL_SPI_Receive>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001226:	f000 f827 	bl	8001278 <SPIx_Error>
  }

  return readvalue;
 800122a:	68bb      	ldr	r3, [r7, #8]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000070 	.word	0x20000070
 8001238:	20000108 	.word	0x20000108

0800123c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <SPIx_Write+0x34>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1db9      	adds	r1, r7, #6
 8001250:	2201      	movs	r2, #1
 8001252:	4808      	ldr	r0, [pc, #32]	@ (8001274 <SPIx_Write+0x38>)
 8001254:	f004 fbea 	bl	8005a2c <HAL_SPI_Transmit>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001262:	f000 f809 	bl	8001278 <SPIx_Error>
  }
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000070 	.word	0x20000070
 8001274:	20000108 	.word	0x20000108

08001278 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <SPIx_Error+0x14>)
 800127e:	f004 fb99 	bl	80059b4 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001282:	f7ff ff81 	bl	8001188 <SPIx_Init>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000108 	.word	0x20000108

08001290 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <SPIx_MspInit+0x6c>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <SPIx_MspInit+0x6c>)
 80012a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <SPIx_MspInit+0x6c>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <SPIx_MspInit+0x6c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <SPIx_MspInit+0x6c>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <SPIx_MspInit+0x6c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80012d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80012da:	2302      	movs	r3, #2
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80012e2:	2305      	movs	r3, #5
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <SPIx_MspInit+0x70>)
 80012ee:	f001 fe61 	bl	8002fb4 <HAL_GPIO_Init>
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40021400 	.word	0x40021400

08001304 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800130a:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <LCD_IO_Init+0xe0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d164      	bne.n	80013dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <LCD_IO_Init+0xe0>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b32      	ldr	r3, [pc, #200]	@ (80013e8 <LCD_IO_Init+0xe4>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a31      	ldr	r2, [pc, #196]	@ (80013e8 <LCD_IO_Init+0xe4>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <LCD_IO_Init+0xe4>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4619      	mov	r1, r3
 800134c:	4827      	ldr	r0, [pc, #156]	@ (80013ec <LCD_IO_Init+0xe8>)
 800134e:	f001 fe31 	bl	8002fb4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <LCD_IO_Init+0xe4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <LCD_IO_Init+0xe4>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <LCD_IO_Init+0xe4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4819      	ldr	r0, [pc, #100]	@ (80013ec <LCD_IO_Init+0xe8>)
 8001388:	f001 fe14 	bl	8002fb4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <LCD_IO_Init+0xe4>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <LCD_IO_Init+0xe4>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <LCD_IO_Init+0xe4>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013a8:	2304      	movs	r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <LCD_IO_Init+0xec>)
 80013c0:	f001 fdf8 	bl	8002fb4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80013c4:	2200      	movs	r2, #0
 80013c6:	2104      	movs	r1, #4
 80013c8:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <LCD_IO_Init+0xec>)
 80013ca:	f001 ff9f 	bl	800330c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80013ce:	2201      	movs	r2, #1
 80013d0:	2104      	movs	r1, #4
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <LCD_IO_Init+0xec>)
 80013d4:	f001 ff9a 	bl	800330c <HAL_GPIO_WritePin>

    SPIx_Init();
 80013d8:	f7ff fed6 	bl	8001188 <SPIx_Init>
  }
}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000160 	.word	0x20000160
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40020800 	.word	0x40020800

080013f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001404:	480a      	ldr	r0, [pc, #40]	@ (8001430 <LCD_IO_WriteData+0x3c>)
 8001406:	f001 ff81 	bl	800330c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800140a:	2200      	movs	r2, #0
 800140c:	2104      	movs	r1, #4
 800140e:	4809      	ldr	r0, [pc, #36]	@ (8001434 <LCD_IO_WriteData+0x40>)
 8001410:	f001 ff7c 	bl	800330c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff10 	bl	800123c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800141c:	2201      	movs	r2, #1
 800141e:	2104      	movs	r1, #4
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <LCD_IO_WriteData+0x40>)
 8001422:	f001 ff73 	bl	800330c <HAL_GPIO_WritePin>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40020800 	.word	0x40020800

08001438 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001448:	480a      	ldr	r0, [pc, #40]	@ (8001474 <LCD_IO_WriteReg+0x3c>)
 800144a:	f001 ff5f 	bl	800330c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800144e:	2200      	movs	r2, #0
 8001450:	2104      	movs	r1, #4
 8001452:	4809      	ldr	r0, [pc, #36]	@ (8001478 <LCD_IO_WriteReg+0x40>)
 8001454:	f001 ff5a 	bl	800330c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff feed 	bl	800123c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001462:	2201      	movs	r2, #1
 8001464:	2104      	movs	r1, #4
 8001466:	4804      	ldr	r0, [pc, #16]	@ (8001478 <LCD_IO_WriteReg+0x40>)
 8001468:	f001 ff50 	bl	800330c <HAL_GPIO_WritePin>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40020800 	.word	0x40020800

0800147c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	80fb      	strh	r3, [r7, #6]
 8001488:	4613      	mov	r3, r2
 800148a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001490:	2200      	movs	r2, #0
 8001492:	2104      	movs	r1, #4
 8001494:	4810      	ldr	r0, [pc, #64]	@ (80014d8 <LCD_IO_ReadData+0x5c>)
 8001496:	f001 ff39 	bl	800330c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a0:	480e      	ldr	r0, [pc, #56]	@ (80014dc <LCD_IO_ReadData+0x60>)
 80014a2:	f001 ff33 	bl	800330c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fec7 	bl	800123c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80014ae:	797b      	ldrb	r3, [r7, #5]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fea3 	bl	80011fc <SPIx_Read>
 80014b6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <LCD_IO_ReadData+0x60>)
 80014c0:	f001 ff24 	bl	800330c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014c4:	2201      	movs	r2, #1
 80014c6:	2104      	movs	r1, #4
 80014c8:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <LCD_IO_ReadData+0x5c>)
 80014ca:	f001 ff1f 	bl	800330c <HAL_GPIO_WritePin>

  return readvalue;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00

080014e0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 ffd9 	bl	80024a0 <HAL_Delay>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80014fa:	f7ff fd53 	bl	8000fa4 <I2Cx_Init>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}

08001502 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001506:	f7ff fd7f 	bl	8001008 <I2Cx_ITConfig>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	460b      	mov	r3, r1
 800151a:	71bb      	strb	r3, [r7, #6]
 800151c:	4613      	mov	r3, r2
 800151e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001520:	797a      	ldrb	r2, [r7, #5]
 8001522:	79b9      	ldrb	r1, [r7, #6]
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fd9e 	bl	8001068 <I2Cx_WriteData>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001544:	79ba      	ldrb	r2, [r7, #6]
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fdb6 	bl	80010bc <I2Cx_ReadData>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	603a      	str	r2, [r7, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	460b      	mov	r3, r1
 800156a:	71bb      	strb	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	79b9      	ldrb	r1, [r7, #6]
 8001574:	79f8      	ldrb	r0, [r7, #7]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	f7ff fdcc 	bl	8001114 <I2Cx_ReadBuffer>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 ff86 	bl	80024a0 <HAL_Delay>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015a2:	4a2e      	ldr	r2, [pc, #184]	@ (800165c <BSP_LCD_Init+0xc0>)
 80015a4:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015a8:	2209      	movs	r2, #9
 80015aa:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015b4:	221d      	movs	r2, #29
 80015b6:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015ba:	2203      	movs	r2, #3
 80015bc:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015c0:	f240 120d 	movw	r2, #269	@ 0x10d
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015c8:	f240 1243 	movw	r2, #323	@ 0x143
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015d0:	f240 1217 	movw	r2, #279	@ 0x117
 80015d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015d8:	f240 1247 	movw	r2, #327	@ 0x147
 80015dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <BSP_LCD_Init+0xbc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <BSP_LCD_Init+0xc4>)
 80015f8:	2208      	movs	r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <BSP_LCD_Init+0xc4>)
 80015fe:	22c0      	movs	r2, #192	@ 0xc0
 8001600:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <BSP_LCD_Init+0xc4>)
 8001604:	2204      	movs	r2, #4
 8001606:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <BSP_LCD_Init+0xc4>)
 800160a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001610:	4813      	ldr	r0, [pc, #76]	@ (8001660 <BSP_LCD_Init+0xc4>)
 8001612:	f003 fee3 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <BSP_LCD_Init+0xbc>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <BSP_LCD_Init+0xbc>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <BSP_LCD_Init+0xbc>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <BSP_LCD_Init+0xbc>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800162e:	f000 fa21 	bl	8001a74 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001632:	4809      	ldr	r0, [pc, #36]	@ (8001658 <BSP_LCD_Init+0xbc>)
 8001634:	f002 ff1e 	bl	8004474 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <BSP_LCD_Init+0xc8>)
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <BSP_LCD_Init+0xcc>)
 800163c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <BSP_LCD_Init+0xc8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001646:	f000 fc03 	bl	8001e50 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800164a:	4808      	ldr	r0, [pc, #32]	@ (800166c <BSP_LCD_Init+0xd0>)
 800164c:	f000 f8ce 	bl	80017ec <BSP_LCD_SetFont>

  return LCD_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000164 	.word	0x20000164
 800165c:	40016800 	.word	0x40016800
 8001660:	2000024c 	.word	0x2000024c
 8001664:	20000298 	.word	0x20000298
 8001668:	20000000 	.word	0x20000000
 800166c:	20000074 	.word	0x20000074

08001670 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <BSP_LCD_GetXSize+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	4798      	blx	r3
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000298 	.word	0x20000298

08001688 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <BSP_LCD_GetYSize+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	4798      	blx	r3
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000298 	.word	0x20000298

080016a0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b090      	sub	sp, #64	@ 0x40
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80016b0:	f7ff ffde 	bl	8001670 <BSP_LCD_GetXSize>
 80016b4:	4603      	mov	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80016bc:	f7ff ffe4 	bl	8001688 <BSP_LCD_GetYSize>
 80016c0:	4603      	mov	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80016cc:	23ff      	movs	r3, #255	@ 0xff
 80016ce:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80016ec:	2307      	movs	r3, #7
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80016f0:	f7ff ffbe 	bl	8001670 <BSP_LCD_GetXSize>
 80016f4:	4603      	mov	r3, r0
 80016f6:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80016f8:	f7ff ffc6 	bl	8001688 <BSP_LCD_GetYSize>
 80016fc:	4603      	mov	r3, r0
 80016fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001700:	88fa      	ldrh	r2, [r7, #6]
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4619      	mov	r1, r3
 8001708:	4814      	ldr	r0, [pc, #80]	@ (800175c <BSP_LCD_LayerDefaultInit+0xbc>)
 800170a:	f002 ff8d 	bl	8004628 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800170e:	88fa      	ldrh	r2, [r7, #6]
 8001710:	4913      	ldr	r1, [pc, #76]	@ (8001760 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	3304      	adds	r3, #4
 800171e:	f04f 32ff 	mov.w	r2, #4294967295
 8001722:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	490e      	ldr	r1, [pc, #56]	@ (8001760 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001736:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001738:	88fa      	ldrh	r2, [r7, #6]
 800173a:	4909      	ldr	r1, [pc, #36]	@ (8001760 <BSP_LCD_LayerDefaultInit+0xc0>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800174a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <BSP_LCD_LayerDefaultInit+0xbc>)
 800174e:	f002 ffa9 	bl	80046a4 <HAL_LTDC_EnableDither>
}
 8001752:	bf00      	nop
 8001754:	3740      	adds	r7, #64	@ 0x40
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000164 	.word	0x20000164
 8001760:	20000280 	.word	0x20000280
 8001764:	20000074 	.word	0x20000074

08001768 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <BSP_LCD_SelectLayer+0x1c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	2000027c 	.word	0x2000027c

08001788 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <BSP_LCD_SetTextColor+0x28>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4907      	ldr	r1, [pc, #28]	@ (80017b4 <BSP_LCD_SetTextColor+0x2c>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	2000027c 	.word	0x2000027c
 80017b4:	20000280 	.word	0x20000280

080017b8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <BSP_LCD_SetBackColor+0x2c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <BSP_LCD_SetBackColor+0x30>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3304      	adds	r3, #4
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000027c 	.word	0x2000027c
 80017e8:	20000280 	.word	0x20000280

080017ec <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <BSP_LCD_SetFont+0x2c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4908      	ldr	r1, [pc, #32]	@ (800181c <BSP_LCD_SetFont+0x30>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3308      	adds	r3, #8
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000027c 	.word	0x2000027c
 800181c:	20000280 	.word	0x20000280

08001820 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af02      	add	r7, sp, #8
 8001826:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <BSP_LCD_Clear+0x48>)
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <BSP_LCD_Clear+0x48>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0e      	ldr	r2, [pc, #56]	@ (800186c <BSP_LCD_Clear+0x4c>)
 8001832:	2134      	movs	r1, #52	@ 0x34
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	335c      	adds	r3, #92	@ 0x5c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461e      	mov	r6, r3
 8001840:	f7ff ff16 	bl	8001670 <BSP_LCD_GetXSize>
 8001844:	4605      	mov	r5, r0
 8001846:	f7ff ff1f 	bl	8001688 <BSP_LCD_GetYSize>
 800184a:	4602      	mov	r2, r0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4613      	mov	r3, r2
 8001856:	462a      	mov	r2, r5
 8001858:	4631      	mov	r1, r6
 800185a:	4620      	mov	r0, r4
 800185c:	f000 fac0 	bl	8001de0 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	2000027c 	.word	0x2000027c
 800186c:	20000164 	.word	0x20000164

08001870 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	460b      	mov	r3, r1
 800187c:	80bb      	strh	r3, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <BSP_LCD_DisplayChar+0x80>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	491b      	ldr	r1, [pc, #108]	@ (80018f4 <BSP_LCD_DisplayChar+0x84>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3308      	adds	r3, #8
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <BSP_LCD_DisplayChar+0x80>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4c14      	ldr	r4, [pc, #80]	@ (80018f4 <BSP_LCD_DisplayChar+0x84>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4423      	add	r3, r4
 80018ae:	3308      	adds	r3, #8
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80018b4:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <BSP_LCD_DisplayChar+0x80>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4c0d      	ldr	r4, [pc, #52]	@ (80018f4 <BSP_LCD_DisplayChar+0x84>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4423      	add	r3, r4
 80018c8:	3308      	adds	r3, #8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	3307      	adds	r3, #7
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da00      	bge.n	80018d6 <BSP_LCD_DisplayChar+0x66>
 80018d4:	3307      	adds	r3, #7
 80018d6:	10db      	asrs	r3, r3, #3
 80018d8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80018dc:	18ca      	adds	r2, r1, r3
 80018de:	88b9      	ldrh	r1, [r7, #4]
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f9c2 	bl	8001c6c <DrawChar>
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	2000027c 	.word	0x2000027c
 80018f4:	20000280 	.word	0x20000280

080018f8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60ba      	str	r2, [r7, #8]
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	81fb      	strh	r3, [r7, #14]
 8001906:	460b      	mov	r3, r1
 8001908:	81bb      	strh	r3, [r7, #12]
 800190a:	4613      	mov	r3, r2
 800190c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800190e:	2301      	movs	r3, #1
 8001910:	83fb      	strh	r3, [r7, #30]
 8001912:	2300      	movs	r3, #0
 8001914:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8001922:	e002      	b.n	800192a <BSP_LCD_DisplayStringAt+0x32>
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	3301      	adds	r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	617a      	str	r2, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f6      	bne.n	8001924 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8001936:	f7ff fe9b 	bl	8001670 <BSP_LCD_GetXSize>
 800193a:	4601      	mov	r1, r0
 800193c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <BSP_LCD_DisplayStringAt+0x174>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	484b      	ldr	r0, [pc, #300]	@ (8001a70 <BSP_LCD_DisplayStringAt+0x178>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4403      	add	r3, r0
 800194c:	3308      	adds	r3, #8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	889b      	ldrh	r3, [r3, #4]
 8001952:	fbb1 f3f3 	udiv	r3, r1, r3
 8001956:	613b      	str	r3, [r7, #16]

  switch (mode)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d01c      	beq.n	8001998 <BSP_LCD_DisplayStringAt+0xa0>
 800195e:	2b03      	cmp	r3, #3
 8001960:	dc33      	bgt.n	80019ca <BSP_LCD_DisplayStringAt+0xd2>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d002      	beq.n	800196c <BSP_LCD_DisplayStringAt+0x74>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d019      	beq.n	800199e <BSP_LCD_DisplayStringAt+0xa6>
 800196a:	e02e      	b.n	80019ca <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad1      	subs	r1, r2, r3
 8001972:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <BSP_LCD_DisplayStringAt+0x174>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	483e      	ldr	r0, [pc, #248]	@ (8001a70 <BSP_LCD_DisplayStringAt+0x178>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4403      	add	r3, r0
 8001982:	3308      	adds	r3, #8
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	4413      	add	r3, r2
 8001994:	83fb      	strh	r3, [r7, #30]
      break;
 8001996:	e01b      	b.n	80019d0 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	83fb      	strh	r3, [r7, #30]
      break;
 800199c:	e018      	b.n	80019d0 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	b299      	uxth	r1, r3
 80019a6:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <BSP_LCD_DisplayStringAt+0x174>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4831      	ldr	r0, [pc, #196]	@ (8001a70 <BSP_LCD_DisplayStringAt+0x178>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4403      	add	r3, r0
 80019b6:	3308      	adds	r3, #8
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	889b      	ldrh	r3, [r3, #4]
 80019bc:	fb11 f303 	smulbb	r3, r1, r3
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	4413      	add	r3, r2
 80019c6:	83fb      	strh	r3, [r7, #30]
      break;
 80019c8:	e002      	b.n	80019d0 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	83fb      	strh	r3, [r7, #30]
      break;
 80019ce:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80019d0:	e01a      	b.n	8001a08 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	89b9      	ldrh	r1, [r7, #12]
 80019d8:	8bfb      	ldrh	r3, [r7, #30]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff48 	bl	8001870 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80019e0:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <BSP_LCD_DisplayStringAt+0x174>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4922      	ldr	r1, [pc, #136]	@ (8001a70 <BSP_LCD_DisplayStringAt+0x178>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	889a      	ldrh	r2, [r3, #4]
 80019f6:	8bfb      	ldrh	r3, [r7, #30]
 80019f8:	4413      	add	r3, r2
 80019fa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
    i++;
 8001a02:	8bbb      	ldrh	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2dc      	uxtb	r4, r3
 8001a16:	f7ff fe2b 	bl	8001670 <BSP_LCD_GetXSize>
 8001a1a:	8bb9      	ldrh	r1, [r7, #28]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <BSP_LCD_DisplayStringAt+0x174>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4d13      	ldr	r5, [pc, #76]	@ (8001a70 <BSP_LCD_DisplayStringAt+0x178>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	442b      	add	r3, r5
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	1ac3      	subs	r3, r0, r3
 8001a38:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <BSP_LCD_DisplayStringAt+0x174>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <BSP_LCD_DisplayStringAt+0x178>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4403      	add	r3, r0
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001a50:	4299      	cmp	r1, r3
 8001a52:	bf2c      	ite	cs
 8001a54:	2301      	movcs	r3, #1
 8001a56:	2300      	movcc	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4023      	ands	r3, r4
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1b7      	bne.n	80019d2 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6c:	2000027c 	.word	0x2000027c
 8001a70:	20000280 	.word	0x20000280

08001a74 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	@ 0x38
 8001a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a60      	ldr	r2, [pc, #384]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a59      	ldr	r2, [pc, #356]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b57      	ldr	r3, [pc, #348]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a52      	ldr	r2, [pc, #328]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b49      	ldr	r3, [pc, #292]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b45      	ldr	r3, [pc, #276]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a44      	ldr	r2, [pc, #272]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b42      	ldr	r3, [pc, #264]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a36      	ldr	r2, [pc, #216]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a2f      	ldr	r2, [pc, #188]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <BSP_LCD_MspInit+0x190>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001b5a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4824      	ldr	r0, [pc, #144]	@ (8001c08 <BSP_LCD_MspInit+0x194>)
 8001b78:	f001 fa1c 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001b7c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <BSP_LCD_MspInit+0x198>)
 8001b8a:	f001 fa13 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001b8e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481d      	ldr	r0, [pc, #116]	@ (8001c10 <BSP_LCD_MspInit+0x19c>)
 8001b9c:	f001 fa0a 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001ba0:	2348      	movs	r3, #72	@ 0x48
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481a      	ldr	r0, [pc, #104]	@ (8001c14 <BSP_LCD_MspInit+0x1a0>)
 8001bac:	f001 fa02 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4816      	ldr	r0, [pc, #88]	@ (8001c18 <BSP_LCD_MspInit+0x1a4>)
 8001bbe:	f001 f9f9 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001bc2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4813      	ldr	r0, [pc, #76]	@ (8001c1c <BSP_LCD_MspInit+0x1a8>)
 8001bd0:	f001 f9f0 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8001bd8:	2309      	movs	r3, #9
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	480a      	ldr	r0, [pc, #40]	@ (8001c0c <BSP_LCD_MspInit+0x198>)
 8001be4:	f001 f9e6 	bl	8002fb4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001be8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <BSP_LCD_MspInit+0x1a8>)
 8001bf6:	f001 f9dd 	bl	8002fb4 <HAL_GPIO_Init>
}
 8001bfa:	bf00      	nop
 8001bfc:	3738      	adds	r7, #56	@ 0x38
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800

08001c20 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	603a      	str	r2, [r7, #0]
 8001c2a:	80fb      	strh	r3, [r7, #6]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <BSP_LCD_DrawPixel+0x44>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <BSP_LCD_DrawPixel+0x48>)
 8001c36:	2134      	movs	r1, #52	@ 0x34
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	335c      	adds	r3, #92	@ 0x5c
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	88bd      	ldrh	r5, [r7, #4]
 8001c44:	f7ff fd14 	bl	8001670 <BSP_LCD_GetXSize>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	fb03 f205 	mul.w	r2, r3, r5
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4423      	add	r3, r4
 8001c56:	461a      	mov	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	2000027c 	.word	0x2000027c
 8001c68:	20000164 	.word	0x20000164

08001c6c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	603a      	str	r2, [r7, #0]
 8001c76:	80fb      	strh	r3, [r7, #6]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <DrawChar+0x16c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4953      	ldr	r1, [pc, #332]	@ (8001ddc <DrawChar+0x170>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3308      	adds	r3, #8
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	88db      	ldrh	r3, [r3, #6]
 8001c9e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <DrawChar+0x16c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	494d      	ldr	r1, [pc, #308]	@ (8001ddc <DrawChar+0x170>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	889b      	ldrh	r3, [r3, #4]
 8001cb6:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8001cb8:	8a3b      	ldrh	r3, [r7, #16]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da00      	bge.n	8001cc2 <DrawChar+0x56>
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	10db      	asrs	r3, r3, #3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	8a3b      	ldrh	r3, [r7, #16]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e076      	b.n	8001dc6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8001cd8:	8a3b      	ldrh	r3, [r7, #16]
 8001cda:	3307      	adds	r3, #7
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da00      	bge.n	8001ce2 <DrawChar+0x76>
 8001ce0:	3307      	adds	r3, #7
 8001ce2:	10db      	asrs	r3, r3, #3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8001cf2:	8a3b      	ldrh	r3, [r7, #16]
 8001cf4:	3307      	adds	r3, #7
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	da00      	bge.n	8001cfc <DrawChar+0x90>
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	10db      	asrs	r3, r3, #3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d002      	beq.n	8001d08 <DrawChar+0x9c>
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d004      	beq.n	8001d10 <DrawChar+0xa4>
 8001d06:	e00c      	b.n	8001d22 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	617b      	str	r3, [r7, #20]
        break;
 8001d0e:	e016      	b.n	8001d3e <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	3201      	adds	r2, #1
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
        break;
 8001d20:	e00d      	b.n	8001d3e <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4313      	orrs	r3, r2
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	3202      	adds	r2, #2
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
        break;
 8001d3c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e036      	b.n	8001db2 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8001d44:	8a3a      	ldrh	r2, [r7, #16]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	1ad2      	subs	r2, r2, r3
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	2201      	movs	r2, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4413      	add	r3, r2
 8001d68:	b298      	uxth	r0, r3
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <DrawChar+0x16c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	491b      	ldr	r1, [pc, #108]	@ (8001ddc <DrawChar+0x170>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7ff ff4e 	bl	8001c20 <BSP_LCD_DrawPixel>
 8001d84:	e012      	b.n	8001dac <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <DrawChar+0x16c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4911      	ldr	r1, [pc, #68]	@ (8001ddc <DrawChar+0x170>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3304      	adds	r3, #4
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7ff ff3a 	bl	8001c20 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3301      	adds	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	8a3b      	ldrh	r3, [r7, #16]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3c4      	bcc.n	8001d44 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	8a7b      	ldrh	r3, [r7, #18]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d384      	bcc.n	8001cd8 <DrawChar+0x6c>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000027c 	.word	0x2000027c
 8001ddc:	20000280 	.word	0x20000280

08001de0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <FillBuffer+0x68>)
 8001df0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001df4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001df6:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <FillBuffer+0x68>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8001dfc:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <FillBuffer+0x68>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <FillBuffer+0x68>)
 8001e04:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <FillBuffer+0x6c>)
 8001e06:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8001e08:	480f      	ldr	r0, [pc, #60]	@ (8001e48 <FillBuffer+0x68>)
 8001e0a:	f000 fe3d 	bl	8002a88 <HAL_DMA2D_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d115      	bne.n	8001e40 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <FillBuffer+0x68>)
 8001e18:	f000 ff9e 	bl	8002d58 <HAL_DMA2D_ConfigLayer>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69f9      	ldr	r1, [r7, #28]
 8001e2c:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <FillBuffer+0x68>)
 8001e2e:	f000 fe7e 	bl	8002b2e <HAL_DMA2D_Start>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001e38:	210a      	movs	r1, #10
 8001e3a:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <FillBuffer+0x68>)
 8001e3c:	f000 fea2 	bl	8002b84 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000020c 	.word	0x2000020c
 8001e4c:	4002b000 	.word	0x4002b000

08001e50 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e54:	4b29      	ldr	r3, [pc, #164]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001e56:	4a2a      	ldr	r2, [pc, #168]	@ (8001f00 <BSP_SDRAM_Init+0xb0>)
 8001e58:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001e60:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e62:	2207      	movs	r2, #7
 8001e64:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001e66:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e68:	2204      	movs	r2, #4
 8001e6a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001e6c:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e74:	2202      	movs	r2, #2
 8001e76:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001e78:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001e7e:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001e80:	2202      	movs	r2, #2
 8001e82:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001e92:	2204      	movs	r2, #4
 8001e94:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001e98:	2210      	movs	r2, #16
 8001e9a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001e9e:	2240      	movs	r2, #64	@ 0x40
 8001ea0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001ea4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ea8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001eb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eb6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001ec0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001eca:	f000 f87f 	bl	8001fcc <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <BSP_SDRAM_Init+0xb4>)
 8001ed0:	480a      	ldr	r0, [pc, #40]	@ (8001efc <BSP_SDRAM_Init+0xac>)
 8001ed2:	f003 fc43 	bl	800575c <HAL_SDRAM_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <BSP_SDRAM_Init+0xb8>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e002      	b.n	8001eea <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <BSP_SDRAM_Init+0xb8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001eea:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001eee:	f000 f80d 	bl	8001f0c <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <BSP_SDRAM_Init+0xb8>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000029c 	.word	0x2000029c
 8001f00:	a0000140 	.word	0xa0000140
 8001f04:	200002d0 	.word	0x200002d0
 8001f08:	20000084 	.word	0x20000084

08001f0c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001f18:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f1e:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f20:	2208      	movs	r2, #8
 8001f22:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001f24:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f34:	4923      	ldr	r1, [pc, #140]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f36:	4824      	ldr	r0, [pc, #144]	@ (8001fc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f38:	f003 fc4e 	bl	80057d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f000 faaf 	bl	80024a0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001f5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f5e:	4919      	ldr	r1, [pc, #100]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f60:	4819      	ldr	r0, [pc, #100]	@ (8001fc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f62:	f003 fc39 	bl	80057d8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f68:	2203      	movs	r2, #3
 8001f6a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f6e:	2208      	movs	r2, #8
 8001f70:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f74:	2204      	movs	r2, #4
 8001f76:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001f7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f82:	4910      	ldr	r1, [pc, #64]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f84:	4810      	ldr	r0, [pc, #64]	@ (8001fc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f86:	f003 fc27 	bl	80057d8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001f8a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001f8e:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f92:	2204      	movs	r2, #4
 8001f94:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f98:	2208      	movs	r2, #8
 8001f9a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fa6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fac:	4905      	ldr	r1, [pc, #20]	@ (8001fc4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fae:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fb0:	f003 fc12 	bl	80057d8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4804      	ldr	r0, [pc, #16]	@ (8001fc8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fb8:	f003 fc43 	bl	8005842 <HAL_SDRAM_ProgramRefreshRate>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200002ec 	.word	0x200002ec
 8001fc8:	2000029c 	.word	0x2000029c

08001fcc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	@ 0x40
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ec 	beq.w	80021b6 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe2:	4b77      	ldr	r3, [pc, #476]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe6:	4a76      	ldr	r2, [pc, #472]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6393      	str	r3, [r2, #56]	@ 0x38
 8001fee:	4b74      	ldr	r3, [pc, #464]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffe:	4b70      	ldr	r3, [pc, #448]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a6f      	ldr	r2, [pc, #444]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b6d      	ldr	r3, [pc, #436]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	4b69      	ldr	r3, [pc, #420]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a68      	ldr	r2, [pc, #416]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b66      	ldr	r3, [pc, #408]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	4b62      	ldr	r3, [pc, #392]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a61      	ldr	r2, [pc, #388]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b5f      	ldr	r3, [pc, #380]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	4b5b      	ldr	r3, [pc, #364]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a5a      	ldr	r2, [pc, #360]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	4b54      	ldr	r3, [pc, #336]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a53      	ldr	r2, [pc, #332]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b51      	ldr	r3, [pc, #324]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b4d      	ldr	r3, [pc, #308]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a4c      	ldr	r2, [pc, #304]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b4a      	ldr	r3, [pc, #296]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b46      	ldr	r3, [pc, #280]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a45      	ldr	r2, [pc, #276]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 80020ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <BSP_SDRAM_MspInit+0x1f4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80020c2:	2302      	movs	r3, #2
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80020ca:	230c      	movs	r3, #12
 80020cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80020ce:	2360      	movs	r3, #96	@ 0x60
 80020d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80020d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	483a      	ldr	r0, [pc, #232]	@ (80021c4 <BSP_SDRAM_MspInit+0x1f8>)
 80020da:	f000 ff6b 	bl	8002fb4 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80020de:	2301      	movs	r3, #1
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80020e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e6:	4619      	mov	r1, r3
 80020e8:	4837      	ldr	r0, [pc, #220]	@ (80021c8 <BSP_SDRAM_MspInit+0x1fc>)
 80020ea:	f000 ff63 	bl	8002fb4 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80020ee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80020f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	4834      	ldr	r0, [pc, #208]	@ (80021cc <BSP_SDRAM_MspInit+0x200>)
 80020fc:	f000 ff5a 	bl	8002fb4 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002100:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800210a:	4619      	mov	r1, r3
 800210c:	4830      	ldr	r0, [pc, #192]	@ (80021d0 <BSP_SDRAM_MspInit+0x204>)
 800210e:	f000 ff51 	bl	8002fb4 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002112:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	482d      	ldr	r0, [pc, #180]	@ (80021d4 <BSP_SDRAM_MspInit+0x208>)
 8002120:	f000 ff48 	bl	8002fb4 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002124:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800212a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212e:	4619      	mov	r1, r3
 8002130:	4829      	ldr	r0, [pc, #164]	@ (80021d8 <BSP_SDRAM_MspInit+0x20c>)
 8002132:	f000 ff3f 	bl	8002fb4 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002136:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800213c:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800213e:	2280      	movs	r2, #128	@ 0x80
 8002140:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002148:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800214a:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800214c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002150:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002152:	4b22      	ldr	r3, [pc, #136]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002154:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002158:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800215c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002160:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002162:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002168:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800216a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800216e:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002176:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002178:	2203      	movs	r2, #3
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800218a:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <BSP_SDRAM_MspInit+0x214>)
 800218c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002192:	631a      	str	r2, [r3, #48]	@ 0x30
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 800219a:	4810      	ldr	r0, [pc, #64]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 800219c:	f000 fb64 	bl	8002868 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80021a0:	480e      	ldr	r0, [pc, #56]	@ (80021dc <BSP_SDRAM_MspInit+0x210>)
 80021a2:	f000 fab3 	bl	800270c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	210f      	movs	r1, #15
 80021aa:	2038      	movs	r0, #56	@ 0x38
 80021ac:	f000 fa77 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80021b0:	2038      	movs	r0, #56	@ 0x38
 80021b2:	f000 fa90 	bl	80026d6 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80021b6:	bf00      	nop
 80021b8:	3740      	adds	r7, #64	@ 0x40
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	200002fc 	.word	0x200002fc
 80021e0:	40026410 	.word	0x40026410

080021e4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	80fb      	strh	r3, [r7, #6]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80021f8:	4a13      	ldr	r2, [pc, #76]	@ (8002248 <BSP_TS_Init+0x64>)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80021fe:	4a13      	ldr	r2, [pc, #76]	@ (800224c <BSP_TS_Init+0x68>)
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <BSP_TS_Init+0x6c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2082      	movs	r0, #130	@ 0x82
 800220a:	4798      	blx	r3
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	f640 0311 	movw	r3, #2065	@ 0x811
 8002214:	429a      	cmp	r2, r3
 8002216:	d104      	bne.n	8002222 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <BSP_TS_Init+0x70>)
 800221a:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <BSP_TS_Init+0x6c>)
 800221c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002228:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <BSP_TS_Init+0x70>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2082      	movs	r0, #130	@ 0x82
 8002230:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <BSP_TS_Init+0x70>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2082      	movs	r0, #130	@ 0x82
 800223a:	4798      	blx	r3
  }

  return ret;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000360 	.word	0x20000360
 800224c:	20000362 	.word	0x20000362
 8002250:	20000038 	.word	0x20000038
 8002254:	2000035c 	.word	0x2000035c

08002258 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002260:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <BSP_TS_GetState+0x148>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2082      	movs	r0, #130	@ 0x82
 8002268:	4798      	blx	r3
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 808d 	beq.w	8002396 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800227c:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <BSP_TS_GetState+0x148>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	f107 010e 	add.w	r1, r7, #14
 800228a:	2082      	movs	r0, #130	@ 0x82
 800228c:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 800228e:	89bb      	ldrh	r3, [r7, #12]
 8002290:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002294:	b29b      	uxth	r3, r3
 8002296:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8002298:	89bb      	ldrh	r3, [r7, #12]
 800229a:	4a42      	ldr	r2, [pc, #264]	@ (80023a4 <BSP_TS_GetState+0x14c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 80022a4:	8abb      	ldrh	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	82bb      	strh	r3, [r7, #20]
 80022ae:	e008      	b.n	80022c2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80022b0:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <BSP_TS_GetState+0x150>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	8aba      	ldrh	r2, [r7, #20]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d903      	bls.n	80022c2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <BSP_TS_GetState+0x150>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	3b01      	subs	r3, #1
 80022c0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80022c2:	8abb      	ldrh	r3, [r7, #20]
 80022c4:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d806      	bhi.n	80022de <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80022d0:	89fb      	ldrh	r3, [r7, #14]
 80022d2:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80022d6:	330e      	adds	r3, #14
 80022d8:	b29b      	uxth	r3, r3
 80022da:	81fb      	strh	r3, [r7, #14]
 80022dc:	e005      	b.n	80022ea <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80022e4:	3308      	adds	r3, #8
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 80022ea:	89fb      	ldrh	r3, [r7, #14]
 80022ec:	4a2f      	ldr	r2, [pc, #188]	@ (80023ac <BSP_TS_GetState+0x154>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 80022f6:	8afb      	ldrh	r3, [r7, #22]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	82fb      	strh	r3, [r7, #22]
 8002300:	e008      	b.n	8002314 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8002302:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <BSP_TS_GetState+0x158>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	8afa      	ldrh	r2, [r7, #22]
 8002308:	429a      	cmp	r2, r3
 800230a:	d903      	bls.n	8002314 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800230c:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <BSP_TS_GetState+0x158>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	3b01      	subs	r3, #1
 8002312:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 8002314:	8afb      	ldrh	r3, [r7, #22]
 8002316:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	461a      	mov	r2, r3
 800231c:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <BSP_TS_GetState+0x15c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d906      	bls.n	8002332 <BSP_TS_GetState+0xda>
 8002324:	89fa      	ldrh	r2, [r7, #14]
 8002326:	4b23      	ldr	r3, [pc, #140]	@ (80023b4 <BSP_TS_GetState+0x15c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	e005      	b.n	800233e <BSP_TS_GetState+0xe6>
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <BSP_TS_GetState+0x15c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	89fb      	ldrh	r3, [r7, #14]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8002340:	89bb      	ldrh	r3, [r7, #12]
 8002342:	461a      	mov	r2, r3
 8002344:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <BSP_TS_GetState+0x160>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d906      	bls.n	800235a <BSP_TS_GetState+0x102>
 800234c:	89ba      	ldrh	r2, [r7, #12]
 800234e:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <BSP_TS_GetState+0x160>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b29b      	uxth	r3, r3
 8002358:	e005      	b.n	8002366 <BSP_TS_GetState+0x10e>
 800235a:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <BSP_TS_GetState+0x160>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29a      	uxth	r2, r3
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b29b      	uxth	r3, r3
 8002366:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8002368:	8a7a      	ldrh	r2, [r7, #18]
 800236a:	8a3b      	ldrh	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	2b05      	cmp	r3, #5
 8002370:	dd07      	ble.n	8002382 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	461a      	mov	r2, r3
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <BSP_TS_GetState+0x15c>)
 8002378:	601a      	str	r2, [r3, #0]
      _y = y;
 800237a:	89bb      	ldrh	r3, [r7, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <BSP_TS_GetState+0x160>)
 8002380:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <BSP_TS_GetState+0x15c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <BSP_TS_GetState+0x160>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b29a      	uxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	809a      	strh	r2, [r3, #4]
  }
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000035c 	.word	0x2000035c
 80023a4:	ba2e8ba3 	.word	0xba2e8ba3
 80023a8:	20000362 	.word	0x20000362
 80023ac:	88888889 	.word	0x88888889
 80023b0:	20000360 	.word	0x20000360
 80023b4:	20000364 	.word	0x20000364
 80023b8:	20000368 	.word	0x20000368

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <HAL_Init+0x40>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <HAL_Init+0x40>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <HAL_Init+0x40>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 f94f 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	200f      	movs	r0, #15
 80023ec:	f000 f808 	bl	8002400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f002 fb19 	bl	8004a26 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_InitTick+0x54>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <HAL_InitTick+0x58>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f967 	bl	80026f2 <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00e      	b.n	800244c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d80a      	bhi.n	800244a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f000 f92f 	bl	800269e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002440:	4a06      	ldr	r2, [pc, #24]	@ (800245c <HAL_InitTick+0x5c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000090 	.word	0x20000090
 8002458:	2000008c 	.word	0x2000008c
 800245c:	20000088 	.word	0x20000088

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000008c 	.word	0x2000008c
 8002484:	2000036c 	.word	0x2000036c

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	2000036c 	.word	0x2000036c

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000008c 	.word	0x2000008c

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	@ (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4907      	ldr	r1, [pc, #28]	@ (8002584 <__NVIC_EnableIRQ+0x38>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	@ (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	@ (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	@ 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	@ 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f7ff ff8e 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff29 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff3e 	bl	8002530 <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff8e 	bl	80025dc <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5d 	bl	8002588 <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff31 	bl	800254c <__NVIC_EnableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffa2 	bl	8002644 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff feb6 	bl	8002488 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e099      	b.n	800285c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002748:	e00f      	b.n	800276a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274a:	f7ff fe9d 	bl	8002488 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b05      	cmp	r3, #5
 8002756:	d908      	bls.n	800276a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2203      	movs	r2, #3
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e078      	b.n	800285c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e8      	bne.n	800274a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <HAL_DMA_Init+0x158>)
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4313      	orrs	r3, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0307 	bic.w	r3, r3, #7
 80027ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d117      	bne.n	800282e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8bd 	bl	8002990 <DMA_CheckFifoParam>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800282a:	2301      	movs	r3, #1
 800282c:	e016      	b.n	800285c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f874 	bl	8002924 <DMA_CalcBaseAndBitshift>
 800283c:	4603      	mov	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	223f      	movs	r2, #63	@ 0x3f
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	f010803f 	.word	0xf010803f

08002868 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e050      	b.n	800291c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d101      	bne.n	800288a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	e048      	b.n	800291c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2221      	movs	r2, #33	@ 0x21
 80028c8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f82a 	bl	8002924 <DMA_CalcBaseAndBitshift>
 80028d0:	4603      	mov	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	223f      	movs	r2, #63	@ 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3b10      	subs	r3, #16
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <DMA_CalcBaseAndBitshift+0x64>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293e:	4a13      	ldr	r2, [pc, #76]	@ (800298c <DMA_CalcBaseAndBitshift+0x68>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d909      	bls.n	8002966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	@ 0x58
 8002964:	e007      	b.n	8002976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	aaaaaaab 	.word	0xaaaaaaab
 800298c:	08008a68 	.word	0x08008a68

08002990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d856      	bhi.n	8002a5e <DMA_CheckFifoParam+0xce>
 80029b0:	a201      	add	r2, pc, #4	@ (adr r2, 80029b8 <DMA_CheckFifoParam+0x28>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029db 	.word	0x080029db
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	08002a5f 	.word	0x08002a5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d046      	beq.n	8002a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e043      	b.n	8002a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029e2:	d140      	bne.n	8002a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e03d      	b.n	8002a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f2:	d121      	bne.n	8002a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d837      	bhi.n	8002a6a <DMA_CheckFifoParam+0xda>
 80029fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <DMA_CheckFifoParam+0x70>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a17 	.word	0x08002a17
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002a29 	.word	0x08002a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e030      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d025      	beq.n	8002a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e022      	b.n	8002a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a30:	d11f      	bne.n	8002a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a36:	e01c      	b.n	8002a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d903      	bls.n	8002a46 <DMA_CheckFifoParam+0xb6>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d003      	beq.n	8002a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a44:	e018      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4a:	e015      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e00b      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e00a      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e008      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e006      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e004      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
    }
  } 
  
  return status; 
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e03b      	b.n	8002b12 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f833 	bl	8002b1a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	f023 0107 	bic.w	r1, r3, #7
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002af2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68d1      	ldr	r1, [r2, #12]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af02      	add	r7, sp, #8
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA2D_Start+0x1c>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e018      	b.n	8002b7c <HAL_DMA2D_Start+0x4e>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f989 	bl	8002e7c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d056      	beq.n	8002c4e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7ff fc72 	bl	8002488 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ba6:	e04b      	b.n	8002c40 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d023      	beq.n	8002c02 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2221      	movs	r2, #33	@ 0x21
 8002bec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0a5      	b.n	8002d4e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7ff fc3d 	bl	8002488 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <HAL_DMA2D_PollForTransfer+0x9c>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e086      	b.n	8002d4e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ac      	beq.n	8002ba8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d061      	beq.n	8002d34 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c70:	f7ff fc0a 	bl	8002488 <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002c76:	e056      	b.n	8002d26 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02e      	beq.n	8002ce8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	f043 0204 	orr.w	r2, r3, #4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2229      	movs	r2, #41	@ 0x29
 8002cd2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e032      	b.n	8002d4e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d01a      	beq.n	8002d26 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cf0:	f7ff fbca 	bl	8002488 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d302      	bcc.n	8002d06 <HAL_DMA2D_PollForTransfer+0x182>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0a:	f043 0220 	orr.w	r2, r3, #32
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e013      	b.n	8002d4e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0a1      	beq.n	8002c78 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2212      	movs	r2, #18
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA2D_ConfigLayer+0x20>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e079      	b.n	8002e6c <HAL_DMA2D_ConfigLayer+0x114>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002da2:	4b35      	ldr	r3, [pc, #212]	@ (8002e78 <HAL_DMA2D_ConfigLayer+0x120>)
 8002da4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b0a      	cmp	r3, #10
 8002dac:	d003      	beq.n	8002db6 <HAL_DMA2D_ConfigLayer+0x5e>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b09      	cmp	r3, #9
 8002db4:	d107      	bne.n	8002dc6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e005      	b.n	8002dd2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d120      	bne.n	8002e1a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	ea02 0103 	and.w	r1, r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b0a      	cmp	r3, #10
 8002e00:	d003      	beq.n	8002e0a <HAL_DMA2D_ConfigLayer+0xb2>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	d127      	bne.n	8002e5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e18:	e01f      	b.n	8002e5a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	ea02 0103 	and.w	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b0a      	cmp	r3, #10
 8002e42:	d003      	beq.n	8002e4c <HAL_DMA2D_ConfigLayer+0xf4>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d106      	bne.n	8002e5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e58:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	ff03000f 	.word	0xff03000f

08002e7c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b08b      	sub	sp, #44	@ 0x2c
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	041a      	lsls	r2, r3, #16
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eb4:	d174      	bne.n	8002fa0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ebc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002ec4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ecc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d108      	bne.n	8002eee <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eec:	e053      	b.n	8002f96 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d106      	bne.n	8002f04 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f02:	e048      	b.n	8002f96 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d111      	bne.n	8002f30 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	0cdb      	lsrs	r3, r3, #19
 8002f10:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	0a9b      	lsrs	r3, r3, #10
 8002f16:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	08db      	lsrs	r3, r3, #3
 8002f1c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	02db      	lsls	r3, r3, #11
 8002f26:	4313      	orrs	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	e032      	b.n	8002f96 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d117      	bne.n	8002f68 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	0fdb      	lsrs	r3, r3, #31
 8002f3c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	0cdb      	lsrs	r3, r3, #19
 8002f42:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	0adb      	lsrs	r3, r3, #11
 8002f48:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	03db      	lsls	r3, r3, #15
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f66:	e016      	b.n	8002f96 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	0f1b      	lsrs	r3, r3, #28
 8002f6c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	0d1b      	lsrs	r3, r3, #20
 8002f72:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	0b1b      	lsrs	r3, r3, #12
 8002f78:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	011a      	lsls	r2, r3, #4
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	031b      	lsls	r3, r3, #12
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f9e:	e003      	b.n	8002fa8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	372c      	adds	r7, #44	@ 0x2c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e177      	b.n	80032c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	f040 8166 	bne.w	80032ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d005      	beq.n	8003006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003002:	2b02      	cmp	r3, #2
 8003004:	d130      	bne.n	8003068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800303c:	2201      	movs	r2, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 0201 	and.w	r2, r3, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b03      	cmp	r3, #3
 8003072:	d017      	beq.n	80030a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d123      	bne.n	80030f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	08da      	lsrs	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3208      	adds	r2, #8
 80030b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	69b9      	ldr	r1, [r7, #24]
 80030f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80c0 	beq.w	80032ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <HAL_GPIO_Init+0x324>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	4a65      	ldr	r2, [pc, #404]	@ (80032d8 <HAL_GPIO_Init+0x324>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003148:	6453      	str	r3, [r2, #68]	@ 0x44
 800314a:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <HAL_GPIO_Init+0x324>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003156:	4a61      	ldr	r2, [pc, #388]	@ (80032dc <HAL_GPIO_Init+0x328>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	@ (80032e0 <HAL_GPIO_Init+0x32c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d037      	beq.n	80031f2 <HAL_GPIO_Init+0x23e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <HAL_GPIO_Init+0x330>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_GPIO_Init+0x23a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <HAL_GPIO_Init+0x334>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a55      	ldr	r2, [pc, #340]	@ (80032ec <HAL_GPIO_Init+0x338>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x232>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a54      	ldr	r2, [pc, #336]	@ (80032f0 <HAL_GPIO_Init+0x33c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a53      	ldr	r2, [pc, #332]	@ (80032f4 <HAL_GPIO_Init+0x340>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x22a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a52      	ldr	r2, [pc, #328]	@ (80032f8 <HAL_GPIO_Init+0x344>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a51      	ldr	r2, [pc, #324]	@ (80032fc <HAL_GPIO_Init+0x348>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a50      	ldr	r2, [pc, #320]	@ (8003300 <HAL_GPIO_Init+0x34c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003304 <HAL_GPIO_Init+0x350>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x21a>
 80031ca:	2309      	movs	r3, #9
 80031cc:	e012      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ce:	230a      	movs	r3, #10
 80031d0:	e010      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d2:	2308      	movs	r3, #8
 80031d4:	e00e      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00c      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031da:	2306      	movs	r3, #6
 80031dc:	e00a      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031de:	2305      	movs	r3, #5
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031f2:	2300      	movs	r3, #0
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003204:	4935      	ldr	r1, [pc, #212]	@ (80032dc <HAL_GPIO_Init+0x328>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003236:	4a34      	ldr	r2, [pc, #208]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <HAL_GPIO_Init+0x354>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003260:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003266:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328a:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_GPIO_Init+0x354>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	f67f ae84 	bls.w	8002fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	@ 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40021c00 	.word	0x40021c00
 8003300:	40022000 	.word	0x40022000
 8003304:	40022400 	.word	0x40022400
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800334a:	4b08      	ldr	r3, [pc, #32]	@ (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f806 	bl	8003370 <HAL_GPIO_EXTI_Callback>
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e12b      	b.n	80035f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f95d 	bl	800366e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	@ 0x24
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ec:	f001 ffe2 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 80033f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a81      	ldr	r2, [pc, #516]	@ (80035fc <HAL_I2C_Init+0x274>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d807      	bhi.n	800340c <HAL_I2C_Init+0x84>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a80      	ldr	r2, [pc, #512]	@ (8003600 <HAL_I2C_Init+0x278>)
 8003400:	4293      	cmp	r3, r2
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e006      	b.n	800341a <HAL_I2C_Init+0x92>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a7d      	ldr	r2, [pc, #500]	@ (8003604 <HAL_I2C_Init+0x27c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	bf94      	ite	ls
 8003414:	2301      	movls	r3, #1
 8003416:	2300      	movhi	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0e7      	b.n	80035f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a78      	ldr	r2, [pc, #480]	@ (8003608 <HAL_I2C_Init+0x280>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a6a      	ldr	r2, [pc, #424]	@ (80035fc <HAL_I2C_Init+0x274>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d802      	bhi.n	800345c <HAL_I2C_Init+0xd4>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	e009      	b.n	8003470 <HAL_I2C_Init+0xe8>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	4a69      	ldr	r2, [pc, #420]	@ (800360c <HAL_I2C_Init+0x284>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	3301      	adds	r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	430b      	orrs	r3, r1
 8003476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003482:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	495c      	ldr	r1, [pc, #368]	@ (80035fc <HAL_I2C_Init+0x274>)
 800348c:	428b      	cmp	r3, r1
 800348e:	d819      	bhi.n	80034c4 <HAL_I2C_Init+0x13c>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e59      	subs	r1, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fbb1 f3f3 	udiv	r3, r1, r3
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034a4:	400b      	ands	r3, r1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_I2C_Init+0x138>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e59      	subs	r1, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	e051      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 80034c0:	2304      	movs	r3, #4
 80034c2:	e04f      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d111      	bne.n	80034f0 <HAL_I2C_Init+0x168>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e012      	b.n	8003516 <HAL_I2C_Init+0x18e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Init+0x196>
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <HAL_I2C_Init+0x1bc>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1e58      	subs	r0, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	fbb0 f3f3 	udiv	r3, r0, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003542:	e00f      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e58      	subs	r0, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	0099      	lsls	r1, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	fbb0 f3f3 	udiv	r3, r0, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	6809      	ldr	r1, [r1, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003592:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6911      	ldr	r1, [r2, #16]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	000186a0 	.word	0x000186a0
 8003600:	001e847f 	.word	0x001e847f
 8003604:	003d08ff 	.word	0x003d08ff
 8003608:	431bde83 	.word	0x431bde83
 800360c:	10624dd3 	.word	0x10624dd3

08003610 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e021      	b.n	8003666 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	@ 0x24
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f821 	bl	8003682 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	460b      	mov	r3, r1
 80036ac:	813b      	strh	r3, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036b2:	f7fe fee9 	bl	8002488 <HAL_GetTick>
 80036b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	f040 80d9 	bne.w	8003878 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2319      	movs	r3, #25
 80036cc:	2201      	movs	r2, #1
 80036ce:	496d      	ldr	r1, [pc, #436]	@ (8003884 <HAL_I2C_Mem_Write+0x1ec>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fc99 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
 80036de:	e0cc      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Mem_Write+0x56>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0c5      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d007      	beq.n	8003714 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2221      	movs	r2, #33	@ 0x21
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2240      	movs	r2, #64	@ 0x40
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_I2C_Mem_Write+0x1f0>)
 8003754:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003756:	88f8      	ldrh	r0, [r7, #6]
 8003758:	893a      	ldrh	r2, [r7, #8]
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4603      	mov	r3, r0
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fad0 	bl	8003d0c <I2C_RequestMemoryWrite>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d052      	beq.n	8003818 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e081      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fd5e 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06b      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_I2C_Mem_Write+0x180>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1aa      	bne.n	8003776 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fd51 	bl	80042cc <I2C_WaitOnBTFFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e016      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	00100002 	.word	0x00100002
 8003888:	ffff0000 	.word	0xffff0000

0800388c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	@ 0x30
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038a6:	f7fe fdef 	bl	8002488 <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	f040 8214 	bne.w	8003ce2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2319      	movs	r3, #25
 80038c0:	2201      	movs	r2, #1
 80038c2:	497b      	ldr	r1, [pc, #492]	@ (8003ab0 <HAL_I2C_Mem_Read+0x224>)
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fb9f 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
 80038d2:	e207      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x56>
 80038de:	2302      	movs	r3, #2
 80038e0:	e200      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d007      	beq.n	8003908 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003916:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2222      	movs	r2, #34	@ 0x22
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2240      	movs	r2, #64	@ 0x40
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003938:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab4 <HAL_I2C_Mem_Read+0x228>)
 8003948:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800394a:	88f8      	ldrh	r0, [r7, #6]
 800394c:	893a      	ldrh	r2, [r7, #8]
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	4603      	mov	r3, r0
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa6c 	bl	8003e38 <I2C_RequestMemoryRead>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e1bc      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d113      	bne.n	800399a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003972:	2300      	movs	r3, #0
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e190      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d11b      	bne.n	80039da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e170      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d11b      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	e150      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a30:	e144      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	f200 80f1 	bhi.w	8003c1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d123      	bne.n	8003a8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fc87 	bl	800435c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e145      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a8a:	e117      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d14e      	bne.n	8003b32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4906      	ldr	r1, [pc, #24]	@ (8003ab8 <HAL_I2C_Mem_Read+0x22c>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fab2 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e11a      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
 8003aae:	bf00      	nop
 8003ab0:	00100002 	.word	0x00100002
 8003ab4:	ffff0000 	.word	0xffff0000
 8003ab8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b30:	e0c4      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b38:	2200      	movs	r2, #0
 8003b3a:	496c      	ldr	r1, [pc, #432]	@ (8003cec <HAL_I2C_Mem_Read+0x460>)
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fa63 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0cb      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	4955      	ldr	r1, [pc, #340]	@ (8003cec <HAL_I2C_Mem_Read+0x460>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fa35 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e09d      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c1c:	e04e      	b.n	8003cbc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb9a 	bl	800435c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e058      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d124      	bne.n	8003cbc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f aeb6 	bne.w	8003a32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3728      	adds	r7, #40	@ 0x28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	00010004 	.word	0x00010004

08003cf0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	817b      	strh	r3, [r7, #10]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	813b      	strh	r3, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f960 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d5c:	d103      	bne.n	8003d66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e05f      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6a:	897b      	ldrh	r3, [r7, #10]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	492d      	ldr	r1, [pc, #180]	@ (8003e34 <I2C_RequestMemoryWrite+0x128>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f9bb 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04c      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa46 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d107      	bne.n	8003dce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e02b      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e021      	b.n	8003e28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa20 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e005      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1e:	893b      	ldrh	r3, [r7, #8]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	00010002 	.word	0x00010002

08003e38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	813b      	strh	r3, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8c2 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e98:	d103      	bne.n	8003ea2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0aa      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	4952      	ldr	r1, [pc, #328]	@ (8004004 <I2C_RequestMemoryRead+0x1cc>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f91d 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e097      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f9a8 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d107      	bne.n	8003f0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e076      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	e021      	b.n	8003f64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	6a39      	ldr	r1, [r7, #32]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f982 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d107      	bne.n	8003f56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e050      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f967 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e035      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f82b 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fc6:	d103      	bne.n	8003fd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e013      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fd4:	897b      	ldrh	r3, [r7, #10]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	4906      	ldr	r1, [pc, #24]	@ (8004004 <I2C_RequestMemoryRead+0x1cc>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f886 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	00010002 	.word	0x00010002

08004008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004018:	e048      	b.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d044      	beq.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fa31 	bl	8002488 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d139      	bne.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10d      	bne.n	800405e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	43da      	mvns	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	e00c      	b.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x70>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	43da      	mvns	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	429a      	cmp	r2, r3
 800407c:	d116      	bne.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e023      	b.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10d      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	e00c      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d093      	beq.n	800401a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410a:	e071      	b.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411a:	d123      	bne.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e067      	b.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d041      	beq.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fe f98c 	bl	8002488 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d136      	bne.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10c      	bne.n	80041a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e00b      	b.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e021      	b.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10c      	bne.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	43da      	mvns	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4013      	ands	r3, r2
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e00b      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af6d 	bne.w	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004248:	e034      	b.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8e3 	bl	8004416 <I2C_IsAcknowledgeFailed>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e034      	b.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d028      	beq.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fe f911 	bl	8002488 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11d      	bne.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004282:	2b80      	cmp	r3, #128	@ 0x80
 8004284:	d016      	beq.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e007      	b.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b80      	cmp	r3, #128	@ 0x80
 80042c0:	d1c3      	bne.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d8:	e034      	b.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f89b 	bl	8004416 <I2C_IsAcknowledgeFailed>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e034      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d028      	beq.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fe f8c9 	bl	8002488 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11d      	bne.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d016      	beq.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e007      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d1c3      	bne.n	80042da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004368:	e049      	b.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d119      	bne.n	80043ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0210 	mvn.w	r2, #16
 8004380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e030      	b.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ac:	f7fe f86c 	bl	8002488 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d016      	beq.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e007      	b.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d1ae      	bne.n	800436a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442c:	d11b      	bne.n	8004466 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004436:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f043 0204 	orr.w	r2, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0bf      	b.n	8004606 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8ba 	bl	8004614 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80044b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004610 <HAL_LTDC_Init+0x19c>)
 80044e8:	400b      	ands	r3, r1
 80044ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b3e      	ldr	r3, [pc, #248]	@ (8004610 <HAL_LTDC_Init+0x19c>)
 8004516:	400b      	ands	r3, r1
 8004518:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68d9      	ldr	r1, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1a      	ldr	r2, [r3, #32]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6919      	ldr	r1, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b33      	ldr	r3, [pc, #204]	@ (8004610 <HAL_LTDC_Init+0x19c>)
 8004544:	400b      	ands	r3, r1
 8004546:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6919      	ldr	r1, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6959      	ldr	r1, [r3, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <HAL_LTDC_Init+0x19c>)
 8004572:	400b      	ands	r3, r1
 8004574:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6959      	ldr	r1, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0206 	orr.w	r2, r2, #6
 80045e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	f000f800 	.word	0xf000f800

08004614 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004628:	b5b0      	push	{r4, r5, r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_LTDC_ConfigLayer+0x1a>
 800463e:	2302      	movs	r3, #2
 8004640:	e02c      	b.n	800469c <HAL_LTDC_ConfigLayer+0x74>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2134      	movs	r1, #52	@ 0x34
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4614      	mov	r4, r2
 8004666:	461d      	mov	r5, r3
 8004668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800466a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800466c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800466e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f83b 	bl	80046f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2201      	movs	r2, #1
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bdb0      	pop	{r4, r5, r7, pc}

080046a4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_LTDC_EnableDither+0x16>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e016      	b.n	80046e8 <HAL_LTDC_EnableDither+0x44>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_LTDC_EnableDither+0x50>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <HAL_LTDC_EnableDither+0x50>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40016800 	.word	0x40016800

080046f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	@ 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	4413      	add	r3, r2
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	4413      	add	r3, r2
 8004726:	3384      	adds	r3, #132	@ 0x84
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	4611      	mov	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	01d2      	lsls	r2, r2, #7
 8004734:	440a      	add	r2, r1
 8004736:	3284      	adds	r2, #132	@ 0x84
 8004738:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800473c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800474e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004750:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	01db      	lsls	r3, r3, #7
 800475c:	440b      	add	r3, r1
 800475e:	3384      	adds	r3, #132	@ 0x84
 8004760:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004766:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004776:	4413      	add	r3, r2
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	01db      	lsls	r3, r3, #7
 8004786:	4413      	add	r3, r2
 8004788:	3384      	adds	r3, #132	@ 0x84
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	4611      	mov	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	01d2      	lsls	r2, r2, #7
 8004796:	440a      	add	r2, r1
 8004798:	3284      	adds	r2, #132	@ 0x84
 800479a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800479e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ae:	4413      	add	r3, r2
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4619      	mov	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	440b      	add	r3, r1
 80047be:	3384      	adds	r3, #132	@ 0x84
 80047c0:	4619      	mov	r1, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	01db      	lsls	r3, r3, #7
 80047d2:	4413      	add	r3, r2
 80047d4:	3384      	adds	r3, #132	@ 0x84
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	4611      	mov	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	01d2      	lsls	r2, r2, #7
 80047e2:	440a      	add	r2, r1
 80047e4:	3284      	adds	r2, #132	@ 0x84
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	01db      	lsls	r3, r3, #7
 80047f6:	4413      	add	r3, r2
 80047f8:	3384      	adds	r3, #132	@ 0x84
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	4413      	add	r3, r2
 800482a:	3384      	adds	r3, #132	@ 0x84
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	01db      	lsls	r3, r3, #7
 8004838:	4413      	add	r3, r2
 800483a:	3384      	adds	r3, #132	@ 0x84
 800483c:	461a      	mov	r2, r3
 800483e:	2300      	movs	r3, #0
 8004840:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004848:	461a      	mov	r2, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	431a      	orrs	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	01db      	lsls	r3, r3, #7
 800485c:	440b      	add	r3, r1
 800485e:	3384      	adds	r3, #132	@ 0x84
 8004860:	4619      	mov	r1, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	01db      	lsls	r3, r3, #7
 8004872:	4413      	add	r3, r2
 8004874:	3384      	adds	r3, #132	@ 0x84
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	4611      	mov	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	01d2      	lsls	r2, r2, #7
 8004882:	440a      	add	r2, r1
 8004884:	3284      	adds	r2, #132	@ 0x84
 8004886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800488a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	01db      	lsls	r3, r3, #7
 8004896:	4413      	add	r3, r2
 8004898:	3384      	adds	r3, #132	@ 0x84
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	01db      	lsls	r3, r3, #7
 80048ac:	4413      	add	r3, r2
 80048ae:	3384      	adds	r3, #132	@ 0x84
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	4611      	mov	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	01d2      	lsls	r2, r2, #7
 80048bc:	440a      	add	r2, r1
 80048be:	3284      	adds	r2, #132	@ 0x84
 80048c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	6809      	ldr	r1, [r1, #0]
 80048d6:	4608      	mov	r0, r1
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	01c9      	lsls	r1, r1, #7
 80048dc:	4401      	add	r1, r0
 80048de:	3184      	adds	r1, #132	@ 0x84
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	01db      	lsls	r3, r3, #7
 80048ee:	4413      	add	r3, r2
 80048f0:	3384      	adds	r3, #132	@ 0x84
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	01db      	lsls	r3, r3, #7
 80048fe:	4413      	add	r3, r2
 8004900:	3384      	adds	r3, #132	@ 0x84
 8004902:	461a      	mov	r2, r3
 8004904:	2300      	movs	r3, #0
 8004906:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	01db      	lsls	r3, r3, #7
 8004912:	4413      	add	r3, r2
 8004914:	3384      	adds	r3, #132	@ 0x84
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004926:	2304      	movs	r3, #4
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e01b      	b.n	8004964 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d102      	bne.n	800493a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004934:	2303      	movs	r3, #3
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e014      	b.n	8004964 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00b      	beq.n	800495a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004946:	2b02      	cmp	r3, #2
 8004948:	d007      	beq.n	800495a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800494e:	2b03      	cmp	r3, #3
 8004950:	d003      	beq.n	800495a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004956:	2b07      	cmp	r3, #7
 8004958:	d102      	bne.n	8004960 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800495a:	2302      	movs	r3, #2
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e001      	b.n	8004964 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004960:	2301      	movs	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	01db      	lsls	r3, r3, #7
 800496e:	4413      	add	r3, r2
 8004970:	3384      	adds	r3, #132	@ 0x84
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	4611      	mov	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	01d2      	lsls	r2, r2, #7
 800497e:	440a      	add	r2, r1
 8004980:	3284      	adds	r2, #132	@ 0x84
 8004982:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1acb      	subs	r3, r1, r3
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6809      	ldr	r1, [r1, #0]
 80049aa:	4608      	mov	r0, r1
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	01c9      	lsls	r1, r1, #7
 80049b0:	4401      	add	r1, r0
 80049b2:	3184      	adds	r1, #132	@ 0x84
 80049b4:	4313      	orrs	r3, r2
 80049b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	01db      	lsls	r3, r3, #7
 80049c2:	4413      	add	r3, r2
 80049c4:	3384      	adds	r3, #132	@ 0x84
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	4611      	mov	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	01d2      	lsls	r2, r2, #7
 80049d2:	440a      	add	r2, r1
 80049d4:	3284      	adds	r2, #132	@ 0x84
 80049d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049da:	f023 0307 	bic.w	r3, r3, #7
 80049de:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	01db      	lsls	r3, r3, #7
 80049ea:	4413      	add	r3, r2
 80049ec:	3384      	adds	r3, #132	@ 0x84
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	01db      	lsls	r3, r3, #7
 8004a00:	4413      	add	r3, r2
 8004a02:	3384      	adds	r3, #132	@ 0x84
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	01d2      	lsls	r2, r2, #7
 8004a10:	440a      	add	r2, r1
 8004a12:	3284      	adds	r2, #132	@ 0x84
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	6013      	str	r3, [r2, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0

}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4b20      	ldr	r3, [pc, #128]	@ (8004ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a60:	f7fd fd12 	bl	8002488 <HAL_GetTick>
 8004a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a66:	e009      	b.n	8004a7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a68:	f7fd fd0e 	bl	8002488 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a76:	d901      	bls.n	8004a7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e01f      	b.n	8004abc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a88:	d1ee      	bne.n	8004a68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a8a:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a90:	f7fd fcfa 	bl	8002488 <HAL_GetTick>
 8004a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a96:	e009      	b.n	8004aac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a98:	f7fd fcf6 	bl	8002488 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aa6:	d901      	bls.n	8004aac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e007      	b.n	8004abc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aac:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <HAL_PWREx_EnableOverDrive+0x98>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ab8:	d1ee      	bne.n	8004a98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	420e0040 	.word	0x420e0040
 8004acc:	40007000 	.word	0x40007000
 8004ad0:	420e0044 	.word	0x420e0044

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e267      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d075      	beq.n	8004bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004af2:	4b88      	ldr	r3, [pc, #544]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d00c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b85      	ldr	r3, [pc, #532]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d112      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b82      	ldr	r3, [pc, #520]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b7e      	ldr	r3, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d05b      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d157      	bne.n	8004bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e242      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_OscConfig+0x74>
 8004b3a:	4b76      	ldr	r3, [pc, #472]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a75      	ldr	r2, [pc, #468]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x98>
 8004b52:	4b70      	ldr	r3, [pc, #448]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6f      	ldr	r2, [pc, #444]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6c      	ldr	r2, [pc, #432]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b6c:	4b69      	ldr	r3, [pc, #420]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a68      	ldr	r2, [pc, #416]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a65      	ldr	r2, [pc, #404]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fc7c 	bl	8002488 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fd fc78 	bl	8002488 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e207      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0xc0>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fc68 	bl	8002488 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fc64 	bl	8002488 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1f3      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	4b51      	ldr	r3, [pc, #324]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0xe8>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d063      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d11c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b44      	ldr	r3, [pc, #272]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0e:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x152>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e1c7      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	4b3b      	ldr	r3, [pc, #236]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4937      	ldr	r1, [pc, #220]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	e03a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c44:	4b34      	ldr	r3, [pc, #208]	@ (8004d18 <HAL_RCC_OscConfig+0x244>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fd fc1d 	bl	8002488 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fd fc19 	bl	8002488 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e1a8      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c64:	4b2b      	ldr	r3, [pc, #172]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c70:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4925      	ldr	r1, [pc, #148]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]
 8004c84:	e015      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c86:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <HAL_RCC_OscConfig+0x244>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fbfc 	bl	8002488 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fd fbf8 	bl	8002488 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e187      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d036      	beq.n	8004d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <HAL_RCC_OscConfig+0x248>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fd fbdc 	bl	8002488 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7fd fbd8 	bl	8002488 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e167      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x200>
 8004cf2:	e01b      	b.n	8004d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_OscConfig+0x248>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fd fbc5 	bl	8002488 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	e00e      	b.n	8004d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d02:	f7fd fbc1 	bl	8002488 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d907      	bls.n	8004d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e150      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
 8004d14:	40023800 	.word	0x40023800
 8004d18:	42470000 	.word	0x42470000
 8004d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b88      	ldr	r3, [pc, #544]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ea      	bne.n	8004d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8097 	beq.w	8004e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b81      	ldr	r3, [pc, #516]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	4a7c      	ldr	r2, [pc, #496]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6a:	4b77      	ldr	r3, [pc, #476]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d118      	bne.n	8004da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d76:	4b74      	ldr	r3, [pc, #464]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a73      	ldr	r2, [pc, #460]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d82:	f7fd fb81 	bl	8002488 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fd fb7d 	bl	8002488 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e10c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_OscConfig+0x474>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <HAL_RCC_OscConfig+0x2ea>
 8004db0:	4b64      	ldr	r3, [pc, #400]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db4:	4a63      	ldr	r2, [pc, #396]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dbc:	e01c      	b.n	8004df8 <HAL_RCC_OscConfig+0x324>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x30c>
 8004dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	4a5e      	ldr	r2, [pc, #376]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	f043 0304 	orr.w	r3, r3, #4
 8004dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0x324>
 8004de0:	4b58      	ldr	r3, [pc, #352]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a57      	ldr	r2, [pc, #348]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dec:	4b55      	ldr	r3, [pc, #340]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df0:	4a54      	ldr	r2, [pc, #336]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004df2:	f023 0304 	bic.w	r3, r3, #4
 8004df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d015      	beq.n	8004e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd fb42 	bl	8002488 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e08:	f7fd fb3e 	bl	8002488 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0cb      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1e:	4b49      	ldr	r3, [pc, #292]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ee      	beq.n	8004e08 <HAL_RCC_OscConfig+0x334>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2c:	f7fd fb2c 	bl	8002488 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd fb28 	bl	8002488 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0b5      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ee      	bne.n	8004e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5c:	4b39      	ldr	r3, [pc, #228]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	4a38      	ldr	r2, [pc, #224]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a1 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e72:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d05c      	beq.n	8004f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d141      	bne.n	8004f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b31      	ldr	r3, [pc, #196]	@ (8004f4c <HAL_RCC_OscConfig+0x478>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fafc 	bl	8002488 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd faf8 	bl	8002488 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e087      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	491b      	ldr	r1, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_RCC_OscConfig+0x478>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7fd fad1 	bl	8002488 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fd facd 	bl	8002488 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e05c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x416>
 8004f08:	e054      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_OscConfig+0x478>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fd faba 	bl	8002488 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fab6 	bl	8002488 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e045      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x444>
 8004f36:	e03d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e038      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f50:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x4ec>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d028      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d121      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0cc      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b68      	ldr	r3, [pc, #416]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d90c      	bls.n	8005000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b65      	ldr	r3, [pc, #404]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b63      	ldr	r3, [pc, #396]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0b8      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005018:	4b59      	ldr	r3, [pc, #356]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a58      	ldr	r2, [pc, #352]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005030:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a52      	ldr	r2, [pc, #328]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800503a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b50      	ldr	r3, [pc, #320]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	494d      	ldr	r1, [pc, #308]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d044      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d119      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d003      	beq.n	8005082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	2b03      	cmp	r3, #3
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005082:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e06f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005092:	4b3b      	ldr	r3, [pc, #236]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e067      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a2:	4b37      	ldr	r3, [pc, #220]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 0203 	bic.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4934      	ldr	r1, [pc, #208]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fd f9e8 	bl	8002488 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050bc:	f7fd f9e4 	bl	8002488 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e04f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 020c 	and.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1eb      	bne.n	80050bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b25      	ldr	r3, [pc, #148]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d20c      	bcs.n	800510c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b22      	ldr	r3, [pc, #136]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e032      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4916      	ldr	r1, [pc, #88]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	490e      	ldr	r1, [pc, #56]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800514a:	f000 f821 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800514e:	4602      	mov	r2, r0
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	490a      	ldr	r1, [pc, #40]	@ (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	5ccb      	ldrb	r3, [r1, r3]
 800515e:	fa22 f303 	lsr.w	r3, r2, r3
 8005162:	4a09      	ldr	r2, [pc, #36]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd f948 	bl	8002400 <HAL_InitTick>

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023c00 	.word	0x40023c00
 8005180:	40023800 	.word	0x40023800
 8005184:	08008a70 	.word	0x08008a70
 8005188:	20000090 	.word	0x20000090
 800518c:	20000088 	.word	0x20000088

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005194:	b094      	sub	sp, #80	@ 0x50
 8005196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	647b      	str	r3, [r7, #68]	@ 0x44
 800519c:	2300      	movs	r3, #0
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a0:	2300      	movs	r3, #0
 80051a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a8:	4b79      	ldr	r3, [pc, #484]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d00d      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x40>
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	f200 80e1 	bhi.w	800537c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x34>
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_GetSysClockFreq+0x3a>
 80051c2:	e0db      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c4:	4b73      	ldr	r3, [pc, #460]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x204>)
 80051c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80051c8:	e0db      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ca:	4b73      	ldr	r3, [pc, #460]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x208>)
 80051cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051ce:	e0d8      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051da:	4b6d      	ldr	r3, [pc, #436]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d063      	beq.n	80052ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	2200      	movs	r2, #0
 80051ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051fa:	2300      	movs	r3, #0
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005202:	4622      	mov	r2, r4
 8005204:	462b      	mov	r3, r5
 8005206:	f04f 0000 	mov.w	r0, #0
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	0159      	lsls	r1, r3, #5
 8005210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005214:	0150      	lsls	r0, r2, #5
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4621      	mov	r1, r4
 800521c:	1a51      	subs	r1, r2, r1
 800521e:	6139      	str	r1, [r7, #16]
 8005220:	4629      	mov	r1, r5
 8005222:	eb63 0301 	sbc.w	r3, r3, r1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005234:	4659      	mov	r1, fp
 8005236:	018b      	lsls	r3, r1, #6
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800523e:	4651      	mov	r1, sl
 8005240:	018a      	lsls	r2, r1, #6
 8005242:	4651      	mov	r1, sl
 8005244:	ebb2 0801 	subs.w	r8, r2, r1
 8005248:	4659      	mov	r1, fp
 800524a:	eb63 0901 	sbc.w	r9, r3, r1
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800525a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800525e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005262:	4690      	mov	r8, r2
 8005264:	4699      	mov	r9, r3
 8005266:	4623      	mov	r3, r4
 8005268:	eb18 0303 	adds.w	r3, r8, r3
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	462b      	mov	r3, r5
 8005270:	eb49 0303 	adc.w	r3, r9, r3
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005282:	4629      	mov	r1, r5
 8005284:	024b      	lsls	r3, r1, #9
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800528c:	4621      	mov	r1, r4
 800528e:	024a      	lsls	r2, r1, #9
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005296:	2200      	movs	r2, #0
 8005298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800529c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052a0:	f7fa ffa4 	bl	80001ec <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	e058      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ae:	4b38      	ldr	r3, [pc, #224]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	2200      	movs	r2, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	4611      	mov	r1, r2
 80052ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	2300      	movs	r3, #0
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c8:	4642      	mov	r2, r8
 80052ca:	464b      	mov	r3, r9
 80052cc:	f04f 0000 	mov.w	r0, #0
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	0159      	lsls	r1, r3, #5
 80052d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052da:	0150      	lsls	r0, r2, #5
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4641      	mov	r1, r8
 80052e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052e6:	4649      	mov	r1, r9
 80052e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005300:	ebb2 040a 	subs.w	r4, r2, sl
 8005304:	eb63 050b 	sbc.w	r5, r3, fp
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	00eb      	lsls	r3, r5, #3
 8005312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005316:	00e2      	lsls	r2, r4, #3
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	4643      	mov	r3, r8
 800531e:	18e3      	adds	r3, r4, r3
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	464b      	mov	r3, r9
 8005324:	eb45 0303 	adc.w	r3, r5, r3
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005336:	4629      	mov	r1, r5
 8005338:	028b      	lsls	r3, r1, #10
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005340:	4621      	mov	r1, r4
 8005342:	028a      	lsls	r2, r1, #10
 8005344:	4610      	mov	r0, r2
 8005346:	4619      	mov	r1, r3
 8005348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800534a:	2200      	movs	r2, #0
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	61fa      	str	r2, [r7, #28]
 8005350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005354:	f7fa ff4a 	bl	80001ec <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4613      	mov	r3, r2
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	3301      	adds	r3, #1
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800537a:	e002      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x204>)
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005384:	4618      	mov	r0, r3
 8005386:	3750      	adds	r7, #80	@ 0x50
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800
 8005394:	00f42400 	.word	0x00f42400
 8005398:	007a1200 	.word	0x007a1200

0800539c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a0:	4b03      	ldr	r3, [pc, #12]	@ (80053b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053a2:	681b      	ldr	r3, [r3, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000090 	.word	0x20000090

080053b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053b8:	f7ff fff0 	bl	800539c <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0a9b      	lsrs	r3, r3, #10
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4903      	ldr	r1, [pc, #12]	@ (80053d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	08008a80 	.word	0x08008a80

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800540c:	2b00      	cmp	r3, #0
 800540e:	d075      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005410:	4b91      	ldr	r3, [pc, #580]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005416:	f7fd f837 	bl	8002488 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800541e:	f7fd f833 	bl	8002488 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e189      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005430:	4b8a      	ldr	r3, [pc, #552]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	019a      	lsls	r2, r3, #6
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	071b      	lsls	r3, r3, #28
 8005454:	4981      	ldr	r1, [pc, #516]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01f      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005468:	4b7c      	ldr	r3, [pc, #496]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800546e:	0f1b      	lsrs	r3, r3, #28
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	019a      	lsls	r2, r3, #6
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	061b      	lsls	r3, r3, #24
 8005482:	431a      	orrs	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	071b      	lsls	r3, r3, #28
 8005488:	4974      	ldr	r1, [pc, #464]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005490:	4b72      	ldr	r3, [pc, #456]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005496:	f023 021f 	bic.w	r2, r3, #31
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	3b01      	subs	r3, #1
 80054a0:	496e      	ldr	r1, [pc, #440]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	019a      	lsls	r2, r3, #6
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	071b      	lsls	r3, r3, #28
 80054c8:	4964      	ldr	r1, [pc, #400]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054d0:	4b61      	ldr	r3, [pc, #388]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054d6:	f7fc ffd7 	bl	8002488 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054de:	f7fc ffd3 	bl	8002488 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e129      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f0:	4b5a      	ldr	r3, [pc, #360]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005510:	2b00      	cmp	r3, #0
 8005512:	d079      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005514:	4b52      	ldr	r3, [pc, #328]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800551a:	f7fc ffb5 	bl	8002488 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005522:	f7fc ffb1 	bl	8002488 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e107      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005534:	4b49      	ldr	r3, [pc, #292]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800553c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005540:	d0ef      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d020      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800554e:	4b43      	ldr	r3, [pc, #268]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005554:	0f1b      	lsrs	r3, r3, #28
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	019a      	lsls	r2, r3, #6
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	431a      	orrs	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	493b      	ldr	r1, [pc, #236]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005576:	4b39      	ldr	r3, [pc, #228]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800557c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	3b01      	subs	r3, #1
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	4934      	ldr	r1, [pc, #208]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01e      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800559c:	4b2f      	ldr	r3, [pc, #188]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a2:	0e1b      	lsrs	r3, r3, #24
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	019a      	lsls	r2, r3, #6
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	071b      	lsls	r3, r3, #28
 80055bc:	4927      	ldr	r1, [pc, #156]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055c4:	4b25      	ldr	r3, [pc, #148]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	4922      	ldr	r1, [pc, #136]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055da:	4b21      	ldr	r3, [pc, #132]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fc ff52 	bl	8002488 <HAL_GetTick>
 80055e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055e8:	f7fc ff4e 	bl	8002488 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0a4      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fa:	4b18      	ldr	r3, [pc, #96]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005606:	d1ef      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 808b 	beq.w	800572c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	4b10      	ldr	r3, [pc, #64]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	4a0f      	ldr	r2, [pc, #60]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005624:	6413      	str	r3, [r2, #64]	@ 0x40
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005632:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a0b      	ldr	r2, [pc, #44]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800563c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800563e:	f7fc ff23 	bl	8002488 <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005644:	e010      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005646:	f7fc ff1f 	bl	8002488 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d909      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e075      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005658:	42470068 	.word	0x42470068
 800565c:	40023800 	.word	0x40023800
 8005660:	42470070 	.word	0x42470070
 8005664:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005668:	4b38      	ldr	r3, [pc, #224]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0e8      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005674:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02f      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d028      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005692:	4b2f      	ldr	r3, [pc, #188]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800569c:	4b2d      	ldr	r3, [pc, #180]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056a8:	4a29      	ldr	r2, [pc, #164]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ae:	4b28      	ldr	r3, [pc, #160]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d114      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fc fee5 	bl	8002488 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c2:	f7fc fee1 	bl	8002488 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e035      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ee      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f0:	d10d      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80056f2:	4b17      	ldr	r3, [pc, #92]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005706:	4912      	ldr	r1, [pc, #72]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005708:	4313      	orrs	r3, r2
 800570a:	608b      	str	r3, [r1, #8]
 800570c:	e005      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800570e:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a0f      	ldr	r2, [pc, #60]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005714:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005718:	6093      	str	r3, [r2, #8]
 800571a:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800571c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005726:	490a      	ldr	r1, [pc, #40]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005728:	4313      	orrs	r3, r2
 800572a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800573e:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005740:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40007000 	.word	0x40007000
 8005750:	40023800 	.word	0x40023800
 8005754:	42470e40 	.word	0x42470e40
 8005758:	424711e0 	.word	0x424711e0

0800575c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e025      	b.n	80057bc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f81d 	bl	80057c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 ffd3 	bl	8006748 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	f001 f828 	bl	8006802 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80057ea:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d101      	bne.n	80057f6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
 80057f4:	e021      	b.n	800583a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d002      	beq.n	8005802 <HAL_SDRAM_SendCommand+0x2a>
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d118      	bne.n	8005834 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f001 f85e 	bl	80068d4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d104      	bne.n	800582a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2205      	movs	r2, #5
 8005824:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005828:	e006      	b.n	8005838 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005832:	e001      	b.n	8005838 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d101      	bne.n	800585c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
 800585a:	e016      	b.n	800588a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10f      	bne.n	8005888 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f001 f869 	bl	800694e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e000      	b.n	800588a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e083      	b.n	80059ac <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b4:	d009      	beq.n	80058ca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	61da      	str	r2, [r3, #28]
 80058bc:	e005      	b.n	80058ca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f890 	bl	8005a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0104 	and.w	r1, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	f003 0210 	and.w	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597e:	d105      	bne.n	800598c <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	b292      	uxth	r2, r2
 800598a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800599a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e01a      	b.n	80059fc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f81a 	bl	8005a18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_SPI_Transmit+0x22>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e14f      	b.n	8005cee <HAL_SPI_Transmit+0x2c2>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a56:	f7fc fd17 	bl	8002488 <HAL_GetTick>
 8005a5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a70:	e138      	b.n	8005ce4 <HAL_SPI_Transmit+0x2b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_Transmit+0x52>
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a82:	e12f      	b.n	8005ce4 <HAL_SPI_Transmit+0x2b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2203      	movs	r2, #3
 8005a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aca:	d10f      	bne.n	8005aec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ada:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aea:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af4:	d10f      	bne.n	8005b16 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b14:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b40      	cmp	r3, #64	@ 0x40
 8005b22:	d007      	beq.n	8005b34 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	d14f      	bne.n	8005bde <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_SPI_Transmit+0x120>
 8005b46:	8afb      	ldrh	r3, [r7, #22]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d142      	bne.n	8005bd2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b70:	e02f      	b.n	8005bd2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d112      	bne.n	8005ba6 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	881a      	ldrh	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ba4:	e015      	b.n	8005bd2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba6:	f7fc fc6f 	bl	8002488 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d803      	bhi.n	8005bbe <HAL_SPI_Transmit+0x192>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_Transmit+0x198>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005bd0:	e088      	b.n	8005ce4 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ca      	bne.n	8005b72 <HAL_SPI_Transmit+0x146>
 8005bdc:	e050      	b.n	8005c80 <HAL_SPI_Transmit+0x254>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_Transmit+0x1c0>
 8005be6:	8afb      	ldrh	r3, [r7, #22]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d144      	bne.n	8005c76 <HAL_SPI_Transmit+0x24a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c12:	e030      	b.n	8005c76 <HAL_SPI_Transmit+0x24a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d113      	bne.n	8005c4a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c48:	e015      	b.n	8005c76 <HAL_SPI_Transmit+0x24a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c4a:	f7fc fc1d 	bl	8002488 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d803      	bhi.n	8005c62 <HAL_SPI_Transmit+0x236>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d102      	bne.n	8005c68 <HAL_SPI_Transmit+0x23c>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_SPI_Transmit+0x24a>
        {
          errorcode = HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005c74:	e036      	b.n	8005ce4 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1c9      	bne.n	8005c14 <HAL_SPI_Transmit+0x1e8>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c88:	d107      	bne.n	8005c9a <HAL_SPI_Transmit+0x26e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c98:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fcfe 	bl	80066a0 <SPI_EndRxTxTransaction>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e003      	b.n	8005ce4 <HAL_SPI_Transmit+0x2b8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b08a      	sub	sp, #40	@ 0x28
 8005cfa:	af02      	add	r7, sp, #8
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d002      	beq.n	8005d20 <HAL_SPI_Receive+0x2a>
  {
    errorcode = HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d1e:	e173      	b.n	8006008 <HAL_SPI_Receive+0x312>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d28:	d112      	bne.n	8005d50 <HAL_SPI_Receive+0x5a>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10e      	bne.n	8005d50 <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2204      	movs	r2, #4
 8005d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f967 	bl	800601a <HAL_SPI_TransmitReceive>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	e160      	b.n	8006012 <HAL_SPI_Receive+0x31c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_SPI_Receive+0x68>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e159      	b.n	8006012 <HAL_SPI_Receive+0x31c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d66:	f7fc fb8f 	bl	8002488 <HAL_GetTick>
 8005d6a:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_SPI_Receive+0x82>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d7c:	e144      	b.n	8006008 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2204      	movs	r2, #4
 8005d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc4:	d116      	bne.n	8005df4 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005de4:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfc:	d10f      	bne.n	8005e1e <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d007      	beq.n	8005e3c <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d16a      	bne.n	8005f1a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e44:	e032      	b.n	8005eac <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d115      	bne.n	8005e80 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f103 020c 	add.w	r2, r3, #12
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	7812      	ldrb	r2, [r2, #0]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e7e:	e015      	b.n	8005eac <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e80:	f7fc fb02 	bl	8002488 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d803      	bhi.n	8005e98 <HAL_SPI_Receive+0x1a2>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d102      	bne.n	8005e9e <HAL_SPI_Receive+0x1a8>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005eaa:	e0ad      	b.n	8006008 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1c7      	bne.n	8005e46 <HAL_SPI_Receive+0x150>
 8005eb6:	e035      	b.n	8005f24 <HAL_SPI_Receive+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d113      	bne.n	8005eee <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed0:	b292      	uxth	r2, r2
 8005ed2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eec:	e015      	b.n	8005f1a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eee:	f7fc facb 	bl	8002488 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d803      	bhi.n	8005f06 <HAL_SPI_Receive+0x210>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_Receive+0x216>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005f18:	e076      	b.n	8006008 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1c9      	bne.n	8005eb8 <HAL_SPI_Receive+0x1c2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2c:	d144      	bne.n	8005fb8 <HAL_SPI_Receive+0x2c2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f3c:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2201      	movs	r2, #1
 8005f46:	2101      	movs	r1, #1
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fabb 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_SPI_Receive+0x264>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	77fb      	strb	r3, [r7, #31]
      goto error;
 8005f58:	e056      	b.n	8006008 <HAL_SPI_Receive+0x312>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f62:	d107      	bne.n	8005f74 <HAL_SPI_Receive+0x27e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	b292      	uxth	r2, r2
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	e008      	b.n	8005f86 <HAL_SPI_Receive+0x290>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f103 020c 	add.w	r2, r3, #12
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	2101      	movs	r1, #1
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa97 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_SPI_Receive+0x2b8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	f043 0202 	orr.w	r2, r3, #2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	77fb      	strb	r3, [r7, #31]
      goto error;
 8005fac:	e02c      	b.n	8006008 <HAL_SPI_Receive+0x312>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8005fb6:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fb09 	bl	80065d4 <SPI_EndRxTransaction>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Receive+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d10a      	bne.n	8005ff2 <HAL_SPI_Receive+0x2fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe0:	f043 0202 	orr.w	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005ff0:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_SPI_Receive+0x30a>
  {
    errorcode = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e003      	b.n	8006008 <HAL_SPI_Receive+0x312>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006010:	7ffb      	ldrb	r3, [r7, #31]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08e      	sub	sp, #56	@ 0x38
 800601e:	af02      	add	r7, sp, #8
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800602c:	2301      	movs	r3, #1
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x2a>
 8006040:	2302      	movs	r3, #2
 8006042:	e22c      	b.n	800649e <HAL_SPI_TransmitReceive+0x484>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604c:	f7fc fa1c 	bl	8002488 <HAL_GetTick>
 8006050:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006062:	887b      	ldrh	r3, [r7, #2]
 8006064:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800606a:	2b01      	cmp	r3, #1
 800606c:	d00f      	beq.n	800608e <HAL_SPI_TransmitReceive+0x74>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006074:	d107      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x6c>
 800607e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006082:	2b04      	cmp	r3, #4
 8006084:	d003      	beq.n	800608e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8006086:	2302      	movs	r3, #2
 8006088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800608c:	e201      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0x86>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0x86>
 800609a:	887b      	ldrh	r3, [r7, #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80060a6:	e1f4      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d003      	beq.n	80060bc <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2205      	movs	r2, #5
 80060b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	887a      	ldrh	r2, [r7, #2]
 80060d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	887a      	ldrh	r2, [r7, #2]
 80060de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fa:	d10f      	bne.n	800611c <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800611a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006126:	2b40      	cmp	r3, #64	@ 0x40
 8006128:	d007      	beq.n	800613a <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006142:	f040 80a2 	bne.w	800628a <HAL_SPI_TransmitReceive+0x270>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x13c>
 800614e:	8b7b      	ldrh	r3, [r7, #26]
 8006150:	2b01      	cmp	r3, #1
 8006152:	f040 808f 	bne.w	8006274 <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d177      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x25a>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618c:	d172      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x25a>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800619c:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800619e:	e069      	b.n	8006274 <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d12d      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1f0>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d028      	beq.n	800620a <HAL_SPI_TransmitReceive+0x1f0>
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d125      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1f0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10c      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1f0>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f8:	d107      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1f0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006208:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d119      	bne.n	800624c <HAL_SPI_TransmitReceive+0x232>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d014      	beq.n	800624c <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	b292      	uxth	r2, r2
 800622e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	1c9a      	adds	r2, r3, #2
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006248:	2301      	movs	r3, #1
 800624a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800624c:	f7fc f91c 	bl	8002488 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006258:	429a      	cmp	r2, r3
 800625a:	d80b      	bhi.n	8006274 <HAL_SPI_TransmitReceive+0x25a>
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d007      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006272:	e10e      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d190      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x186>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d18b      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x186>
 8006288:	e0a5      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_SPI_TransmitReceive+0x280>
 8006292:	8b7b      	ldrh	r3, [r7, #26]
 8006294:	2b01      	cmp	r3, #1
 8006296:	f040 8094 	bne.w	80063c2 <HAL_SPI_TransmitReceive+0x3a8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d17b      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x3a8>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d2:	d176      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x3a8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062e2:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e4:	e06d      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x3a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d12e      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x338>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d029      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x338>
 80062fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d126      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x338>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10c      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x338>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006340:	d107      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x338>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006350:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d119      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x37a>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d014      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x37a>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006390:	2301      	movs	r3, #1
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006394:	f7fc f878 	bl	8002488 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d803      	bhi.n	80063ac <HAL_SPI_TransmitReceive+0x392>
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_TransmitReceive+0x398>
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x3a8>
      {
        errorcode = HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80063c0:	e067      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d18c      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x2cc>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d187      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x2cc>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063de:	d119      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x3fa>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	2201      	movs	r2, #1
 80063e8:	2101      	movs	r1, #1
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f86a 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_SPI_TransmitReceive+0x3f0>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fa:	f043 0202 	orr.w	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8006408:	e043      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8006412:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b10      	cmp	r3, #16
 8006420:	d10d      	bne.n	800643e <HAL_SPI_TransmitReceive+0x424>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006436:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800643e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006440:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f92c 	bl	80066a0 <SPI_EndRxTxTransaction>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d006      	beq.n	800645c <HAL_SPI_TransmitReceive+0x442>
  {
    errorcode = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800645a:	e01a      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <HAL_SPI_TransmitReceive+0x460>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_SPI_TransmitReceive+0x470>
  {
    errorcode = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006488:	e003      	b.n	8006492 <HAL_SPI_TransmitReceive+0x478>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800649a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3730      	adds	r7, #48	@ 0x30
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064b4:	b2db      	uxtb	r3, r3
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064d4:	f7fb ffd8 	bl	8002488 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4413      	add	r3, r2
 80064e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064e4:	f7fb ffd0 	bl	8002488 <HAL_GetTick>
 80064e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ea:	4b39      	ldr	r3, [pc, #228]	@ (80065d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	0d1b      	lsrs	r3, r3, #20
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064fa:	e054      	b.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d050      	beq.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006504:	f7fb ffc0 	bl	8002488 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	429a      	cmp	r2, r3
 8006512:	d902      	bls.n	800651a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d13d      	bne.n	8006596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006532:	d111      	bne.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800653c:	d004      	beq.n	8006548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006546:	d107      	bne.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006560:	d10f      	bne.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e017      	b.n	80065c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d19b      	bne.n	80064fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000090 	.word	0x20000090

080065d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065e8:	d111      	bne.n	800660e <SPI_EndRxTransaction+0x3a>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f2:	d004      	beq.n	80065fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fc:	d107      	bne.n	800660e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800660c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006616:	d12a      	bne.n	800666e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006620:	d012      	beq.n	8006648 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	@ 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff ff49 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d02d      	beq.n	8006694 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663c:	f043 0220 	orr.w	r2, r3, #32
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e026      	b.n	8006696 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	2101      	movs	r1, #1
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f7ff ff36 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01a      	beq.n	8006694 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e013      	b.n	8006696 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	2101      	movs	r1, #1
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff ff23 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e000      	b.n	8006696 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2201      	movs	r2, #1
 80066b4:	2102      	movs	r1, #2
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff ff04 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e032      	b.n	8006738 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <SPI_EndRxTxTransaction+0xa0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <SPI_EndRxTxTransaction+0xa4>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	0d5b      	lsrs	r3, r3, #21
 80066de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f0:	d112      	bne.n	8006718 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	@ 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff fee1 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d016      	beq.n	8006736 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e00f      	b.n	8006738 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	3b01      	subs	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672e:	2b80      	cmp	r3, #128	@ 0x80
 8006730:	d0f2      	beq.n	8006718 <SPI_EndRxTxTransaction+0x78>
 8006732:	e000      	b.n	8006736 <SPI_EndRxTxTransaction+0x96>
        break;
 8006734:	bf00      	nop
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000090 	.word	0x20000090
 8006744:	165e9f81 	.word	0x165e9f81

08006748 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d123      	bne.n	80067a2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006762:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	6851      	ldr	r1, [r2, #4]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	6892      	ldr	r2, [r2, #8]
 800676e:	4311      	orrs	r1, r2
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	68d2      	ldr	r2, [r2, #12]
 8006774:	4311      	orrs	r1, r2
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	6912      	ldr	r2, [r2, #16]
 800677a:	4311      	orrs	r1, r2
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	6952      	ldr	r2, [r2, #20]
 8006780:	4311      	orrs	r1, r2
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	6992      	ldr	r2, [r2, #24]
 8006786:	4311      	orrs	r1, r2
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	69d2      	ldr	r2, [r2, #28]
 800678c:	4311      	orrs	r1, r2
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	6a12      	ldr	r2, [r2, #32]
 8006792:	4311      	orrs	r1, r2
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006798:	430a      	orrs	r2, r1
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e028      	b.n	80067f4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	69d9      	ldr	r1, [r3, #28]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	4319      	orrs	r1, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	430b      	orrs	r3, r1
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80067c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	6851      	ldr	r1, [r2, #4]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	6892      	ldr	r2, [r2, #8]
 80067d4:	4311      	orrs	r1, r2
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	68d2      	ldr	r2, [r2, #12]
 80067da:	4311      	orrs	r1, r2
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	6912      	ldr	r2, [r2, #16]
 80067e0:	4311      	orrs	r1, r2
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	6952      	ldr	r2, [r2, #20]
 80067e6:	4311      	orrs	r1, r2
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	6992      	ldr	r2, [r2, #24]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d128      	bne.n	8006866 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	1e59      	subs	r1, r3, #1
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	3b01      	subs	r3, #1
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4319      	orrs	r1, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	3b01      	subs	r3, #1
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	4319      	orrs	r1, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	4319      	orrs	r1, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	3b01      	subs	r3, #1
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	4319      	orrs	r1, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	3b01      	subs	r3, #1
 8006850:	051b      	lsls	r3, r3, #20
 8006852:	4319      	orrs	r1, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	3b01      	subs	r3, #1
 800685a:	061b      	lsls	r3, r3, #24
 800685c:	430b      	orrs	r3, r1
 800685e:	431a      	orrs	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	e02f      	b.n	80068c6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800686e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	68d2      	ldr	r2, [r2, #12]
 8006876:	3a01      	subs	r2, #1
 8006878:	0311      	lsls	r1, r2, #12
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	6952      	ldr	r2, [r2, #20]
 800687e:	3a01      	subs	r2, #1
 8006880:	0512      	lsls	r2, r2, #20
 8006882:	430a      	orrs	r2, r1
 8006884:	431a      	orrs	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1e59      	subs	r1, r3, #1
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	3b01      	subs	r3, #1
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	4319      	orrs	r1, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	4319      	orrs	r1, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	4319      	orrs	r1, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	430b      	orrs	r3, r1
 80068c0:	431a      	orrs	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	0d9b      	lsrs	r3, r3, #22
 80068ea:	059b      	lsls	r3, r3, #22
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	6811      	ldr	r1, [r2, #0]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	6852      	ldr	r2, [r2, #4]
 80068f4:	4311      	orrs	r1, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	6892      	ldr	r2, [r2, #8]
 80068fa:	3a01      	subs	r2, #1
 80068fc:	0152      	lsls	r2, r2, #5
 80068fe:	4311      	orrs	r1, r2
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	68d2      	ldr	r2, [r2, #12]
 8006904:	0252      	lsls	r2, r2, #9
 8006906:	430a      	orrs	r2, r1
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800690e:	f7fb fdbb 	bl	8002488 <HAL_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006914:	e010      	b.n	8006938 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d00c      	beq.n	8006938 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <FMC_SDRAM_SendCommand+0x60>
 8006924:	f7fb fdb0 	bl	8002488 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d201      	bcs.n	8006938 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e006      	b.n	8006946 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b20      	cmp	r3, #32
 8006942:	d0e8      	beq.n	8006916 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006960:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	0052      	lsls	r2, r2, #1
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800697c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80069b8 <LoopFillZerobss+0x16>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006980:	480e      	ldr	r0, [pc, #56]	@ (80069bc <LoopFillZerobss+0x1a>)
  ldr r1, =_edata
 8006982:	490f      	ldr	r1, [pc, #60]	@ (80069c0 <LoopFillZerobss+0x1e>)
  ldr r2, =_sidata
 8006984:	4a0f      	ldr	r2, [pc, #60]	@ (80069c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006988:	e002      	b.n	8006990 <LoopCopyDataInit>

0800698a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800698a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800698c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800698e:	3304      	adds	r3, #4

08006990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006994:	d3f9      	bcc.n	800698a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006996:	4a0c      	ldr	r2, [pc, #48]	@ (80069c8 <LoopFillZerobss+0x26>)
  ldr r4, =_ebss
 8006998:	4c0c      	ldr	r4, [pc, #48]	@ (80069cc <LoopFillZerobss+0x2a>)
  movs r3, #0
 800699a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800699c:	e001      	b.n	80069a2 <LoopFillZerobss>

0800699e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800699e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069a0:	3204      	adds	r2, #4

080069a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069a4:	d3fb      	bcc.n	800699e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80069a6:	f000 f84d 	bl	8006a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069aa:	f000 f94b 	bl	8006c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl initBoard
 80069ae:	f000 f87f 	bl	8006ab0 <initBoard>
  bl  main
 80069b2:	f000 f90d 	bl	8006bd0 <main>
  bx  lr    
 80069b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80069b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80069bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069c0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80069c4:	08008a98 	.word	0x08008a98
  ldr r2, =_sbss
 80069c8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80069cc:	20000370 	.word	0x20000370

080069d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80069d0:	e7fe      	b.n	80069d0 <ADC_IRQHandler>

080069d2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <HardFault_Handler+0x4>

080069e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <MemManage_Handler+0x4>

080069f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <BusFault_Handler+0x4>

080069f8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <UsageFault_Handler+0x4>

08006a00 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8006a2e:	f7fb fd17 	bl	8002460 <HAL_IncTick>
  //Toggle_Leds();
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7fc fc80 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
}
 8006a40:	bf00      	nop
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a48:	4b16      	ldr	r3, [pc, #88]	@ (8006aa4 <SystemInit+0x60>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <SystemInit+0x60>)
 8006a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006a58:	4b13      	ldr	r3, [pc, #76]	@ (8006aa8 <SystemInit+0x64>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a12      	ldr	r2, [pc, #72]	@ (8006aa8 <SystemInit+0x64>)
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006a64:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <SystemInit+0x64>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa8 <SystemInit+0x64>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8006aa8 <SystemInit+0x64>)
 8006a70:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8006a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <SystemInit+0x64>)
 8006a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006aac <SystemInit+0x68>)
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006a80:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <SystemInit+0x64>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a08      	ldr	r2, [pc, #32]	@ (8006aa8 <SystemInit+0x64>)
 8006a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <SystemInit+0x64>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a92:	4b04      	ldr	r3, [pc, #16]	@ (8006aa4 <SystemInit+0x60>)
 8006a94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006a98:	609a      	str	r2, [r3, #8]
#endif
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	e000ed00 	.word	0xe000ed00
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	24003010 	.word	0x24003010

08006ab0 <initBoard>:

static void SystemClock_Config(void);
static void initGraphics(void);

void initBoard(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8006ab4:	f7fb fc82 	bl	80023bc <HAL_Init>

  /* Configure LED3 and LED4 */
  BSP_LED_Init(LED3);
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f7fa f953 	bl	8000d64 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8006abe:	2001      	movs	r0, #1
 8006ac0:	f7fa f950 	bl	8000d64 <BSP_LED_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8006ac4:	f000 f830 	bl	8006b28 <SystemClock_Config>

  /* Configure USER Button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8006ac8:	2101      	movs	r1, #1
 8006aca:	2000      	movs	r0, #0
 8006acc:	f7fa f99e 	bl	8000e0c <BSP_PB_Init>

  initGraphics();
 8006ad0:	f000 f802 	bl	8006ad8 <initGraphics>
}
 8006ad4:	bf00      	nop
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <initGraphics>:

void initGraphics(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
	short x, y;

	BSP_LCD_Init();
 8006ade:	f7fa fd5d 	bl	800159c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8006ae2:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	f7fa fdda 	bl	80016a0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8006aec:	2001      	movs	r0, #1
 8006aee:	f7fa fe3b 	bl	8001768 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8006af2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8006af6:	f7fa fe93 	bl	8001820 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font8);
 8006afa:	480a      	ldr	r0, [pc, #40]	@ (8006b24 <initGraphics+0x4c>)
 8006afc:	f7fa fe76 	bl	80017ec <BSP_LCD_SetFont>

	x = BSP_LCD_GetXSize();
 8006b00:	f7fa fdb6 	bl	8001670 <BSP_LCD_GetXSize>
 8006b04:	4603      	mov	r3, r0
 8006b06:	80fb      	strh	r3, [r7, #6]
	y = BSP_LCD_GetYSize();
 8006b08:	f7fa fdbe 	bl	8001688 <BSP_LCD_GetYSize>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	80bb      	strh	r3, [r7, #4]

	BSP_TS_Init(x, y);
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	88ba      	ldrh	r2, [r7, #4]
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fb fb64 	bl	80021e4 <BSP_TS_Init>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	2000007c 	.word	0x2000007c

08006b28 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b094      	sub	sp, #80	@ 0x50
 8006b2c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	4b25      	ldr	r3, [pc, #148]	@ (8006bc8 <SystemClock_Config+0xa0>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	4a24      	ldr	r2, [pc, #144]	@ (8006bc8 <SystemClock_Config+0xa0>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b3e:	4b22      	ldr	r3, [pc, #136]	@ (8006bc8 <SystemClock_Config+0xa0>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006bcc <SystemClock_Config+0xa4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1e      	ldr	r2, [pc, #120]	@ (8006bcc <SystemClock_Config+0xa4>)
 8006b54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bcc <SystemClock_Config+0xa4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b66:	2301      	movs	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006b6e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b70:	2302      	movs	r3, #2
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8006b7e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8006b82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b84:	2302      	movs	r3, #2
 8006b86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006b88:	2307      	movs	r3, #7
 8006b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd ff9f 	bl	8004ad4 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8006b96:	f7fd ff4d 	bl	8004a34 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006b9a:	230f      	movs	r3, #15
 8006b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ba6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006baa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8006bb2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006bb6:	2105      	movs	r1, #5
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fa03 	bl	8004fc4 <HAL_RCC_ClockConfig>
}
 8006bbe:	bf00      	nop
 8006bc0:	3750      	adds	r7, #80	@ 0x50
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40007000 	.word	0x40007000

08006bd0 <main>:
#include <stm32f429i_discovery.h>
#include <stm32f429i_discovery_lcd.h>
#include <stm32f429i_discovery_ts.h>
#include <cstdio>
int main(void)
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED4);
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	f7fa f8c4 	bl	8000d64 <BSP_LED_Init>
	BSP_LCD_Init();
 8006bdc:	f7fa fcde 	bl	800159c <BSP_LCD_Init>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8006be0:	f7fa fd46 	bl	8001670 <BSP_LCD_GetXSize>
 8006be4:	4603      	mov	r3, r0
 8006be6:	b29c      	uxth	r4, r3
 8006be8:	f7fa fd4e 	bl	8001688 <BSP_LCD_GetYSize>
 8006bec:	4603      	mov	r3, r0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7fb faf6 	bl	80021e4 <BSP_TS_Init>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8006bf8:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8006bfc:	f7fa fdc4 	bl	8001788 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8006c00:	480d      	ldr	r0, [pc, #52]	@ (8006c38 <main+0x68>)
 8006c02:	f7fa fdd9 	bl	80017b8 <BSP_LCD_SetBackColor>

	TS_StateTypeDef TsState;

	while (true) {
		BSP_TS_GetState(&TsState);
 8006c06:	463b      	mov	r3, r7
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fb fb25 	bl	8002258 <BSP_TS_GetState>
		if(TsState.TouchDetected) {
 8006c0e:	883b      	ldrh	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <main+0x52>
			BSP_LCD_DisplayStringAt(10, 20, (uint8_t*)"Pressed", LEFT_MODE);
 8006c14:	2303      	movs	r3, #3
 8006c16:	4a09      	ldr	r2, [pc, #36]	@ (8006c3c <main+0x6c>)
 8006c18:	2114      	movs	r1, #20
 8006c1a:	200a      	movs	r0, #10
 8006c1c:	f7fa fe6c 	bl	80018f8 <BSP_LCD_DisplayStringAt>
 8006c20:	e005      	b.n	8006c2e <main+0x5e>
		} else {
			BSP_LCD_DisplayStringAt(10, 20, (uint8_t*)"*******", LEFT_MODE);
 8006c22:	2303      	movs	r3, #3
 8006c24:	4a06      	ldr	r2, [pc, #24]	@ (8006c40 <main+0x70>)
 8006c26:	2114      	movs	r1, #20
 8006c28:	200a      	movs	r0, #10
 8006c2a:	f7fa fe65 	bl	80018f8 <BSP_LCD_DisplayStringAt>
		}
		HAL_Delay(50);
 8006c2e:	2032      	movs	r0, #50	@ 0x32
 8006c30:	f7fb fc36 	bl	80024a0 <HAL_Delay>
		BSP_TS_GetState(&TsState);
 8006c34:	e7e7      	b.n	8006c06 <main+0x36>
 8006c36:	bf00      	nop
 8006c38:	ff0000ff 	.word	0xff0000ff
 8006c3c:	08006ca4 	.word	0x08006ca4
 8006c40:	08006cac 	.word	0x08006cac

08006c44 <__libc_init_array>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4d0d      	ldr	r5, [pc, #52]	@ (8006c7c <__libc_init_array+0x38>)
 8006c48:	4c0d      	ldr	r4, [pc, #52]	@ (8006c80 <__libc_init_array+0x3c>)
 8006c4a:	1b64      	subs	r4, r4, r5
 8006c4c:	10a4      	asrs	r4, r4, #2
 8006c4e:	2600      	movs	r6, #0
 8006c50:	42a6      	cmp	r6, r4
 8006c52:	d109      	bne.n	8006c68 <__libc_init_array+0x24>
 8006c54:	4d0b      	ldr	r5, [pc, #44]	@ (8006c84 <__libc_init_array+0x40>)
 8006c56:	4c0c      	ldr	r4, [pc, #48]	@ (8006c88 <__libc_init_array+0x44>)
 8006c58:	f000 f818 	bl	8006c8c <_init>
 8006c5c:	1b64      	subs	r4, r4, r5
 8006c5e:	10a4      	asrs	r4, r4, #2
 8006c60:	2600      	movs	r6, #0
 8006c62:	42a6      	cmp	r6, r4
 8006c64:	d105      	bne.n	8006c72 <__libc_init_array+0x2e>
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6c:	4798      	blx	r3
 8006c6e:	3601      	adds	r6, #1
 8006c70:	e7ee      	b.n	8006c50 <__libc_init_array+0xc>
 8006c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c76:	4798      	blx	r3
 8006c78:	3601      	adds	r6, #1
 8006c7a:	e7f2      	b.n	8006c62 <__libc_init_array+0x1e>
 8006c7c:	08008a90 	.word	0x08008a90
 8006c80:	08008a90 	.word	0x08008a90
 8006c84:	08008a90 	.word	0x08008a90
 8006c88:	08008a94 	.word	0x08008a94

08006c8c <_init>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr

08006c98 <_fini>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	bf00      	nop
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr

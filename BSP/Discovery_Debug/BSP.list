
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e0c  08007c44  08007c44  00008c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a50  08009a50  0000b0e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a50  08009a50  0000aa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a58  08009a58  0000b0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a5c  08009a5c  0000aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08009a60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0e4  2**0
                  CONTENTS
 10 .bss          00000434  200000e4  200000e4  0000b0e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  0000b0e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ed4  00000000  00000000  0000b114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000390b  00000000  00000000  0001efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  000228f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbe  00000000  00000000  00023db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cfa  00000000  00000000  00024d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa96  00000000  00000000  0004da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e385f  00000000  00000000  000684fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014bd5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b80  00000000  00000000  0014bda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00151920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007c2c 	.word	0x08007c2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	08007c2c 	.word	0x08007c2c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80005c0:	f000 fef2 	bl	80013a8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80005c4:	20ca      	movs	r0, #202	@ 0xca
 80005c6:	f000 f95d 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80005ca:	20c3      	movs	r0, #195	@ 0xc3
 80005cc:	f000 f967 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80005d0:	2008      	movs	r0, #8
 80005d2:	f000 f964 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80005d6:	2050      	movs	r0, #80	@ 0x50
 80005d8:	f000 f961 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005dc:	20cf      	movs	r0, #207	@ 0xcf
 80005de:	f000 f951 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f95b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005e8:	20c1      	movs	r0, #193	@ 0xc1
 80005ea:	f000 f958 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005ee:	2030      	movs	r0, #48	@ 0x30
 80005f0:	f000 f955 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005f4:	20ed      	movs	r0, #237	@ 0xed
 80005f6:	f000 f945 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80005fa:	2064      	movs	r0, #100	@ 0x64
 80005fc:	f000 f94f 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f94c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000606:	2012      	movs	r0, #18
 8000608:	f000 f949 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800060c:	2081      	movs	r0, #129	@ 0x81
 800060e:	f000 f946 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000612:	20e8      	movs	r0, #232	@ 0xe8
 8000614:	f000 f936 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000618:	2085      	movs	r0, #133	@ 0x85
 800061a:	f000 f940 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f93d 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000624:	2078      	movs	r0, #120	@ 0x78
 8000626:	f000 f93a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800062a:	20cb      	movs	r0, #203	@ 0xcb
 800062c:	f000 f92a 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000630:	2039      	movs	r0, #57	@ 0x39
 8000632:	f000 f934 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000636:	202c      	movs	r0, #44	@ 0x2c
 8000638:	f000 f931 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f92e 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000642:	2034      	movs	r0, #52	@ 0x34
 8000644:	f000 f92b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000648:	2002      	movs	r0, #2
 800064a:	f000 f928 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800064e:	20f7      	movs	r0, #247	@ 0xf7
 8000650:	f000 f918 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000654:	2020      	movs	r0, #32
 8000656:	f000 f922 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800065a:	20ea      	movs	r0, #234	@ 0xea
 800065c:	f000 f912 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f91c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f919 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800066c:	20b1      	movs	r0, #177	@ 0xb1
 800066e:	f000 f909 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f913 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000678:	201b      	movs	r0, #27
 800067a:	f000 f910 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800067e:	20b6      	movs	r0, #182	@ 0xb6
 8000680:	f000 f900 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000684:	200a      	movs	r0, #10
 8000686:	f000 f90a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800068a:	20a2      	movs	r0, #162	@ 0xa2
 800068c:	f000 f907 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000690:	20c0      	movs	r0, #192	@ 0xc0
 8000692:	f000 f8f7 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000696:	2010      	movs	r0, #16
 8000698:	f000 f901 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800069c:	20c1      	movs	r0, #193	@ 0xc1
 800069e:	f000 f8f1 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80006a2:	2010      	movs	r0, #16
 80006a4:	f000 f8fb 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80006a8:	20c5      	movs	r0, #197	@ 0xc5
 80006aa:	f000 f8eb 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80006ae:	2045      	movs	r0, #69	@ 0x45
 80006b0:	f000 f8f5 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80006b4:	2015      	movs	r0, #21
 80006b6:	f000 f8f2 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80006ba:	20c7      	movs	r0, #199	@ 0xc7
 80006bc:	f000 f8e2 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80006c0:	2090      	movs	r0, #144	@ 0x90
 80006c2:	f000 f8ec 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80006c6:	2036      	movs	r0, #54	@ 0x36
 80006c8:	f000 f8dc 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80006cc:	20c8      	movs	r0, #200	@ 0xc8
 80006ce:	f000 f8e6 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80006d2:	20f2      	movs	r0, #242	@ 0xf2
 80006d4:	f000 f8d6 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f8e0 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006de:	20b0      	movs	r0, #176	@ 0xb0
 80006e0:	f000 f8d0 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006e4:	20c2      	movs	r0, #194	@ 0xc2
 80006e6:	f000 f8da 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006ea:	20b6      	movs	r0, #182	@ 0xb6
 80006ec:	f000 f8ca 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f000 f8d4 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80006f6:	20a7      	movs	r0, #167	@ 0xa7
 80006f8:	f000 f8d1 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80006fc:	2027      	movs	r0, #39	@ 0x27
 80006fe:	f000 f8ce 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000702:	2004      	movs	r0, #4
 8000704:	f000 f8cb 	bl	800089e <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000708:	202a      	movs	r0, #42	@ 0x2a
 800070a:	f000 f8bb 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f8c5 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8c2 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f8bf 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000720:	20ef      	movs	r0, #239	@ 0xef
 8000722:	f000 f8bc 	bl	800089e <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000726:	202b      	movs	r0, #43	@ 0x2b
 8000728:	f000 f8ac 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f8b6 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f8b3 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000738:	2001      	movs	r0, #1
 800073a:	f000 f8b0 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800073e:	203f      	movs	r0, #63	@ 0x3f
 8000740:	f000 f8ad 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000744:	20f6      	movs	r0, #246	@ 0xf6
 8000746:	f000 f89d 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 f8a7 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f8a4 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000756:	2006      	movs	r0, #6
 8000758:	f000 f8a1 	bl	800089e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800075c:	202c      	movs	r0, #44	@ 0x2c
 800075e:	f000 f891 	bl	8000884 <ili9341_WriteReg>
  LCD_Delay(200);
 8000762:	20c8      	movs	r0, #200	@ 0xc8
 8000764:	f000 ff0e 	bl	8001584 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000768:	2026      	movs	r0, #38	@ 0x26
 800076a:	f000 f88b 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800076e:	2001      	movs	r0, #1
 8000770:	f000 f895 	bl	800089e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000774:	20e0      	movs	r0, #224	@ 0xe0
 8000776:	f000 f885 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f88f 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000780:	2029      	movs	r0, #41	@ 0x29
 8000782:	f000 f88c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000786:	2024      	movs	r0, #36	@ 0x24
 8000788:	f000 f889 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800078c:	200c      	movs	r0, #12
 800078e:	f000 f886 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000792:	200e      	movs	r0, #14
 8000794:	f000 f883 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000798:	2009      	movs	r0, #9
 800079a:	f000 f880 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800079e:	204e      	movs	r0, #78	@ 0x4e
 80007a0:	f000 f87d 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80007a4:	2078      	movs	r0, #120	@ 0x78
 80007a6:	f000 f87a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80007aa:	203c      	movs	r0, #60	@ 0x3c
 80007ac:	f000 f877 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80007b0:	2009      	movs	r0, #9
 80007b2:	f000 f874 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80007b6:	2013      	movs	r0, #19
 80007b8:	f000 f871 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007bc:	2005      	movs	r0, #5
 80007be:	f000 f86e 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80007c2:	2017      	movs	r0, #23
 80007c4:	f000 f86b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f000 f868 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f865 	bl	800089e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80007d4:	20e1      	movs	r0, #225	@ 0xe1
 80007d6:	f000 f855 	bl	8000884 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f85f 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007e0:	2016      	movs	r0, #22
 80007e2:	f000 f85c 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007e6:	201b      	movs	r0, #27
 80007e8:	f000 f859 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007ec:	2004      	movs	r0, #4
 80007ee:	f000 f856 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007f2:	2011      	movs	r0, #17
 80007f4:	f000 f853 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80007f8:	2007      	movs	r0, #7
 80007fa:	f000 f850 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80007fe:	2031      	movs	r0, #49	@ 0x31
 8000800:	f000 f84d 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000804:	2033      	movs	r0, #51	@ 0x33
 8000806:	f000 f84a 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800080a:	2042      	movs	r0, #66	@ 0x42
 800080c:	f000 f847 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000810:	2005      	movs	r0, #5
 8000812:	f000 f844 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000816:	200c      	movs	r0, #12
 8000818:	f000 f841 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800081c:	200a      	movs	r0, #10
 800081e:	f000 f83e 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000822:	2028      	movs	r0, #40	@ 0x28
 8000824:	f000 f83b 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000828:	202f      	movs	r0, #47	@ 0x2f
 800082a:	f000 f838 	bl	800089e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f835 	bl	800089e <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000834:	2011      	movs	r0, #17
 8000836:	f000 f825 	bl	8000884 <ili9341_WriteReg>
  LCD_Delay(200);
 800083a:	20c8      	movs	r0, #200	@ 0xc8
 800083c:	f000 fea2 	bl	8001584 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000840:	2029      	movs	r0, #41	@ 0x29
 8000842:	f000 f81f 	bl	8000884 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000846:	202c      	movs	r0, #44	@ 0x2c
 8000848:	f000 f81c 	bl	8000884 <ili9341_WriteReg>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000854:	f000 fda8 	bl	80013a8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000858:	2103      	movs	r1, #3
 800085a:	20d3      	movs	r0, #211	@ 0xd3
 800085c:	f000 f82c 	bl	80008b8 <ili9341_ReadData>
 8000860:	4603      	mov	r3, r0
 8000862:	b29b      	uxth	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	bd80      	pop	{r7, pc}

08000868 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800086c:	2029      	movs	r0, #41	@ 0x29
 800086e:	f000 f809 	bl	8000884 <ili9341_WriteReg>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800087a:	2028      	movs	r0, #40	@ 0x28
 800087c:	f000 f802 	bl	8000884 <ili9341_WriteReg>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fe23 	bl	80014dc <LCD_IO_WriteReg>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fdf4 	bl	8001498 <LCD_IO_WriteData>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	80fb      	strh	r3, [r7, #6]
 80008c4:	4613      	mov	r3, r2
 80008c6:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80008c8:	797a      	ldrb	r2, [r7, #5]
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fe26 	bl	8001520 <LCD_IO_ReadData>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008e2:	23f0      	movs	r3, #240	@ 0xf0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008f2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fa59 	bl	8000dc4 <stmpe811_GetInstance>
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	2bff      	cmp	r3, #255	@ 0xff
 800091a:	d112      	bne.n	8000942 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800091c:	2000      	movs	r0, #0
 800091e:	f000 fa51 	bl	8000dc4 <stmpe811_GetInstance>
 8000922:	4603      	mov	r3, r0
 8000924:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d80a      	bhi.n	8000942 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	88fa      	ldrh	r2, [r7, #6]
 8000930:	b2d1      	uxtb	r1, r2
 8000932:	4a06      	ldr	r2, [pc, #24]	@ (800094c <stmpe811_Init+0x4c>)
 8000934:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8000936:	f000 fe30 	bl	800159a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f807 	bl	8000950 <stmpe811_Reset>
    }
  }
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000100 	.word	0x20000100

08000950 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2202      	movs	r2, #2
 8000960:	2103      	movs	r1, #3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fe25 	bl	80015b2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8000968:	200a      	movs	r0, #10
 800096a:	f000 fe5e 	bl	800162a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2200      	movs	r2, #0
 8000974:	2103      	movs	r1, #3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fe1b 	bl	80015b2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800097c:	2002      	movs	r0, #2
 800097e:	f000 fe54 	bl	800162a <IOE_Delay>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800098a:	b590      	push	{r4, r7, lr}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8000994:	f000 fe01 	bl	800159a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fe1a 	bl	80015d8 <IOE_Read>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fe10 	bl	80015d8 <IOE_Read>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80009bc:	4323      	orrs	r3, r4
 80009be:	b21b      	sxth	r3, r3
 80009c0:	b29b      	uxth	r3, r3
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd90      	pop	{r4, r7, pc}

080009ca <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2109      	movs	r1, #9
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fdfa 	bl	80015d8 <IOE_Read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	7bfa      	ldrb	r2, [r7, #15]
 80009f6:	2109      	movs	r1, #9
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fdda 	bl	80015b2 <IOE_Write>
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2109      	movs	r1, #9
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fddc 	bl	80015d8 <IOE_Read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f023 0301 	bic.w	r3, r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	2109      	movs	r1, #9
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fdbc 	bl	80015b2 <IOE_Write>
    
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	210a      	movs	r1, #10
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fdbb 	bl	80015d8 <IOE_Read>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	797b      	ldrb	r3, [r7, #5]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	210a      	movs	r1, #10
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fd9b 	bl	80015b2 <IOE_Write>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	4613      	mov	r3, r2
 8000a92:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	210a      	movs	r1, #10
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fd9a 	bl	80015d8 <IOE_Read>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8000aa8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	210a      	movs	r1, #10
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fd75 	bl	80015b2 <IOE_Write>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	80fb      	strh	r3, [r7, #6]
 8000adc:	4613      	mov	r3, r2
 8000ade:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	210b      	movs	r1, #11
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fd76 	bl	80015d8 <IOE_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	797b      	ldrb	r3, [r7, #5]
 8000af2:	4013      	ands	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	460a      	mov	r2, r1
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	797a      	ldrb	r2, [r7, #5]
 8000b14:	210b      	movs	r1, #11
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fd4b 	bl	80015b2 <IOE_Write>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2117      	movs	r1, #23
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fd4c 	bl	80015d8 <IOE_Read>
 8000b40:	4603      	mov	r3, r0
 8000b42:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	b25a      	sxtb	r2, r3
 8000b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b50:	4013      	ands	r3, r2
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	2117      	movs	r1, #23
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fd27 	bl	80015b2 <IOE_Write>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fd2b 	bl	80015d8 <IOE_Read>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	2104      	movs	r1, #4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fd0b 	bl	80015b2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	21f0      	movs	r1, #240	@ 0xf0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffbf 	bl	8000b24 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fcfb 	bl	80015b2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2249      	movs	r2, #73	@ 0x49
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fcf4 	bl	80015b2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fd2d 	bl	800162a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2121      	movs	r1, #33	@ 0x21
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fcea 	bl	80015b2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	229a      	movs	r2, #154	@ 0x9a
 8000be4:	2141      	movs	r1, #65	@ 0x41
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fce3 	bl	80015b2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	214a      	movs	r1, #74	@ 0x4a
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fcdc 	bl	80015b2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2201      	movs	r2, #1
 8000c00:	214b      	movs	r1, #75	@ 0x4b
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fcd5 	bl	80015b2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	214b      	movs	r1, #75	@ 0x4b
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fcce 	bl	80015b2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2156      	movs	r1, #86	@ 0x56
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fcc7 	bl	80015b2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2158      	movs	r1, #88	@ 0x58
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fcc0 	bl	80015b2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2201      	movs	r2, #1
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcb9 	bl	80015b2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	22ff      	movs	r2, #255	@ 0xff
 8000c46:	210b      	movs	r1, #11
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fcb2 	bl	80015b2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f000 fceb 	bl	800162a <IOE_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fcb1 	bl	80015d8 <IOE_Read>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7c:	2b80      	cmp	r3, #128	@ 0x80
 8000c7e:	bf0c      	ite	eq
 8000c80:	2301      	moveq	r3, #1
 8000c82:	2300      	movne	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00b      	beq.n	8000ca6 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	214c      	movs	r1, #76	@ 0x4c
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fc9f 	bl	80015d8 <IOE_Read>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d010      	beq.n	8000cc2 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e00d      	b.n	8000cc2 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2201      	movs	r2, #1
 8000cac:	214b      	movs	r1, #75	@ 0x4b
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc7f 	bl	80015b2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	214b      	movs	r1, #75	@ 0x4b
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fc78 	bl	80015b2 <IOE_Write>
  }
  
  return ret;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	b2d8      	uxtb	r0, r3
 8000cde:	f107 0210 	add.w	r2, r7, #16
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	21d7      	movs	r1, #215	@ 0xd7
 8000ce6:	f000 fc8a 	bl	80015fe <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000cea:	7c3b      	ldrb	r3, [r7, #16]
 8000cec:	061a      	lsls	r2, r3, #24
 8000cee:	7c7b      	ldrb	r3, [r7, #17]
 8000cf0:	041b      	lsls	r3, r3, #16
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	7cbb      	ldrb	r3, [r7, #18]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	7cfa      	ldrb	r2, [r7, #19]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	0d1b      	lsrs	r3, r3, #20
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2201      	movs	r2, #1
 8000d20:	214b      	movs	r1, #75	@ 0x4b
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fc45 	bl	80015b2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	214b      	movs	r1, #75	@ 0x4b
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fc3e 	bl	80015b2 <IOE_Write>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8000d48:	f000 fc2d 	bl	80015a6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	211f      	movs	r1, #31
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fe76 	bl	8000a42 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe36 	bl	80009ca <stmpe811_EnableGlobalIT>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe47 	bl	8000a06 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	211f      	movs	r1, #31
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe81 	bl	8000a84 <stmpe811_DisableITSource>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	211f      	movs	r1, #31
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe99 	bl	8000ad0 <stmpe811_ReadGITStatus>
 8000d9e:	4603      	mov	r3, r0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	211f      	movs	r1, #31
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fea1 	bl	8000afe <stmpe811_ClearGlobalIT>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e00b      	b.n	8000df0 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <stmpe811_GetInstance+0x40>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	461a      	mov	r2, r3
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	e006      	b.n	8000df8 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	3301      	adds	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d9f0      	bls.n	8000dd8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000df6:	23ff      	movs	r3, #255	@ 0xff
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000100 	.word	0x20000100

08000e08 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10e      	bne.n	8000e36 <BSP_LED_Init+0x2e>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <BSP_LED_Init+0x9c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <BSP_LED_Init+0x9c>)
 8000e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <BSP_LED_Init+0x9c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	e010      	b.n	8000e58 <BSP_LED_Init+0x50>
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10d      	bne.n	8000e58 <BSP_LED_Init+0x50>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <BSP_LED_Init+0x9c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e44:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <BSP_LED_Init+0x9c>)
 8000e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <BSP_LED_Init+0x9c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <BSP_LED_Init+0xa0>)
 8000e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <BSP_LED_Init+0xa4>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	f107 0214 	add.w	r2, r7, #20
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f9f7 	bl	8003270 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <BSP_LED_Init+0xa4>)
 8000e86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <BSP_LED_Init+0xa0>)
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	f002 fb97 	bl	80035c8 <HAL_GPIO_WritePin>
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	08007c48 	.word	0x08007c48
 8000eac:	20000060 	.word	0x20000060

08000eb0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <BSP_PB_Init+0x32>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <BSP_PB_Init+0xa4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <BSP_PB_Init+0xa4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <BSP_PB_Init+0xa4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d111      	bne.n	8000f0c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <BSP_PB_Init+0xa8>)
 8000efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 f9b2 	bl	8003270 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d11c      	bne.n	8000f4c <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f1e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <BSP_PB_Init+0xa8>)
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 f99e 	bl	8003270 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000f34:	2306      	movs	r3, #6
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fd0c 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000f42:	2306      	movs	r3, #6
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fd23 	bl	8002992 <HAL_NVIC_EnableIRQ>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	20000068 	.word	0x20000068

08000f5c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a33      	ldr	r2, [pc, #204]	@ (8001038 <I2Cx_MspInit+0xdc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d15f      	bne.n	800102e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a31      	ldr	r2, [pc, #196]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a2a      	ldr	r2, [pc, #168]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8000fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	481f      	ldr	r0, [pc, #124]	@ (8001040 <I2Cx_MspInit+0xe4>)
 8000fc4:	f002 f954 	bl	8003270 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000fc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fcc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481b      	ldr	r0, [pc, #108]	@ (8001044 <I2Cx_MspInit+0xe8>)
 8000fd6:	f002 f94b 	bl	8003270 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a16      	ldr	r2, [pc, #88]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000fe4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <I2Cx_MspInit+0xe0>)
 8000ffc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001000:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <I2Cx_MspInit+0xe0>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <I2Cx_MspInit+0xe0>)
 8001008:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800100c:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210f      	movs	r1, #15
 8001012:	2048      	movs	r0, #72	@ 0x48
 8001014:	f001 fca1 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001018:	2048      	movs	r0, #72	@ 0x48
 800101a:	f001 fcba 	bl	8002992 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	210f      	movs	r1, #15
 8001022:	2049      	movs	r0, #73	@ 0x49
 8001024:	f001 fc99 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001028:	2049      	movs	r0, #73	@ 0x49
 800102a:	f001 fcb2 	bl	8002992 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40005c00 	.word	0x40005c00
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020800 	.word	0x40020800

08001048 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800104c:	4814      	ldr	r0, [pc, #80]	@ (80010a0 <I2Cx_Init+0x58>)
 800104e:	f002 ffad 	bl	8003fac <HAL_I2C_GetState>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d121      	bne.n	800109c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <I2Cx_Init+0x58>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <I2Cx_Init+0x5c>)
 800105c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <I2Cx_Init+0x58>)
 8001060:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <I2Cx_Init+0x60>)
 8001062:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <I2Cx_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <I2Cx_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <I2Cx_Init+0x58>)
 8001072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001076:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <I2Cx_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <I2Cx_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <I2Cx_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 800108a:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <I2Cx_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <I2Cx_Init+0x58>)
 8001092:	f7ff ff63 	bl	8000f5c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001096:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <I2Cx_Init+0x58>)
 8001098:	f002 fad4 	bl	8003644 <HAL_I2C_Init>
  }
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000104 	.word	0x20000104
 80010a4:	40005c00 	.word	0x40005c00
 80010a8:	000186a0 	.word	0x000186a0

080010ac <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <I2Cx_ITConfig+0x58>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <I2Cx_ITConfig+0x58>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <I2Cx_ITConfig+0x58>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80010ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80010dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4808      	ldr	r0, [pc, #32]	@ (8001108 <I2Cx_ITConfig+0x5c>)
 80010e8:	f002 f8c2 	bl	8003270 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80010ec:	2200      	movs	r2, #0
 80010ee:	210f      	movs	r1, #15
 80010f0:	2028      	movs	r0, #40	@ 0x28
 80010f2:	f001 fc32 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80010f6:	2028      	movs	r0, #40	@ 0x28
 80010f8:	f001 fc4b 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b299      	uxth	r1, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	b29a      	uxth	r2, r3
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <I2Cx_WriteData+0x4c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	1d7b      	adds	r3, r7, #5
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	4808      	ldr	r0, [pc, #32]	@ (800115c <I2Cx_WriteData+0x50>)
 800113c:	f002 fc0a 	bl	8003954 <HAL_I2C_Mem_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800114a:	f000 f863 	bl	8001214 <I2Cx_Error>
  }
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000006c 	.word	0x2000006c
 800115c:	20000104 	.word	0x20000104

08001160 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	b299      	uxth	r1, r3
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <I2Cx_ReadData+0x50>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f107 030e 	add.w	r3, r7, #14
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <I2Cx_ReadData+0x54>)
 8001194:	f002 fcd8 	bl	8003b48 <HAL_I2C_Mem_Read>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80011a2:	f000 f837 	bl	8001214 <I2Cx_Error>

  }
  return value;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000006c 	.word	0x2000006c
 80011b4:	20000104 	.word	0x20000104

080011b8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af04      	add	r7, sp, #16
 80011be:	603a      	str	r2, [r7, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	460b      	mov	r3, r1
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	4613      	mov	r3, r2
 80011cc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b299      	uxth	r1, r3
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <I2Cx_ReadBuffer+0x54>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	4809      	ldr	r0, [pc, #36]	@ (8001210 <I2Cx_ReadBuffer+0x58>)
 80011ec:	f002 fcac 	bl	8003b48 <HAL_I2C_Mem_Read>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e002      	b.n	8001204 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80011fe:	f000 f809 	bl	8001214 <I2Cx_Error>

    return 1;
 8001202:	2301      	movs	r3, #1
  }
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000006c 	.word	0x2000006c
 8001210:	20000104 	.word	0x20000104

08001214 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001218:	4803      	ldr	r0, [pc, #12]	@ (8001228 <I2Cx_Error+0x14>)
 800121a:	f002 fb57 	bl	80038cc <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800121e:	f7ff ff13 	bl	8001048 <I2Cx_Init>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000104 	.word	0x20000104

0800122c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001230:	4819      	ldr	r0, [pc, #100]	@ (8001298 <SPIx_Init+0x6c>)
 8001232:	f005 fa96 	bl	8006762 <HAL_SPI_GetState>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d12b      	bne.n	8001294 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <SPIx_Init+0x6c>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <SPIx_Init+0x70>)
 8001240:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <SPIx_Init+0x6c>)
 8001244:	2218      	movs	r2, #24
 8001246:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <SPIx_Init+0x6c>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <SPIx_Init+0x6c>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <SPIx_Init+0x6c>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <SPIx_Init+0x6c>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <SPIx_Init+0x6c>)
 8001262:	2207      	movs	r2, #7
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <SPIx_Init+0x6c>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <SPIx_Init+0x6c>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <SPIx_Init+0x6c>)
 8001274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001278:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <SPIx_Init+0x6c>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <SPIx_Init+0x6c>)
 8001282:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001286:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001288:	4803      	ldr	r0, [pc, #12]	@ (8001298 <SPIx_Init+0x6c>)
 800128a:	f000 f853 	bl	8001334 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800128e:	4802      	ldr	r0, [pc, #8]	@ (8001298 <SPIx_Init+0x6c>)
 8001290:	f004 fc5d 	bl	8005b4e <HAL_SPI_Init>
  }
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000158 	.word	0x20000158
 800129c:	40015000 	.word	0x40015000

080012a0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <SPIx_Read+0x38>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f107 0108 	add.w	r1, r7, #8
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <SPIx_Read+0x3c>)
 80012bc:	f004 fe79 	bl	8005fb2 <HAL_SPI_Receive>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80012ca:	f000 f827 	bl	800131c <SPIx_Error>
  }

  return readvalue;
 80012ce:	68bb      	ldr	r3, [r7, #8]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000070 	.word	0x20000070
 80012dc:	20000158 	.word	0x20000158

080012e0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <SPIx_Write+0x34>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1db9      	adds	r1, r7, #6
 80012f4:	2201      	movs	r2, #1
 80012f6:	4808      	ldr	r0, [pc, #32]	@ (8001318 <SPIx_Write+0x38>)
 80012f8:	f004 fcf6 	bl	8005ce8 <HAL_SPI_Transmit>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001306:	f000 f809 	bl	800131c <SPIx_Error>
  }
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000070 	.word	0x20000070
 8001318:	20000158 	.word	0x20000158

0800131c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001320:	4803      	ldr	r0, [pc, #12]	@ (8001330 <SPIx_Error+0x14>)
 8001322:	f004 fca5 	bl	8005c70 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001326:	f7ff ff81 	bl	800122c <SPIx_Init>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000158 	.word	0x20000158

08001334 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <SPIx_MspInit+0x6c>)
 8001342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001344:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <SPIx_MspInit+0x6c>)
 8001346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800134a:	6453      	str	r3, [r2, #68]	@ 0x44
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <SPIx_MspInit+0x6c>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <SPIx_MspInit+0x6c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <SPIx_MspInit+0x6c>)
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	6313      	str	r3, [r2, #48]	@ 0x30
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <SPIx_MspInit+0x6c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001374:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001386:	2305      	movs	r3, #5
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <SPIx_MspInit+0x70>)
 8001392:	f001 ff6d 	bl	8003270 <HAL_GPIO_Init>
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40021400 	.word	0x40021400

080013a8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 80013ae:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <LCD_IO_Init+0xe0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d164      	bne.n	8001480 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80013b6:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <LCD_IO_Init+0xe0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	4b32      	ldr	r3, [pc, #200]	@ (800148c <LCD_IO_Init+0xe4>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	4a31      	ldr	r2, [pc, #196]	@ (800148c <LCD_IO_Init+0xe4>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80013cc:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <LCD_IO_Init+0xe4>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80013d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	4827      	ldr	r0, [pc, #156]	@ (8001490 <LCD_IO_Init+0xe8>)
 80013f2:	f001 ff3d 	bl	8003270 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <LCD_IO_Init+0xe4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a23      	ldr	r2, [pc, #140]	@ (800148c <LCD_IO_Init+0xe4>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <LCD_IO_Init+0xe4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4819      	ldr	r0, [pc, #100]	@ (8001490 <LCD_IO_Init+0xe8>)
 800142c:	f001 ff20 	bl	8003270 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <LCD_IO_Init+0xe4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	4a14      	ldr	r2, [pc, #80]	@ (800148c <LCD_IO_Init+0xe4>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <LCD_IO_Init+0xe4>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800144c:	2304      	movs	r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	480c      	ldr	r0, [pc, #48]	@ (8001494 <LCD_IO_Init+0xec>)
 8001464:	f001 ff04 	bl	8003270 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	4809      	ldr	r0, [pc, #36]	@ (8001494 <LCD_IO_Init+0xec>)
 800146e:	f002 f8ab 	bl	80035c8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001472:	2201      	movs	r2, #1
 8001474:	2104      	movs	r1, #4
 8001476:	4807      	ldr	r0, [pc, #28]	@ (8001494 <LCD_IO_Init+0xec>)
 8001478:	f002 f8a6 	bl	80035c8 <HAL_GPIO_WritePin>

    SPIx_Init();
 800147c:	f7ff fed6 	bl	800122c <SPIx_Init>
  }
}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200001b0 	.word	0x200001b0
 800148c:	40023800 	.word	0x40023800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020800 	.word	0x40020800

08001498 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a8:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <LCD_IO_WriteData+0x3c>)
 80014aa:	f002 f88d 	bl	80035c8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80014ae:	2200      	movs	r2, #0
 80014b0:	2104      	movs	r1, #4
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <LCD_IO_WriteData+0x40>)
 80014b4:	f002 f888 	bl	80035c8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff10 	bl	80012e0 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014c0:	2201      	movs	r2, #1
 80014c2:	2104      	movs	r1, #4
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <LCD_IO_WriteData+0x40>)
 80014c6:	f002 f87f 	bl	80035c8 <HAL_GPIO_WritePin>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40020800 	.word	0x40020800

080014dc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ec:	480a      	ldr	r0, [pc, #40]	@ (8001518 <LCD_IO_WriteReg+0x3c>)
 80014ee:	f002 f86b 	bl	80035c8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	4809      	ldr	r0, [pc, #36]	@ (800151c <LCD_IO_WriteReg+0x40>)
 80014f8:	f002 f866 	bl	80035c8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff feed 	bl	80012e0 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001506:	2201      	movs	r2, #1
 8001508:	2104      	movs	r1, #4
 800150a:	4804      	ldr	r0, [pc, #16]	@ (800151c <LCD_IO_WriteReg+0x40>)
 800150c:	f002 f85c 	bl	80035c8 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40020800 	.word	0x40020800

08001520 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	460a      	mov	r2, r1
 800152a:	80fb      	strh	r3, [r7, #6]
 800152c:	4613      	mov	r3, r2
 800152e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001534:	2200      	movs	r2, #0
 8001536:	2104      	movs	r1, #4
 8001538:	4810      	ldr	r0, [pc, #64]	@ (800157c <LCD_IO_ReadData+0x5c>)
 800153a:	f002 f845 	bl	80035c8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001544:	480e      	ldr	r0, [pc, #56]	@ (8001580 <LCD_IO_ReadData+0x60>)
 8001546:	f002 f83f 	bl	80035c8 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fec7 	bl	80012e0 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fea3 	bl	80012a0 <SPIx_Read>
 800155a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001562:	4807      	ldr	r0, [pc, #28]	@ (8001580 <LCD_IO_ReadData+0x60>)
 8001564:	f002 f830 	bl	80035c8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001568:	2201      	movs	r2, #1
 800156a:	2104      	movs	r1, #4
 800156c:	4803      	ldr	r0, [pc, #12]	@ (800157c <LCD_IO_ReadData+0x5c>)
 800156e:	f002 f82b 	bl	80035c8 <HAL_GPIO_WritePin>

  return readvalue;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00

08001584 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f001 f8e5 	bl	800275c <HAL_Delay>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800159e:	f7ff fd53 	bl	8001048 <I2Cx_Init>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80015aa:	f7ff fd7f 	bl	80010ac <I2Cx_ITConfig>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	460b      	mov	r3, r1
 80015be:	71bb      	strb	r3, [r7, #6]
 80015c0:	4613      	mov	r3, r2
 80015c2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80015c4:	797a      	ldrb	r2, [r7, #5]
 80015c6:	79b9      	ldrb	r1, [r7, #6]
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd9e 	bl	800110c <I2Cx_WriteData>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80015e8:	79ba      	ldrb	r2, [r7, #6]
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fdb6 	bl	8001160 <I2Cx_ReadData>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	603a      	str	r2, [r7, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	460b      	mov	r3, r1
 800160e:	71bb      	strb	r3, [r7, #6]
 8001610:	4613      	mov	r3, r2
 8001612:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	79b9      	ldrb	r1, [r7, #6]
 8001618:	79f8      	ldrb	r0, [r7, #7]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	f7ff fdcc 	bl	80011b8 <I2Cx_ReadBuffer>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 f892 	bl	800275c <HAL_Delay>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001646:	4a2e      	ldr	r2, [pc, #184]	@ (8001700 <BSP_LCD_Init+0xc0>)
 8001648:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800164a:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <BSP_LCD_Init+0xbc>)
 800164c:	2209      	movs	r2, #9
 800164e:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001652:	2201      	movs	r2, #1
 8001654:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001658:	221d      	movs	r2, #29
 800165a:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <BSP_LCD_Init+0xbc>)
 800165e:	2203      	movs	r2, #3
 8001660:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001664:	f240 120d 	movw	r2, #269	@ 0x10d
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 800166a:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <BSP_LCD_Init+0xbc>)
 800166c:	f240 1243 	movw	r2, #323	@ 0x143
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001674:	f240 1217 	movw	r2, #279	@ 0x117
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <BSP_LCD_Init+0xbc>)
 800167c:	f240 1247 	movw	r2, #327	@ 0x147
 8001680:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <BSP_LCD_Init+0xbc>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <BSP_LCD_Init+0xbc>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800169a:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <BSP_LCD_Init+0xc4>)
 800169c:	2208      	movs	r2, #8
 800169e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <BSP_LCD_Init+0xc4>)
 80016a2:	22c0      	movs	r2, #192	@ 0xc0
 80016a4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80016a6:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <BSP_LCD_Init+0xc4>)
 80016a8:	2204      	movs	r2, #4
 80016aa:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <BSP_LCD_Init+0xc4>)
 80016ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80016b4:	4813      	ldr	r0, [pc, #76]	@ (8001704 <BSP_LCD_Init+0xc4>)
 80016b6:	f003 ffef 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <BSP_LCD_Init+0xbc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <BSP_LCD_Init+0xbc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <BSP_LCD_Init+0xbc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <BSP_LCD_Init+0xbc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 80016d2:	f000 fb2d 	bl	8001d30 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 80016d6:	4809      	ldr	r0, [pc, #36]	@ (80016fc <BSP_LCD_Init+0xbc>)
 80016d8:	f003 f82a 	bl	8004730 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <BSP_LCD_Init+0xc8>)
 80016de:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <BSP_LCD_Init+0xcc>)
 80016e0:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <BSP_LCD_Init+0xc8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80016ea:	f000 fd0f 	bl	800210c <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <BSP_LCD_Init+0xd0>)
 80016f0:	f000 f8ce 	bl	8001890 <BSP_LCD_SetFont>

  return LCD_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001b4 	.word	0x200001b4
 8001700:	40016800 	.word	0x40016800
 8001704:	2000029c 	.word	0x2000029c
 8001708:	200002e8 	.word	0x200002e8
 800170c:	20000000 	.word	0x20000000
 8001710:	20000074 	.word	0x20000074

08001714 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <BSP_LCD_GetXSize+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	4798      	blx	r3
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002e8 	.word	0x200002e8

0800172c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <BSP_LCD_GetYSize+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001736:	4798      	blx	r3
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002e8 	.word	0x200002e8

08001744 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b090      	sub	sp, #64	@ 0x40
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001754:	f7ff ffde 	bl	8001714 <BSP_LCD_GetXSize>
 8001758:	4603      	mov	r3, r0
 800175a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001760:	f7ff ffe4 	bl	800172c <BSP_LCD_GetYSize>
 8001764:	4603      	mov	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001770:	23ff      	movs	r3, #255	@ 0xff
 8001772:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800178a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001790:	2307      	movs	r3, #7
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001794:	f7ff ffbe 	bl	8001714 <BSP_LCD_GetXSize>
 8001798:	4603      	mov	r3, r0
 800179a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800179c:	f7ff ffc6 	bl	800172c <BSP_LCD_GetYSize>
 80017a0:	4603      	mov	r3, r0
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4814      	ldr	r0, [pc, #80]	@ (8001800 <BSP_LCD_LayerDefaultInit+0xbc>)
 80017ae:	f003 f899 	bl	80048e4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	4913      	ldr	r1, [pc, #76]	@ (8001804 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3304      	adds	r3, #4
 80017c2:	f04f 32ff 	mov.w	r2, #4294967295
 80017c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	490e      	ldr	r1, [pc, #56]	@ (8001804 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3308      	adds	r3, #8
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <BSP_LCD_LayerDefaultInit+0xc4>)
 80017da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80017dc:	88fa      	ldrh	r2, [r7, #6]
 80017de:	4909      	ldr	r1, [pc, #36]	@ (8001804 <BSP_LCD_LayerDefaultInit+0xc0>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80017ee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <BSP_LCD_LayerDefaultInit+0xbc>)
 80017f2:	f003 f8b5 	bl	8004960 <HAL_LTDC_EnableDither>
}
 80017f6:	bf00      	nop
 80017f8:	3740      	adds	r7, #64	@ 0x40
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001b4 	.word	0x200001b4
 8001804:	200002d0 	.word	0x200002d0
 8001808:	20000074 	.word	0x20000074

0800180c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <BSP_LCD_SelectLayer+0x1c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200002cc 	.word	0x200002cc

0800182c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001834:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <BSP_LCD_SetTextColor+0x28>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4907      	ldr	r1, [pc, #28]	@ (8001858 <BSP_LCD_SetTextColor+0x2c>)
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	200002cc 	.word	0x200002cc
 8001858:	200002d0 	.word	0x200002d0

0800185c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <BSP_LCD_SetBackColor+0x2c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4908      	ldr	r1, [pc, #32]	@ (800188c <BSP_LCD_SetBackColor+0x30>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3304      	adds	r3, #4
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200002cc 	.word	0x200002cc
 800188c:	200002d0 	.word	0x200002d0

08001890 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <BSP_LCD_SetFont+0x2c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4908      	ldr	r1, [pc, #32]	@ (80018c0 <BSP_LCD_SetFont+0x30>)
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3308      	adds	r3, #8
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200002cc 	.word	0x200002cc
 80018c0:	200002d0 	.word	0x200002d0

080018c4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <BSP_LCD_Clear+0x48>)
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <BSP_LCD_Clear+0x48>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <BSP_LCD_Clear+0x4c>)
 80018d6:	2134      	movs	r1, #52	@ 0x34
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	335c      	adds	r3, #92	@ 0x5c
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461e      	mov	r6, r3
 80018e4:	f7ff ff16 	bl	8001714 <BSP_LCD_GetXSize>
 80018e8:	4605      	mov	r5, r0
 80018ea:	f7ff ff1f 	bl	800172c <BSP_LCD_GetYSize>
 80018ee:	4602      	mov	r2, r0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	462a      	mov	r2, r5
 80018fc:	4631      	mov	r1, r6
 80018fe:	4620      	mov	r0, r4
 8001900:	f000 fbcc 	bl	800209c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190c:	200002cc 	.word	0x200002cc
 8001910:	200001b4 	.word	0x200001b4

08001914 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	460b      	mov	r3, r1
 8001920:	80bb      	strh	r3, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <BSP_LCD_DisplayChar+0x80>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	491b      	ldr	r1, [pc, #108]	@ (8001998 <BSP_LCD_DisplayChar+0x84>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3308      	adds	r3, #8
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <BSP_LCD_DisplayChar+0x80>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4c14      	ldr	r4, [pc, #80]	@ (8001998 <BSP_LCD_DisplayChar+0x84>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4423      	add	r3, r4
 8001952:	3308      	adds	r3, #8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001958:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800195c:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <BSP_LCD_DisplayChar+0x80>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4c0d      	ldr	r4, [pc, #52]	@ (8001998 <BSP_LCD_DisplayChar+0x84>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4423      	add	r3, r4
 800196c:	3308      	adds	r3, #8
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	3307      	adds	r3, #7
 8001974:	2b00      	cmp	r3, #0
 8001976:	da00      	bge.n	800197a <BSP_LCD_DisplayChar+0x66>
 8001978:	3307      	adds	r3, #7
 800197a:	10db      	asrs	r3, r3, #3
 800197c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001980:	18ca      	adds	r2, r1, r3
 8001982:	88b9      	ldrh	r1, [r7, #4]
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 face 	bl	8001f28 <DrawChar>
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	200002cc 	.word	0x200002cc
 8001998:	200002d0 	.word	0x200002d0

0800199c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60ba      	str	r2, [r7, #8]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	81fb      	strh	r3, [r7, #14]
 80019aa:	460b      	mov	r3, r1
 80019ac:	81bb      	strh	r3, [r7, #12]
 80019ae:	4613      	mov	r3, r2
 80019b0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80019b2:	2301      	movs	r3, #1
 80019b4:	83fb      	strh	r3, [r7, #30]
 80019b6:	2300      	movs	r3, #0
 80019b8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80019c6:	e002      	b.n	80019ce <BSP_LCD_DisplayStringAt+0x32>
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	617a      	str	r2, [r7, #20]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f6      	bne.n	80019c8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80019da:	f7ff fe9b 	bl	8001714 <BSP_LCD_GetXSize>
 80019de:	4601      	mov	r1, r0
 80019e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <BSP_LCD_DisplayStringAt+0x174>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	484b      	ldr	r0, [pc, #300]	@ (8001b14 <BSP_LCD_DisplayStringAt+0x178>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4403      	add	r3, r0
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	889b      	ldrh	r3, [r3, #4]
 80019f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019fa:	613b      	str	r3, [r7, #16]

  switch (mode)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d01c      	beq.n	8001a3c <BSP_LCD_DisplayStringAt+0xa0>
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	dc33      	bgt.n	8001a6e <BSP_LCD_DisplayStringAt+0xd2>
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d002      	beq.n	8001a10 <BSP_LCD_DisplayStringAt+0x74>
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d019      	beq.n	8001a42 <BSP_LCD_DisplayStringAt+0xa6>
 8001a0e:	e02e      	b.n	8001a6e <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad1      	subs	r1, r2, r3
 8001a16:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <BSP_LCD_DisplayStringAt+0x174>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	483e      	ldr	r0, [pc, #248]	@ (8001b14 <BSP_LCD_DisplayStringAt+0x178>)
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4403      	add	r3, r0
 8001a26:	3308      	adds	r3, #8
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	4413      	add	r3, r2
 8001a38:	83fb      	strh	r3, [r7, #30]
      break;
 8001a3a:	e01b      	b.n	8001a74 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8001a3c:	89fb      	ldrh	r3, [r7, #14]
 8001a3e:	83fb      	strh	r3, [r7, #30]
      break;
 8001a40:	e018      	b.n	8001a74 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <BSP_LCD_DisplayStringAt+0x174>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4831      	ldr	r0, [pc, #196]	@ (8001b14 <BSP_LCD_DisplayStringAt+0x178>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4403      	add	r3, r0
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	fb11 f303 	smulbb	r3, r1, r3
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	4413      	add	r3, r2
 8001a6a:	83fb      	strh	r3, [r7, #30]
      break;
 8001a6c:	e002      	b.n	8001a74 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	83fb      	strh	r3, [r7, #30]
      break;
 8001a72:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001a74:	e01a      	b.n	8001aac <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	89b9      	ldrh	r1, [r7, #12]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff48 	bl	8001914 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <BSP_LCD_DisplayStringAt+0x174>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4922      	ldr	r1, [pc, #136]	@ (8001b14 <BSP_LCD_DisplayStringAt+0x178>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3308      	adds	r3, #8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	889a      	ldrh	r2, [r3, #4]
 8001a9a:	8bfb      	ldrh	r3, [r7, #30]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
    i++;
 8001aa6:	8bbb      	ldrh	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2dc      	uxtb	r4, r3
 8001aba:	f7ff fe2b 	bl	8001714 <BSP_LCD_GetXSize>
 8001abe:	8bb9      	ldrh	r1, [r7, #28]
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <BSP_LCD_DisplayStringAt+0x174>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4d13      	ldr	r5, [pc, #76]	@ (8001b14 <BSP_LCD_DisplayStringAt+0x178>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	442b      	add	r3, r5
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	889b      	ldrh	r3, [r3, #4]
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	1ac3      	subs	r3, r0, r3
 8001adc:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <BSP_LCD_DisplayStringAt+0x174>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <BSP_LCD_DisplayStringAt+0x178>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4403      	add	r3, r0
 8001aee:	3308      	adds	r3, #8
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001af4:	4299      	cmp	r1, r3
 8001af6:	bf2c      	ite	cs
 8001af8:	2301      	movcs	r3, #1
 8001afa:	2300      	movcc	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4023      	ands	r3, r4
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1b7      	bne.n	8001a76 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b10:	200002cc 	.word	0x200002cc
 8001b14:	200002d0 	.word	0x200002d0

08001b18 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
 8001b22:	460b      	mov	r3, r1
 8001b24:	80bb      	strh	r3, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <BSP_LCD_DrawHLine+0x70>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <BSP_LCD_DrawHLine+0x74>)
 8001b34:	2134      	movs	r1, #52	@ 0x34
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	335c      	adds	r3, #92	@ 0x5c
 8001b3e:	681c      	ldr	r4, [r3, #0]
 8001b40:	f7ff fde8 	bl	8001714 <BSP_LCD_GetXSize>
 8001b44:	4602      	mov	r2, r0
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	fb03 f202 	mul.w	r2, r3, r2
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4423      	add	r3, r4
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <BSP_LCD_DrawHLine+0x70>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	887c      	ldrh	r4, [r7, #2]
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <BSP_LCD_DrawHLine+0x70>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4d0b      	ldr	r5, [pc, #44]	@ (8001b90 <BSP_LCD_DrawHLine+0x78>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	442b      	add	r3, r5
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	4622      	mov	r2, r4
 8001b7a:	f000 fa8f 	bl	800209c <FillBuffer>
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bdb0      	pop	{r4, r5, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002cc 	.word	0x200002cc
 8001b8c:	200001b4 	.word	0x200001b4
 8001b90:	200002d0 	.word	0x200002d0

08001b94 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	80bb      	strh	r3, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001baa:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <BSP_LCD_DrawVLine+0x78>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <BSP_LCD_DrawVLine+0x7c>)
 8001bb0:	2134      	movs	r1, #52	@ 0x34
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	335c      	adds	r3, #92	@ 0x5c
 8001bba:	681c      	ldr	r4, [r3, #0]
 8001bbc:	f7ff fdaa 	bl	8001714 <BSP_LCD_GetXSize>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	fb03 f202 	mul.w	r2, r3, r2
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4423      	add	r3, r4
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <BSP_LCD_DrawVLine+0x78>)
 8001bd4:	681c      	ldr	r4, [r3, #0]
 8001bd6:	68fd      	ldr	r5, [r7, #12]
 8001bd8:	887e      	ldrh	r6, [r7, #2]
 8001bda:	f7ff fd9b 	bl	8001714 <BSP_LCD_GetXSize>
 8001bde:	4603      	mov	r3, r0
 8001be0:	1e59      	subs	r1, r3, #1
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <BSP_LCD_DrawVLine+0x78>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	480b      	ldr	r0, [pc, #44]	@ (8001c14 <BSP_LCD_DrawVLine+0x80>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4403      	add	r3, r0
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	9100      	str	r1, [sp, #0]
 8001bf8:	4633      	mov	r3, r6
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f000 fa4c 	bl	800209c <FillBuffer>
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0c:	200002cc 	.word	0x200002cc
 8001c10:	200001b4 	.word	0x200001b4
 8001c14:	200002d0 	.word	0x200002d0

08001c18 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4604      	mov	r4, r0
 8001c20:	4608      	mov	r0, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	80fb      	strh	r3, [r7, #6]
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80bb      	strh	r3, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]
 8001c32:	4613      	mov	r3, r2
 8001c34:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	88b9      	ldrh	r1, [r7, #4]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff6b 	bl	8001b18 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height), Width);
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	883b      	ldrh	r3, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff62 	bl	8001b18 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001c54:	883a      	ldrh	r2, [r7, #0]
 8001c56:	88b9      	ldrh	r1, [r7, #4]
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff9a 	bl	8001b94 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001c60:	88fa      	ldrh	r2, [r7, #6]
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	883a      	ldrh	r2, [r7, #0]
 8001c6a:	88b9      	ldrh	r1, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff91 	bl	8001b94 <BSP_LCD_DrawVLine>
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
	...

08001c7c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af02      	add	r7, sp, #8
 8001c84:	4604      	mov	r4, r0
 8001c86:	4608      	mov	r0, r1
 8001c88:	4611      	mov	r1, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	80fb      	strh	r3, [r7, #6]
 8001c90:	4603      	mov	r3, r0
 8001c92:	80bb      	strh	r3, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <BSP_LCD_FillRect+0xa8>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4920      	ldr	r1, [pc, #128]	@ (8001d28 <BSP_LCD_FillRect+0xac>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fdba 	bl	800182c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <BSP_LCD_FillRect+0xa8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <BSP_LCD_FillRect+0xb0>)
 8001cbe:	2134      	movs	r1, #52	@ 0x34
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	335c      	adds	r3, #92	@ 0x5c
 8001cc8:	681c      	ldr	r4, [r3, #0]
 8001cca:	f7ff fd23 	bl	8001714 <BSP_LCD_GetXSize>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	fb03 f202 	mul.w	r2, r3, r2
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4423      	add	r3, r4
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <BSP_LCD_FillRect+0xa8>)
 8001ce2:	681c      	ldr	r4, [r3, #0]
 8001ce4:	68fd      	ldr	r5, [r7, #12]
 8001ce6:	887e      	ldrh	r6, [r7, #2]
 8001ce8:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cec:	f7ff fd12 	bl	8001714 <BSP_LCD_GetXSize>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	1ad1      	subs	r1, r2, r3
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <BSP_LCD_FillRect+0xa8>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <BSP_LCD_FillRect+0xac>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4403      	add	r3, r0
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	9100      	str	r1, [sp, #0]
 8001d0c:	4643      	mov	r3, r8
 8001d0e:	4632      	mov	r2, r6
 8001d10:	4629      	mov	r1, r5
 8001d12:	4620      	mov	r0, r4
 8001d14:	f000 f9c2 	bl	800209c <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d22:	bf00      	nop
 8001d24:	200002cc 	.word	0x200002cc
 8001d28:	200002d0 	.word	0x200002d0
 8001d2c:	200001b4 	.word	0x200001b4

08001d30 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	@ 0x38
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	4b61      	ldr	r3, [pc, #388]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	4a60      	ldr	r2, [pc, #384]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d46:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a59      	ldr	r2, [pc, #356]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b57      	ldr	r3, [pc, #348]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b53      	ldr	r3, [pc, #332]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a52      	ldr	r2, [pc, #328]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b50      	ldr	r3, [pc, #320]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b49      	ldr	r3, [pc, #292]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b45      	ldr	r3, [pc, #276]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a44      	ldr	r2, [pc, #272]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b42      	ldr	r3, [pc, #264]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a36      	ldr	r2, [pc, #216]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <BSP_LCD_MspInit+0x190>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001e16:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001e24:	2302      	movs	r3, #2
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8001e28:	230e      	movs	r3, #14
 8001e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	4824      	ldr	r0, [pc, #144]	@ (8001ec4 <BSP_LCD_MspInit+0x194>)
 8001e34:	f001 fa1c 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001e38:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	4820      	ldr	r0, [pc, #128]	@ (8001ec8 <BSP_LCD_MspInit+0x198>)
 8001e46:	f001 fa13 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001e4a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	481d      	ldr	r0, [pc, #116]	@ (8001ecc <BSP_LCD_MspInit+0x19c>)
 8001e58:	f001 fa0a 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001e5c:	2348      	movs	r3, #72	@ 0x48
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	481a      	ldr	r0, [pc, #104]	@ (8001ed0 <BSP_LCD_MspInit+0x1a0>)
 8001e68:	f001 fa02 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4816      	ldr	r0, [pc, #88]	@ (8001ed4 <BSP_LCD_MspInit+0x1a4>)
 8001e7a:	f001 f9f9 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001e7e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4813      	ldr	r0, [pc, #76]	@ (8001ed8 <BSP_LCD_MspInit+0x1a8>)
 8001e8c:	f001 f9f0 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001e90:	2303      	movs	r3, #3
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8001e94:	2309      	movs	r3, #9
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480a      	ldr	r0, [pc, #40]	@ (8001ec8 <BSP_LCD_MspInit+0x198>)
 8001ea0:	f001 f9e6 	bl	8003270 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ea4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <BSP_LCD_MspInit+0x1a8>)
 8001eb2:	f001 f9dd 	bl	8003270 <HAL_GPIO_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	3738      	adds	r7, #56	@ 0x38
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800

08001edc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	603a      	str	r2, [r7, #0]
 8001ee6:	80fb      	strh	r3, [r7, #6]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <BSP_LCD_DrawPixel+0x44>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <BSP_LCD_DrawPixel+0x48>)
 8001ef2:	2134      	movs	r1, #52	@ 0x34
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	335c      	adds	r3, #92	@ 0x5c
 8001efc:	681c      	ldr	r4, [r3, #0]
 8001efe:	88bd      	ldrh	r5, [r7, #4]
 8001f00:	f7ff fc08 	bl	8001714 <BSP_LCD_GetXSize>
 8001f04:	4603      	mov	r3, r0
 8001f06:	fb03 f205 	mul.w	r2, r3, r5
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4423      	add	r3, r4
 8001f12:	461a      	mov	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	200002cc 	.word	0x200002cc
 8001f24:	200001b4 	.word	0x200001b4

08001f28 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	603a      	str	r2, [r7, #0]
 8001f32:	80fb      	strh	r3, [r7, #6]
 8001f34:	460b      	mov	r3, r1
 8001f36:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <DrawChar+0x16c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4953      	ldr	r1, [pc, #332]	@ (8002098 <DrawChar+0x170>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3308      	adds	r3, #8
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	88db      	ldrh	r3, [r3, #6]
 8001f5a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002094 <DrawChar+0x16c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	494d      	ldr	r1, [pc, #308]	@ (8002098 <DrawChar+0x170>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	889b      	ldrh	r3, [r3, #4]
 8001f72:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8001f74:	8a3b      	ldrh	r3, [r7, #16]
 8001f76:	3307      	adds	r3, #7
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da00      	bge.n	8001f7e <DrawChar+0x56>
 8001f7c:	3307      	adds	r3, #7
 8001f7e:	10db      	asrs	r3, r3, #3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	8a3b      	ldrh	r3, [r7, #16]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e076      	b.n	8002082 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	3307      	adds	r3, #7
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da00      	bge.n	8001f9e <DrawChar+0x76>
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	10db      	asrs	r3, r3, #3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8001fae:	8a3b      	ldrh	r3, [r7, #16]
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da00      	bge.n	8001fb8 <DrawChar+0x90>
 8001fb6:	3307      	adds	r3, #7
 8001fb8:	10db      	asrs	r3, r3, #3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d002      	beq.n	8001fc4 <DrawChar+0x9c>
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d004      	beq.n	8001fcc <DrawChar+0xa4>
 8001fc2:	e00c      	b.n	8001fde <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]
        break;
 8001fca:	e016      	b.n	8001ffa <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	3201      	adds	r2, #1
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
        break;
 8001fdc:	e00d      	b.n	8001ffa <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	4313      	orrs	r3, r2
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	3202      	adds	r2, #2
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
        break;
 8001ff8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	e036      	b.n	800206e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8002000:	8a3a      	ldrh	r2, [r7, #16]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	4413      	add	r3, r2
 800200a:	3b01      	subs	r3, #1
 800200c:	2201      	movs	r2, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	461a      	mov	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	b29a      	uxth	r2, r3
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	4413      	add	r3, r2
 8002024:	b298      	uxth	r0, r3
 8002026:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <DrawChar+0x16c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	491b      	ldr	r1, [pc, #108]	@ (8002098 <DrawChar+0x170>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	4619      	mov	r1, r3
 800203c:	f7ff ff4e 	bl	8001edc <BSP_LCD_DrawPixel>
 8002040:	e012      	b.n	8002068 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	b29a      	uxth	r2, r3
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4413      	add	r3, r2
 800204a:	b298      	uxth	r0, r3
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <DrawChar+0x16c>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4911      	ldr	r1, [pc, #68]	@ (8002098 <DrawChar+0x170>)
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3304      	adds	r3, #4
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	4619      	mov	r1, r3
 8002064:	f7ff ff3a 	bl	8001edc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	3301      	adds	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	8a3b      	ldrh	r3, [r7, #16]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	429a      	cmp	r2, r3
 8002074:	d3c4      	bcc.n	8002000 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8002076:	88bb      	ldrh	r3, [r7, #4]
 8002078:	3301      	adds	r3, #1
 800207a:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3301      	adds	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	8a7b      	ldrh	r3, [r7, #18]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d384      	bcc.n	8001f94 <DrawChar+0x6c>
  }
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002cc 	.word	0x200002cc
 8002098:	200002d0 	.word	0x200002d0

0800209c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <FillBuffer+0x68>)
 80020ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020b0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <FillBuffer+0x68>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80020b8:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <FillBuffer+0x68>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <FillBuffer+0x68>)
 80020c0:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <FillBuffer+0x6c>)
 80020c2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80020c4:	480f      	ldr	r0, [pc, #60]	@ (8002104 <FillBuffer+0x68>)
 80020c6:	f000 fe3d 	bl	8002d44 <HAL_DMA2D_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d115      	bne.n	80020fc <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	480c      	ldr	r0, [pc, #48]	@ (8002104 <FillBuffer+0x68>)
 80020d4:	f000 ff9e 	bl	8003014 <HAL_DMA2D_ConfigLayer>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10e      	bne.n	80020fc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69f9      	ldr	r1, [r7, #28]
 80020e8:	4806      	ldr	r0, [pc, #24]	@ (8002104 <FillBuffer+0x68>)
 80020ea:	f000 fe7e 	bl	8002dea <HAL_DMA2D_Start>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80020f4:	210a      	movs	r1, #10
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <FillBuffer+0x68>)
 80020f8:	f000 fea2 	bl	8002e40 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000025c 	.word	0x2000025c
 8002108:	4002b000 	.word	0x4002b000

0800210c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002112:	4a2a      	ldr	r2, [pc, #168]	@ (80021bc <BSP_SDRAM_Init+0xb0>)
 8002114:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 8002118:	2202      	movs	r2, #2
 800211a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800211c:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 800211e:	2207      	movs	r2, #7
 8002120:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002122:	4b27      	ldr	r3, [pc, #156]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 8002124:	2204      	movs	r2, #4
 8002126:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 800212a:	2207      	movs	r2, #7
 800212c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800212e:	4b24      	ldr	r3, [pc, #144]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 8002130:	2202      	movs	r2, #2
 8002132:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002134:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 8002136:	2202      	movs	r2, #2
 8002138:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800213a:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 800213c:	2202      	movs	r2, #2
 800213e:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002142:	2201      	movs	r2, #1
 8002144:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800214c:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 800214e:	2204      	movs	r2, #4
 8002150:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002154:	2210      	movs	r2, #16
 8002156:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002158:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 800215a:	2240      	movs	r2, #64	@ 0x40
 800215c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800215e:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002160:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002164:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 800216e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002172:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 800217c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002182:	2100      	movs	r1, #0
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 8002186:	f000 f87f 	bl	8002288 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <BSP_SDRAM_Init+0xb4>)
 800218c:	480a      	ldr	r0, [pc, #40]	@ (80021b8 <BSP_SDRAM_Init+0xac>)
 800218e:	f003 fc43 	bl	8005a18 <HAL_SDRAM_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <BSP_SDRAM_Init+0xb8>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e002      	b.n	80021a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <BSP_SDRAM_Init+0xb8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021a6:	f240 506a 	movw	r0, #1386	@ 0x56a
 80021aa:	f000 f80d 	bl	80021c8 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <BSP_SDRAM_Init+0xb8>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002ec 	.word	0x200002ec
 80021bc:	a0000140 	.word	0xa0000140
 80021c0:	20000320 	.word	0x20000320
 80021c4:	20000084 	.word	0x20000084

080021c8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80021d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021da:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021dc:	2208      	movs	r2, #8
 80021de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80021e6:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80021ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f0:	4923      	ldr	r1, [pc, #140]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021f2:	4824      	ldr	r0, [pc, #144]	@ (8002284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021f4:	f003 fc4e 	bl	8005a94 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f000 faaf 	bl	800275c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002204:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002206:	2208      	movs	r2, #8
 8002208:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800220a:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800220c:	2201      	movs	r2, #1
 800220e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800221a:	4919      	ldr	r1, [pc, #100]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800221c:	4819      	ldr	r0, [pc, #100]	@ (8002284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800221e:	f003 fc39 	bl	8005a94 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002224:	2203      	movs	r2, #3
 8002226:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002228:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800222a:	2208      	movs	r2, #8
 800222c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002230:	2204      	movs	r2, #4
 8002232:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800223a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800223e:	4910      	ldr	r1, [pc, #64]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002240:	4810      	ldr	r0, [pc, #64]	@ (8002284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002242:	f003 fc27 	bl	8005a94 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002246:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800224a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224e:	2204      	movs	r2, #4
 8002250:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002254:	2208      	movs	r2, #8
 8002256:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225a:	2201      	movs	r2, #1
 800225c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a07      	ldr	r2, [pc, #28]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002262:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002268:	4905      	ldr	r1, [pc, #20]	@ (8002280 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800226c:	f003 fc12 	bl	8005a94 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4804      	ldr	r0, [pc, #16]	@ (8002284 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002274:	f003 fc43 	bl	8005afe <HAL_SDRAM_ProgramRefreshRate>
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2000033c 	.word	0x2000033c
 8002284:	200002ec 	.word	0x200002ec

08002288 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b090      	sub	sp, #64	@ 0x40
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80ec 	beq.w	8002472 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800229e:	4b77      	ldr	r3, [pc, #476]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	4a76      	ldr	r2, [pc, #472]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80022aa:	4b74      	ldr	r3, [pc, #464]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	4b70      	ldr	r3, [pc, #448]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a6f      	ldr	r2, [pc, #444]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b6d      	ldr	r3, [pc, #436]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	4b69      	ldr	r3, [pc, #420]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a68      	ldr	r2, [pc, #416]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b66      	ldr	r3, [pc, #408]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	4b62      	ldr	r3, [pc, #392]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a61      	ldr	r2, [pc, #388]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b5f      	ldr	r3, [pc, #380]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b5b      	ldr	r3, [pc, #364]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a5a      	ldr	r2, [pc, #360]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b58      	ldr	r3, [pc, #352]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	4b54      	ldr	r3, [pc, #336]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a53      	ldr	r2, [pc, #332]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b51      	ldr	r3, [pc, #324]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a4c      	ldr	r2, [pc, #304]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 800234c:	f043 0320 	orr.w	r3, r3, #32
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a45      	ldr	r2, [pc, #276]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b43      	ldr	r3, [pc, #268]	@ (800247c <BSP_SDRAM_MspInit+0x1f4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800237e:	2302      	movs	r3, #2
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002386:	230c      	movs	r3, #12
 8002388:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800238a:	2360      	movs	r3, #96	@ 0x60
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800238e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002392:	4619      	mov	r1, r3
 8002394:	483a      	ldr	r0, [pc, #232]	@ (8002480 <BSP_SDRAM_MspInit+0x1f8>)
 8002396:	f000 ff6b 	bl	8003270 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 800239a:	2301      	movs	r3, #1
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800239e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	4837      	ldr	r0, [pc, #220]	@ (8002484 <BSP_SDRAM_MspInit+0x1fc>)
 80023a6:	f000 ff63 	bl	8003270 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80023aa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80023b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b4:	4619      	mov	r1, r3
 80023b6:	4834      	ldr	r0, [pc, #208]	@ (8002488 <BSP_SDRAM_MspInit+0x200>)
 80023b8:	f000 ff5a 	bl	8003270 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80023bc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80023c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	4830      	ldr	r0, [pc, #192]	@ (800248c <BSP_SDRAM_MspInit+0x204>)
 80023ca:	f000 ff51 	bl	8003270 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80023ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80023d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	482d      	ldr	r0, [pc, #180]	@ (8002490 <BSP_SDRAM_MspInit+0x208>)
 80023dc:	f000 ff48 	bl	8003270 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80023e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80023e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ea:	4619      	mov	r1, r3
 80023ec:	4829      	ldr	r0, [pc, #164]	@ (8002494 <BSP_SDRAM_MspInit+0x20c>)
 80023ee:	f000 ff3f 	bl	8003270 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 80023fa:	2280      	movs	r2, #128	@ 0x80
 80023fc:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002404:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002406:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002408:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800240c:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002410:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002414:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002418:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800241c:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002420:	2200      	movs	r2, #0
 8002422:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002426:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800242a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800242c:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002434:	2203      	movs	r2, #3
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002438:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 800243a:	2200      	movs	r2, #0
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002446:	4a15      	ldr	r2, [pc, #84]	@ (800249c <BSP_SDRAM_MspInit+0x214>)
 8002448:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002450:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002456:	4810      	ldr	r0, [pc, #64]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 8002458:	f000 fb64 	bl	8002b24 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 800245c:	480e      	ldr	r0, [pc, #56]	@ (8002498 <BSP_SDRAM_MspInit+0x210>)
 800245e:	f000 fab3 	bl	80029c8 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	210f      	movs	r1, #15
 8002466:	2038      	movs	r0, #56	@ 0x38
 8002468:	f000 fa77 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800246c:	2038      	movs	r0, #56	@ 0x38
 800246e:	f000 fa90 	bl	8002992 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002472:	bf00      	nop
 8002474:	3740      	adds	r7, #64	@ 0x40
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40021400 	.word	0x40021400
 8002494:	40021800 	.word	0x40021800
 8002498:	2000034c 	.word	0x2000034c
 800249c:	40026410 	.word	0x40026410

080024a0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	460a      	mov	r2, r1
 80024aa:	80fb      	strh	r3, [r7, #6]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80024b4:	4a13      	ldr	r2, [pc, #76]	@ (8002504 <BSP_TS_Init+0x64>)
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <BSP_TS_Init+0x68>)
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <BSP_TS_Init+0x6c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2082      	movs	r0, #130	@ 0x82
 80024c6:	4798      	blx	r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	f640 0311 	movw	r3, #2065	@ 0x811
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d104      	bne.n	80024de <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <BSP_TS_Init+0x70>)
 80024d6:	4a0d      	ldr	r2, [pc, #52]	@ (800250c <BSP_TS_Init+0x6c>)
 80024d8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <BSP_TS_Init+0x70>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2082      	movs	r0, #130	@ 0x82
 80024ec:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <BSP_TS_Init+0x70>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2082      	movs	r0, #130	@ 0x82
 80024f6:	4798      	blx	r3
  }

  return ret;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200003b0 	.word	0x200003b0
 8002508:	200003b2 	.word	0x200003b2
 800250c:	20000038 	.word	0x20000038
 8002510:	200003ac 	.word	0x200003ac

08002514 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800251c:	4b4f      	ldr	r3, [pc, #316]	@ (800265c <BSP_TS_GetState+0x148>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2082      	movs	r0, #130	@ 0x82
 8002524:	4798      	blx	r3
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 808d 	beq.w	8002652 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002538:	4b48      	ldr	r3, [pc, #288]	@ (800265c <BSP_TS_GetState+0x148>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f107 020c 	add.w	r2, r7, #12
 8002542:	f107 010e 	add.w	r1, r7, #14
 8002546:	2082      	movs	r0, #130	@ 0x82
 8002548:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 800254a:	89bb      	ldrh	r3, [r7, #12]
 800254c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002550:	b29b      	uxth	r3, r3
 8002552:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8002554:	89bb      	ldrh	r3, [r7, #12]
 8002556:	4a42      	ldr	r2, [pc, #264]	@ (8002660 <BSP_TS_GetState+0x14c>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8002560:	8abb      	ldrh	r3, [r7, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	82bb      	strh	r3, [r7, #20]
 800256a:	e008      	b.n	800257e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800256c:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <BSP_TS_GetState+0x150>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	8aba      	ldrh	r2, [r7, #20]
 8002572:	429a      	cmp	r2, r3
 8002574:	d903      	bls.n	800257e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8002576:	4b3b      	ldr	r3, [pc, #236]	@ (8002664 <BSP_TS_GetState+0x150>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	3b01      	subs	r3, #1
 800257c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800257e:	8abb      	ldrh	r3, [r7, #20]
 8002580:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002588:	4293      	cmp	r3, r2
 800258a:	d806      	bhi.n	800259a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8002592:	330e      	adds	r3, #14
 8002594:	b29b      	uxth	r3, r3
 8002596:	81fb      	strh	r3, [r7, #14]
 8002598:	e005      	b.n	80025a6 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80025a0:	3308      	adds	r3, #8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 80025a6:	89fb      	ldrh	r3, [r7, #14]
 80025a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <BSP_TS_GetState+0x154>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 80025b2:	8afb      	ldrh	r3, [r7, #22]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	82fb      	strh	r3, [r7, #22]
 80025bc:	e008      	b.n	80025d0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80025be:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <BSP_TS_GetState+0x158>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	8afa      	ldrh	r2, [r7, #22]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d903      	bls.n	80025d0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80025c8:	4b28      	ldr	r3, [pc, #160]	@ (800266c <BSP_TS_GetState+0x158>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 80025d0:	8afb      	ldrh	r3, [r7, #22]
 80025d2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <BSP_TS_GetState+0x15c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d906      	bls.n	80025ee <BSP_TS_GetState+0xda>
 80025e0:	89fa      	ldrh	r2, [r7, #14]
 80025e2:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <BSP_TS_GetState+0x15c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	e005      	b.n	80025fa <BSP_TS_GetState+0xe6>
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <BSP_TS_GetState+0x15c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 80025fc:	89bb      	ldrh	r3, [r7, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <BSP_TS_GetState+0x160>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d906      	bls.n	8002616 <BSP_TS_GetState+0x102>
 8002608:	89ba      	ldrh	r2, [r7, #12]
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <BSP_TS_GetState+0x160>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	b29b      	uxth	r3, r3
 8002614:	e005      	b.n	8002622 <BSP_TS_GetState+0x10e>
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <BSP_TS_GetState+0x160>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	89bb      	ldrh	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	b29b      	uxth	r3, r3
 8002622:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8002624:	8a7a      	ldrh	r2, [r7, #18]
 8002626:	8a3b      	ldrh	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	2b05      	cmp	r3, #5
 800262c:	dd07      	ble.n	800263e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	461a      	mov	r2, r3
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <BSP_TS_GetState+0x15c>)
 8002634:	601a      	str	r2, [r3, #0]
      _y = y;
 8002636:	89bb      	ldrh	r3, [r7, #12]
 8002638:	461a      	mov	r2, r3
 800263a:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <BSP_TS_GetState+0x160>)
 800263c:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <BSP_TS_GetState+0x15c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <BSP_TS_GetState+0x160>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	809a      	strh	r2, [r3, #4]
  }
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200003ac 	.word	0x200003ac
 8002660:	ba2e8ba3 	.word	0xba2e8ba3
 8002664:	200003b2 	.word	0x200003b2
 8002668:	88888889 	.word	0x88888889
 800266c:	200003b0 	.word	0x200003b0
 8002670:	200003b4 	.word	0x200003b4
 8002674:	200003b8 	.word	0x200003b8

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <HAL_Init+0x40>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <HAL_Init+0x40>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <HAL_Init+0x40>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 f94f 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f002 fb19 	bl	8004ce2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f967 	bl	80029ae <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 f92f 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000090 	.word	0x20000090
 8002714:	2000008c 	.word	0x2000008c
 8002718:	20000088 	.word	0x20000088

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	2000008c 	.word	0x2000008c
 8002740:	200003bc 	.word	0x200003bc

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200003bc 	.word	0x200003bc

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	2000008c 	.word	0x2000008c

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	@ (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	@ (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	@ (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	@ 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff feb6 	bl	8002744 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fe9d 	bl	8002744 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	@ (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8bd 	bl	8002c4c <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	@ 0x40
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f874 	bl	8002be0 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	223f      	movs	r2, #63	@ 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f010803f 	.word	0xf010803f

08002b24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e050      	b.n	8002bd8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
 8002b44:	e048      	b.n	8002bd8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2221      	movs	r2, #33	@ 0x21
 8002b84:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f82a 	bl	8002be0 <DMA_CalcBaseAndBitshift>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	223f      	movs	r2, #63	@ 0x3f
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b10      	subs	r3, #16
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bfa:	4a13      	ldr	r2, [pc, #76]	@ (8002c48 <DMA_CalcBaseAndBitshift+0x68>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d909      	bls.n	8002c22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c20:	e007      	b.n	8002c32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	aaaaaaab 	.word	0xaaaaaaab
 8002c48:	080099fc 	.word	0x080099fc

08002c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d856      	bhi.n	8002d1a <DMA_CheckFifoParam+0xce>
 8002c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <DMA_CheckFifoParam+0x28>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c97 	.word	0x08002c97
 8002c7c:	08002c85 	.word	0x08002c85
 8002c80:	08002d1b 	.word	0x08002d1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d046      	beq.n	8002d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e043      	b.n	8002d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c9e:	d140      	bne.n	8002d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e03d      	b.n	8002d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cae:	d121      	bne.n	8002cf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d837      	bhi.n	8002d26 <DMA_CheckFifoParam+0xda>
 8002cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cbc <DMA_CheckFifoParam+0x70>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002ccd 	.word	0x08002ccd
 8002cc8:	08002ce5 	.word	0x08002ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e030      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d025      	beq.n	8002d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e022      	b.n	8002d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cf2:	e01c      	b.n	8002d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d903      	bls.n	8002d02 <DMA_CheckFifoParam+0xb6>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d003      	beq.n	8002d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d00:	e018      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e015      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e00b      	b.n	8002d32 <DMA_CheckFifoParam+0xe6>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e00a      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e008      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e006      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
    }
  } 
  
  return status; 
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e03b      	b.n	8002dce <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f833 	bl	8002dd6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	f023 0107 	bic.w	r1, r3, #7
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d1      	ldr	r1, [r2, #12]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af02      	add	r7, sp, #8
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_DMA2D_Start+0x1c>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e018      	b.n	8002e38 <HAL_DMA2D_Start+0x4e>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f989 	bl	8003138 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d056      	beq.n	8002f0a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7ff fc72 	bl	8002744 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e62:	e04b      	b.n	8002efc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d023      	beq.n	8002ebe <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	f043 0202 	orr.w	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2221      	movs	r2, #33	@ 0x21
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0a5      	b.n	800300a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d01a      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7ff fc3d 	bl	8002744 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <HAL_DMA2D_PollForTransfer+0x9c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2203      	movs	r2, #3
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e086      	b.n	800300a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ac      	beq.n	8002e64 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d061      	beq.n	8002ff0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7ff fc0a 	bl	8002744 <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f32:	e056      	b.n	8002fe2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02e      	beq.n	8002fa4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2229      	movs	r2, #41	@ 0x29
 8002f8e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2204      	movs	r2, #4
 8002f94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d01a      	beq.n	8002fe2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7ff fbca 	bl	8002744 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <HAL_DMA2D_PollForTransfer+0x182>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e013      	b.n	800300a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0a1      	beq.n	8002f34 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2212      	movs	r2, #18
 8002ff6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_DMA2D_ConfigLayer+0x20>
 8003030:	2302      	movs	r3, #2
 8003032:	e079      	b.n	8003128 <HAL_DMA2D_ConfigLayer+0x114>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3318      	adds	r3, #24
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800305e:	4b35      	ldr	r3, [pc, #212]	@ (8003134 <HAL_DMA2D_ConfigLayer+0x120>)
 8003060:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b0a      	cmp	r3, #10
 8003068:	d003      	beq.n	8003072 <HAL_DMA2D_ConfigLayer+0x5e>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b09      	cmp	r3, #9
 8003070:	d107      	bne.n	8003082 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e005      	b.n	800308e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d120      	bne.n	80030d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	ea02 0103 	and.w	r1, r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b0a      	cmp	r3, #10
 80030bc:	d003      	beq.n	80030c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b09      	cmp	r3, #9
 80030c4:	d127      	bne.n	8003116 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80030d4:	e01f      	b.n	8003116 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	ea02 0103 	and.w	r1, r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b0a      	cmp	r3, #10
 80030fe:	d003      	beq.n	8003108 <HAL_DMA2D_ConfigLayer+0xf4>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b09      	cmp	r3, #9
 8003106:	d106      	bne.n	8003116 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003114:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	ff03000f 	.word	0xff03000f

08003138 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003138:	b480      	push	{r7}
 800313a:	b08b      	sub	sp, #44	@ 0x2c
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	041a      	lsls	r2, r3, #16
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	431a      	orrs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003170:	d174      	bne.n	800325c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003178:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003180:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003188:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d108      	bne.n	80031aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	431a      	orrs	r2, r3
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a8:	e053      	b.n	8003252 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d106      	bne.n	80031c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031be:	e048      	b.n	8003252 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d111      	bne.n	80031ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	0cdb      	lsrs	r3, r3, #19
 80031cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	0a9b      	lsrs	r3, r3, #10
 80031d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	02db      	lsls	r3, r3, #11
 80031e2:	4313      	orrs	r3, r2
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ea:	e032      	b.n	8003252 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d117      	bne.n	8003224 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	0fdb      	lsrs	r3, r3, #31
 80031f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	0cdb      	lsrs	r3, r3, #19
 80031fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	0adb      	lsrs	r3, r3, #11
 8003204:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	431a      	orrs	r2, r3
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	03db      	lsls	r3, r3, #15
 800321a:	4313      	orrs	r3, r2
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
 8003222:	e016      	b.n	8003252 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	0f1b      	lsrs	r3, r3, #28
 8003228:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	0d1b      	lsrs	r3, r3, #20
 800322e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	0b1b      	lsrs	r3, r3, #12
 8003234:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	011a      	lsls	r2, r3, #4
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	431a      	orrs	r2, r3
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	031b      	lsls	r3, r3, #12
 800324a:	4313      	orrs	r3, r2
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800325a:	e003      	b.n	8003264 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	60da      	str	r2, [r3, #12]
}
 8003264:	bf00      	nop
 8003266:	372c      	adds	r7, #44	@ 0x2c
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e177      	b.n	800357c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800328c:	2201      	movs	r2, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f040 8166 	bne.w	8003576 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d005      	beq.n	80032c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d130      	bne.n	8003324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f8:	2201      	movs	r2, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0201 	and.w	r2, r3, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b03      	cmp	r3, #3
 800332e:	d017      	beq.n	8003360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d123      	bne.n	80033b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0203 	and.w	r2, r3, #3
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80c0 	beq.w	8003576 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <HAL_GPIO_Init+0x324>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	4a65      	ldr	r2, [pc, #404]	@ (8003594 <HAL_GPIO_Init+0x324>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003404:	6453      	str	r3, [r2, #68]	@ 0x44
 8003406:	4b63      	ldr	r3, [pc, #396]	@ (8003594 <HAL_GPIO_Init+0x324>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003412:	4a61      	ldr	r2, [pc, #388]	@ (8003598 <HAL_GPIO_Init+0x328>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a58      	ldr	r2, [pc, #352]	@ (800359c <HAL_GPIO_Init+0x32c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d037      	beq.n	80034ae <HAL_GPIO_Init+0x23e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a57      	ldr	r2, [pc, #348]	@ (80035a0 <HAL_GPIO_Init+0x330>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_GPIO_Init+0x23a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a56      	ldr	r2, [pc, #344]	@ (80035a4 <HAL_GPIO_Init+0x334>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02b      	beq.n	80034a6 <HAL_GPIO_Init+0x236>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a55      	ldr	r2, [pc, #340]	@ (80035a8 <HAL_GPIO_Init+0x338>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d025      	beq.n	80034a2 <HAL_GPIO_Init+0x232>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a54      	ldr	r2, [pc, #336]	@ (80035ac <HAL_GPIO_Init+0x33c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01f      	beq.n	800349e <HAL_GPIO_Init+0x22e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a53      	ldr	r2, [pc, #332]	@ (80035b0 <HAL_GPIO_Init+0x340>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d019      	beq.n	800349a <HAL_GPIO_Init+0x22a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	@ (80035b4 <HAL_GPIO_Init+0x344>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_Init+0x226>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a51      	ldr	r2, [pc, #324]	@ (80035b8 <HAL_GPIO_Init+0x348>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00d      	beq.n	8003492 <HAL_GPIO_Init+0x222>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a50      	ldr	r2, [pc, #320]	@ (80035bc <HAL_GPIO_Init+0x34c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <HAL_GPIO_Init+0x21e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4f      	ldr	r2, [pc, #316]	@ (80035c0 <HAL_GPIO_Init+0x350>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_GPIO_Init+0x21a>
 8003486:	2309      	movs	r3, #9
 8003488:	e012      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800348a:	230a      	movs	r3, #10
 800348c:	e010      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800348e:	2308      	movs	r3, #8
 8003490:	e00e      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 8003492:	2307      	movs	r3, #7
 8003494:	e00c      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 8003496:	2306      	movs	r3, #6
 8003498:	e00a      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800349a:	2305      	movs	r3, #5
 800349c:	e008      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800349e:	2304      	movs	r3, #4
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e004      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e002      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034ae:	2300      	movs	r3, #0
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	f002 0203 	and.w	r2, r2, #3
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	4093      	lsls	r3, r2
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c0:	4935      	ldr	r1, [pc, #212]	@ (8003598 <HAL_GPIO_Init+0x328>)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ce:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f2:	4a34      	ldr	r2, [pc, #208]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f8:	4b32      	ldr	r3, [pc, #200]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800351c:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003522:	4b28      	ldr	r3, [pc, #160]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003546:	4a1f      	ldr	r2, [pc, #124]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354c:	4b1d      	ldr	r3, [pc, #116]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <HAL_GPIO_Init+0x354>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	f67f ae84 	bls.w	800328c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40013800 	.word	0x40013800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020400 	.word	0x40020400
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40021400 	.word	0x40021400
 80035b4:	40021800 	.word	0x40021800
 80035b8:	40021c00 	.word	0x40021c00
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40022400 	.word	0x40022400
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003612:	4a05      	ldr	r2, [pc, #20]	@ (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f806 	bl	800362c <HAL_GPIO_EXTI_Callback>
  }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e12b      	b.n	80038ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f95d 	bl	800392a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	@ 0x24
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a8:	f001 ffe2 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 80036ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a81      	ldr	r2, [pc, #516]	@ (80038b8 <HAL_I2C_Init+0x274>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d807      	bhi.n	80036c8 <HAL_I2C_Init+0x84>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a80      	ldr	r2, [pc, #512]	@ (80038bc <HAL_I2C_Init+0x278>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e006      	b.n	80036d6 <HAL_I2C_Init+0x92>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a7d      	ldr	r2, [pc, #500]	@ (80038c0 <HAL_I2C_Init+0x27c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bf94      	ite	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	2300      	movhi	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0e7      	b.n	80038ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a78      	ldr	r2, [pc, #480]	@ (80038c4 <HAL_I2C_Init+0x280>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0c9b      	lsrs	r3, r3, #18
 80036e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a6a      	ldr	r2, [pc, #424]	@ (80038b8 <HAL_I2C_Init+0x274>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <HAL_I2C_Init+0xd4>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	e009      	b.n	800372c <HAL_I2C_Init+0xe8>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	4a69      	ldr	r2, [pc, #420]	@ (80038c8 <HAL_I2C_Init+0x284>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	3301      	adds	r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	430b      	orrs	r3, r1
 8003732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800373e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	495c      	ldr	r1, [pc, #368]	@ (80038b8 <HAL_I2C_Init+0x274>)
 8003748:	428b      	cmp	r3, r1
 800374a:	d819      	bhi.n	8003780 <HAL_I2C_Init+0x13c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e59      	subs	r1, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fbb1 f3f3 	udiv	r3, r1, r3
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003760:	400b      	ands	r3, r1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_I2C_Init+0x138>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1e59      	subs	r1, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fbb1 f3f3 	udiv	r3, r1, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	e051      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 800377c:	2304      	movs	r3, #4
 800377e:	e04f      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d111      	bne.n	80037ac <HAL_I2C_Init+0x168>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e012      	b.n	80037d2 <HAL_I2C_Init+0x18e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x196>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_I2C_Init+0x1bc>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e58      	subs	r0, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	440b      	add	r3, r1
 80037f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fe:	e00f      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	0099      	lsls	r1, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	6809      	ldr	r1, [r1, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800384e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6911      	ldr	r1, [r2, #16]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68d2      	ldr	r2, [r2, #12]
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	000186a0 	.word	0x000186a0
 80038bc:	001e847f 	.word	0x001e847f
 80038c0:	003d08ff 	.word	0x003d08ff
 80038c4:	431bde83 	.word	0x431bde83
 80038c8:	10624dd3 	.word	0x10624dd3

080038cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e021      	b.n	8003922 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2224      	movs	r2, #36	@ 0x24
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f821 	bl	800393e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	460b      	mov	r3, r1
 8003968:	813b      	strh	r3, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800396e:	f7fe fee9 	bl	8002744 <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	f040 80d9 	bne.w	8003b34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2319      	movs	r3, #25
 8003988:	2201      	movs	r2, #1
 800398a:	496d      	ldr	r1, [pc, #436]	@ (8003b40 <HAL_I2C_Mem_Write+0x1ec>)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fc99 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
 800399a:	e0cc      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Mem_Write+0x56>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0c5      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d007      	beq.n	80039d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2221      	movs	r2, #33	@ 0x21
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2240      	movs	r2, #64	@ 0x40
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8003b44 <HAL_I2C_Mem_Write+0x1f0>)
 8003a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a12:	88f8      	ldrh	r0, [r7, #6]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	8979      	ldrh	r1, [r7, #10]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	4603      	mov	r3, r0
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fad0 	bl	8003fc8 <I2C_RequestMemoryWrite>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d052      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e081      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fd5e 	bl	80044f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d107      	bne.n	8003a5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_I2C_Mem_Write+0x180>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1aa      	bne.n	8003a32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fd51 	bl	8004588 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d107      	bne.n	8003b04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e016      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00100002 	.word	0x00100002
 8003b44:	ffff0000 	.word	0xffff0000

08003b48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	@ 0x30
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	813b      	strh	r3, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b62:	f7fe fdef 	bl	8002744 <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	f040 8214 	bne.w	8003f9e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	497b      	ldr	r1, [pc, #492]	@ (8003d6c <HAL_I2C_Mem_Read+0x224>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb9f 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e207      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Mem_Read+0x56>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e200      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d007      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2222      	movs	r2, #34	@ 0x22
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2240      	movs	r2, #64	@ 0x40
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a5b      	ldr	r2, [pc, #364]	@ (8003d70 <HAL_I2C_Mem_Read+0x228>)
 8003c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c06:	88f8      	ldrh	r0, [r7, #6]
 8003c08:	893a      	ldrh	r2, [r7, #8]
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4603      	mov	r3, r0
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa6c 	bl	80040f4 <I2C_RequestMemoryRead>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1bc      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e190      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d11b      	bne.n	8003c96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e170      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	e150      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cec:	e144      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	f200 80f1 	bhi.w	8003eda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d123      	bne.n	8003d48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fc87 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e145      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d46:	e117      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d14e      	bne.n	8003dee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d56:	2200      	movs	r2, #0
 8003d58:	4906      	ldr	r1, [pc, #24]	@ (8003d74 <HAL_I2C_Mem_Read+0x22c>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fab2 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e11a      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
 8003d6a:	bf00      	nop
 8003d6c:	00100002 	.word	0x00100002
 8003d70:	ffff0000 	.word	0xffff0000
 8003d74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dec:	e0c4      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	2200      	movs	r2, #0
 8003df6:	496c      	ldr	r1, [pc, #432]	@ (8003fa8 <HAL_I2C_Mem_Read+0x460>)
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa63 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0cb      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	2200      	movs	r2, #0
 8003e52:	4955      	ldr	r1, [pc, #340]	@ (8003fa8 <HAL_I2C_Mem_Read+0x460>)
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fa35 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e09d      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ed8:	e04e      	b.n	8003f78 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003edc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fb9a 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e058      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d124      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d107      	bne.n	8003f46 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f aeb6 	bne.w	8003cee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3728      	adds	r7, #40	@ 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	00010004 	.word	0x00010004

08003fac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fba:	b2db      	uxtb	r3, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f960 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004018:	d103      	bne.n	8004022 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004020:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e05f      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	492d      	ldr	r1, [pc, #180]	@ (80040f0 <I2C_RequestMemoryWrite+0x128>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f9bb 	bl	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e04c      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004064:	6a39      	ldr	r1, [r7, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa46 	bl	80044f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	2b04      	cmp	r3, #4
 8004078:	d107      	bne.n	800408a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e02b      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e021      	b.n	80040e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fa20 	bl	80044f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e005      	b.n	80040e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040da:	893b      	ldrh	r3, [r7, #8]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800411c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	2200      	movs	r2, #0
 8004136:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8c2 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004154:	d103      	bne.n	800415e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0aa      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	4952      	ldr	r1, [pc, #328]	@ (80042c0 <I2C_RequestMemoryRead+0x1cc>)
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f91d 	bl	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e097      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f9a8 	bl	80044f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d107      	bne.n	80041c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e076      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d105      	bne.n	80041dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041d0:	893b      	ldrh	r3, [r7, #8]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]
 80041da:	e021      	b.n	8004220 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ec:	6a39      	ldr	r1, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f982 	bl	80044f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d107      	bne.n	8004212 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e050      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004216:	893b      	ldrh	r3, [r7, #8]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004222:	6a39      	ldr	r1, [r7, #32]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f967 	bl	80044f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	2b04      	cmp	r3, #4
 8004236:	d107      	bne.n	8004248 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004246:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e035      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800425a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	2200      	movs	r2, #0
 8004264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f82b 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004282:	d103      	bne.n	800428c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e013      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004290:	897b      	ldrh	r3, [r7, #10]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	6a3a      	ldr	r2, [r7, #32]
 80042a4:	4906      	ldr	r1, [pc, #24]	@ (80042c0 <I2C_RequestMemoryRead+0x1cc>)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f886 	bl	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	00010002 	.word	0x00010002

080042c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d4:	e048      	b.n	8004368 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d044      	beq.n	8004368 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fe fa31 	bl	8002744 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d139      	bne.n	8004368 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10d      	bne.n	800431a <I2C_WaitOnFlagUntilTimeout+0x56>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	43da      	mvns	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	e00c      	b.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x70>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	429a      	cmp	r2, r3
 8004338:	d116      	bne.n	8004368 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e023      	b.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10d      	bne.n	800438e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	43da      	mvns	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	e00c      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	43da      	mvns	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d093      	beq.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c6:	e071      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d6:	d123      	bne.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	f043 0204 	orr.w	r2, r3, #4
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e067      	b.n	80044f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d041      	beq.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004428:	f7fe f98c 	bl	8002744 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d136      	bne.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10c      	bne.n	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e00b      	b.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	43da      	mvns	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e021      	b.n	80044f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10c      	bne.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	43da      	mvns	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e00b      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	43da      	mvns	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f47f af6d 	bne.w	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004504:	e034      	b.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f8e3 	bl	80046d2 <I2C_IsAcknowledgeFailed>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e034      	b.n	8004580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d028      	beq.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7fe f911 	bl	8002744 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11d      	bne.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453e:	2b80      	cmp	r3, #128	@ 0x80
 8004540:	d016      	beq.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e007      	b.n	8004580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457a:	2b80      	cmp	r3, #128	@ 0x80
 800457c:	d1c3      	bne.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004594:	e034      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f89b 	bl	80046d2 <I2C_IsAcknowledgeFailed>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e034      	b.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d028      	beq.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fe f8c9 	bl	8002744 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d11d      	bne.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d016      	beq.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e007      	b.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d1c3      	bne.n	8004596 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004624:	e049      	b.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b10      	cmp	r3, #16
 8004632:	d119      	bne.n	8004668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0210 	mvn.w	r2, #16
 800463c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e030      	b.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fe f86c 	bl	8002744 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11d      	bne.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d016      	beq.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f043 0220 	orr.w	r2, r3, #32
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e007      	b.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d1ae      	bne.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e8:	d11b      	bne.n	8004722 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0bf      	b.n	80048c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8ba 	bl	80048d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004772:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004788:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6899      	ldr	r1, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <HAL_LTDC_Init+0x19c>)
 80047a4:	400b      	ands	r3, r1
 80047a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68d9      	ldr	r1, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <HAL_LTDC_Init+0x19c>)
 80047d2:	400b      	ands	r3, r1
 80047d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68d9      	ldr	r1, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6919      	ldr	r1, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b33      	ldr	r3, [pc, #204]	@ (80048cc <HAL_LTDC_Init+0x19c>)
 8004800:	400b      	ands	r3, r1
 8004802:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6919      	ldr	r1, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6959      	ldr	r1, [r3, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <HAL_LTDC_Init+0x19c>)
 800482e:	400b      	ands	r3, r1
 8004830:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6959      	ldr	r1, [r3, #20]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004872:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0206 	orr.w	r2, r2, #6
 800489e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	f000f800 	.word	0xf000f800

080048d0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048e4:	b5b0      	push	{r4, r5, r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_LTDC_ConfigLayer+0x1a>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e02c      	b.n	8004958 <HAL_LTDC_ConfigLayer+0x74>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2134      	movs	r1, #52	@ 0x34
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4614      	mov	r4, r2
 8004922:	461d      	mov	r5, r3
 8004924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800492c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f83b 	bl	80049b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bdb0      	pop	{r4, r5, r7, pc}

08004960 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_LTDC_EnableDither+0x16>
 8004972:	2302      	movs	r3, #2
 8004974:	e016      	b.n	80049a4 <HAL_LTDC_EnableDither+0x44>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004986:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <HAL_LTDC_EnableDither+0x50>)
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	4a09      	ldr	r2, [pc, #36]	@ (80049b0 <HAL_LTDC_EnableDither+0x50>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004990:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40016800 	.word	0x40016800

080049b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	@ 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d0:	4413      	add	r3, r2
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	01db      	lsls	r3, r3, #7
 80049e0:	4413      	add	r3, r2
 80049e2:	3384      	adds	r3, #132	@ 0x84
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	4611      	mov	r1, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	01d2      	lsls	r2, r2, #7
 80049f0:	440a      	add	r2, r1
 80049f2:	3284      	adds	r2, #132	@ 0x84
 80049f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80049f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a0a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a0c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	01db      	lsls	r3, r3, #7
 8004a18:	440b      	add	r3, r1
 8004a1a:	3384      	adds	r3, #132	@ 0x84
 8004a1c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a22:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a32:	4413      	add	r3, r2
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	01db      	lsls	r3, r3, #7
 8004a42:	4413      	add	r3, r2
 8004a44:	3384      	adds	r3, #132	@ 0x84
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	01d2      	lsls	r2, r2, #7
 8004a52:	440a      	add	r2, r1
 8004a54:	3284      	adds	r2, #132	@ 0x84
 8004a56:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a5a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a6a:	4413      	add	r3, r2
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4619      	mov	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	01db      	lsls	r3, r3, #7
 8004a78:	440b      	add	r3, r1
 8004a7a:	3384      	adds	r3, #132	@ 0x84
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	@ 0x84
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	01d2      	lsls	r2, r2, #7
 8004a9e:	440a      	add	r2, r1
 8004aa0:	3284      	adds	r2, #132	@ 0x84
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3384      	adds	r3, #132	@ 0x84
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	01db      	lsls	r3, r3, #7
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3384      	adds	r3, #132	@ 0x84
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	4413      	add	r3, r2
 8004af6:	3384      	adds	r3, #132	@ 0x84
 8004af8:	461a      	mov	r2, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b04:	461a      	mov	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	01db      	lsls	r3, r3, #7
 8004b18:	440b      	add	r3, r1
 8004b1a:	3384      	adds	r3, #132	@ 0x84
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	4413      	add	r3, r2
 8004b30:	3384      	adds	r3, #132	@ 0x84
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	4611      	mov	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	01d2      	lsls	r2, r2, #7
 8004b3e:	440a      	add	r2, r1
 8004b40:	3284      	adds	r2, #132	@ 0x84
 8004b42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	01db      	lsls	r3, r3, #7
 8004b52:	4413      	add	r3, r2
 8004b54:	3384      	adds	r3, #132	@ 0x84
 8004b56:	461a      	mov	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4413      	add	r3, r2
 8004b6a:	3384      	adds	r3, #132	@ 0x84
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	4611      	mov	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	01d2      	lsls	r2, r2, #7
 8004b78:	440a      	add	r2, r1
 8004b7a:	3284      	adds	r2, #132	@ 0x84
 8004b7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b80:	f023 0307 	bic.w	r3, r3, #7
 8004b84:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	6809      	ldr	r1, [r1, #0]
 8004b92:	4608      	mov	r0, r1
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	01c9      	lsls	r1, r1, #7
 8004b98:	4401      	add	r1, r0
 8004b9a:	3184      	adds	r1, #132	@ 0x84
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	3384      	adds	r3, #132	@ 0x84
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	01db      	lsls	r3, r3, #7
 8004bba:	4413      	add	r3, r2
 8004bbc:	3384      	adds	r3, #132	@ 0x84
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	01db      	lsls	r3, r3, #7
 8004bce:	4413      	add	r3, r2
 8004bd0:	3384      	adds	r3, #132	@ 0x84
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004be2:	2304      	movs	r3, #4
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	e01b      	b.n	8004c20 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e014      	b.n	8004c20 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d00b      	beq.n	8004c16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d007      	beq.n	8004c16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d003      	beq.n	8004c16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c12:	2b07      	cmp	r3, #7
 8004c14:	d102      	bne.n	8004c1c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c16:	2302      	movs	r3, #2
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e001      	b.n	8004c20 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	01db      	lsls	r3, r3, #7
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3384      	adds	r3, #132	@ 0x84
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	4611      	mov	r1, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	01d2      	lsls	r2, r2, #7
 8004c3a:	440a      	add	r2, r1
 8004c3c:	3284      	adds	r2, #132	@ 0x84
 8004c3e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004c42:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1acb      	subs	r3, r1, r3
 8004c5a:	69f9      	ldr	r1, [r7, #28]
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	6809      	ldr	r1, [r1, #0]
 8004c66:	4608      	mov	r0, r1
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	01c9      	lsls	r1, r1, #7
 8004c6c:	4401      	add	r1, r0
 8004c6e:	3184      	adds	r1, #132	@ 0x84
 8004c70:	4313      	orrs	r3, r2
 8004c72:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	01db      	lsls	r3, r3, #7
 8004c7e:	4413      	add	r3, r2
 8004c80:	3384      	adds	r3, #132	@ 0x84
 8004c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	01d2      	lsls	r2, r2, #7
 8004c8e:	440a      	add	r2, r1
 8004c90:	3284      	adds	r2, #132	@ 0x84
 8004c92:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3384      	adds	r3, #132	@ 0x84
 8004caa:	461a      	mov	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	01db      	lsls	r3, r3, #7
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3384      	adds	r3, #132	@ 0x84
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	01d2      	lsls	r2, r2, #7
 8004ccc:	440a      	add	r2, r1
 8004cce:	3284      	adds	r2, #132	@ 0x84
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6013      	str	r3, [r2, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	@ 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	af00      	add	r7, sp, #0

}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4b20      	ldr	r3, [pc, #128]	@ (8004d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	4a1f      	ldr	r2, [pc, #124]	@ (8004d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d16:	4b1b      	ldr	r3, [pc, #108]	@ (8004d84 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d1c:	f7fd fd12 	bl	8002744 <HAL_GetTick>
 8004d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d22:	e009      	b.n	8004d38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d24:	f7fd fd0e 	bl	8002744 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d32:	d901      	bls.n	8004d38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e01f      	b.n	8004d78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d38:	4b13      	ldr	r3, [pc, #76]	@ (8004d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d1ee      	bne.n	8004d24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d46:	4b11      	ldr	r3, [pc, #68]	@ (8004d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d4c:	f7fd fcfa 	bl	8002744 <HAL_GetTick>
 8004d50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d52:	e009      	b.n	8004d68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d54:	f7fd fcf6 	bl	8002744 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d62:	d901      	bls.n	8004d68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e007      	b.n	8004d78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d68:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d74:	d1ee      	bne.n	8004d54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	420e0040 	.word	0x420e0040
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	420e0044 	.word	0x420e0044

08004d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e267      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d075      	beq.n	8004e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dae:	4b88      	ldr	r3, [pc, #544]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d00c      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dba:	4b85      	ldr	r3, [pc, #532]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d112      	bne.n	8004dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc6:	4b82      	ldr	r3, [pc, #520]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d05b      	beq.n	8004e98 <HAL_RCC_OscConfig+0x108>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d157      	bne.n	8004e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e242      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df4:	d106      	bne.n	8004e04 <HAL_RCC_OscConfig+0x74>
 8004df6:	4b76      	ldr	r3, [pc, #472]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a75      	ldr	r2, [pc, #468]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e01d      	b.n	8004e40 <HAL_RCC_OscConfig+0xb0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x98>
 8004e0e:	4b70      	ldr	r3, [pc, #448]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6f      	ldr	r2, [pc, #444]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6c      	ldr	r2, [pc, #432]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0xb0>
 8004e28:	4b69      	ldr	r3, [pc, #420]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a68      	ldr	r2, [pc, #416]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b66      	ldr	r3, [pc, #408]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a65      	ldr	r2, [pc, #404]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fd fc7c 	bl	8002744 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fd fc78 	bl	8002744 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e207      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0xc0>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fc68 	bl	8002744 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e78:	f7fd fc64 	bl	8002744 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	@ 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e1f3      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	4b51      	ldr	r3, [pc, #324]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0xe8>
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb2:	4b47      	ldr	r3, [pc, #284]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ebe:	4b44      	ldr	r3, [pc, #272]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x152>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e1c7      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4937      	ldr	r1, [pc, #220]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	e03a      	b.n	8004f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f00:	4b34      	ldr	r3, [pc, #208]	@ (8004fd4 <HAL_RCC_OscConfig+0x244>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd fc1d 	bl	8002744 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7fd fc19 	bl	8002744 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1a8      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f20:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4925      	ldr	r1, [pc, #148]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
 8004f40:	e015      	b.n	8004f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f42:	4b24      	ldr	r3, [pc, #144]	@ (8004fd4 <HAL_RCC_OscConfig+0x244>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd fbfc 	bl	8002744 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fd fbf8 	bl	8002744 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e187      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d036      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f82:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <HAL_RCC_OscConfig+0x248>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fbdc 	bl	8002744 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fd fbd8 	bl	8002744 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e167      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x200>
 8004fae:	e01b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <HAL_RCC_OscConfig+0x248>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb6:	f7fd fbc5 	bl	8002744 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	e00e      	b.n	8004fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fd fbc1 	bl	8002744 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d907      	bls.n	8004fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e150      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	42470000 	.word	0x42470000
 8004fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fdc:	4b88      	ldr	r3, [pc, #544]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8004fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1ea      	bne.n	8004fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8097 	beq.w	8005124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffa:	4b81      	ldr	r3, [pc, #516]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	4b7d      	ldr	r3, [pc, #500]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	4a7c      	ldr	r2, [pc, #496]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005014:	6413      	str	r3, [r2, #64]	@ 0x40
 8005016:	4b7a      	ldr	r3, [pc, #488]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	4b77      	ldr	r3, [pc, #476]	@ (8005204 <HAL_RCC_OscConfig+0x474>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d118      	bne.n	8005064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005032:	4b74      	ldr	r3, [pc, #464]	@ (8005204 <HAL_RCC_OscConfig+0x474>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a73      	ldr	r2, [pc, #460]	@ (8005204 <HAL_RCC_OscConfig+0x474>)
 8005038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503e:	f7fd fb81 	bl	8002744 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005046:	f7fd fb7d 	bl	8002744 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e10c      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005058:	4b6a      	ldr	r3, [pc, #424]	@ (8005204 <HAL_RCC_OscConfig+0x474>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d106      	bne.n	800507a <HAL_RCC_OscConfig+0x2ea>
 800506c:	4b64      	ldr	r3, [pc, #400]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005070:	4a63      	ldr	r2, [pc, #396]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6713      	str	r3, [r2, #112]	@ 0x70
 8005078:	e01c      	b.n	80050b4 <HAL_RCC_OscConfig+0x324>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0x30c>
 8005082:	4b5f      	ldr	r3, [pc, #380]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	4a5e      	ldr	r2, [pc, #376]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	6713      	str	r3, [r2, #112]	@ 0x70
 800508e:	4b5c      	ldr	r3, [pc, #368]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	4a5b      	ldr	r2, [pc, #364]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6713      	str	r3, [r2, #112]	@ 0x70
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0x324>
 800509c:	4b58      	ldr	r3, [pc, #352]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a0:	4a57      	ldr	r2, [pc, #348]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a8:	4b55      	ldr	r3, [pc, #340]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ac:	4a54      	ldr	r2, [pc, #336]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fd fb42 	bl	8002744 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c2:	e00a      	b.n	80050da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fd fb3e 	bl	8002744 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e0cb      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050da:	4b49      	ldr	r3, [pc, #292]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ee      	beq.n	80050c4 <HAL_RCC_OscConfig+0x334>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e8:	f7fd fb2c 	bl	8002744 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd fb28 	bl	8002744 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0b5      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005106:	4b3e      	ldr	r3, [pc, #248]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ee      	bne.n	80050f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d105      	bne.n	8005124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005118:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	4a38      	ldr	r2, [pc, #224]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 800511e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005122:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80a1 	beq.w	8005270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800512e:	4b34      	ldr	r3, [pc, #208]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b08      	cmp	r3, #8
 8005138:	d05c      	beq.n	80051f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d141      	bne.n	80051c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <HAL_RCC_OscConfig+0x478>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fd fafc 	bl	8002744 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005150:	f7fd faf8 	bl	8002744 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e087      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	491b      	ldr	r1, [pc, #108]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <HAL_RCC_OscConfig+0x478>)
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd fad1 	bl	8002744 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fd facd 	bl	8002744 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e05c      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x416>
 80051c4:	e054      	b.n	8005270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <HAL_RCC_OscConfig+0x478>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd faba 	bl	8002744 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd fab6 	bl	8002744 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e045      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <HAL_RCC_OscConfig+0x470>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x444>
 80051f2:	e03d      	b.n	8005270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e038      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
 8005200:	40023800 	.word	0x40023800
 8005204:	40007000 	.word	0x40007000
 8005208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800520c:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x4ec>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d028      	beq.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d121      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d11a      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	3b01      	subs	r3, #1
 8005256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d107      	bne.n	800526c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800

08005280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0cc      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005294:	4b68      	ldr	r3, [pc, #416]	@ (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d90c      	bls.n	80052bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4b65      	ldr	r3, [pc, #404]	@ (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	4b63      	ldr	r3, [pc, #396]	@ (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0b8      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d020      	beq.n	800530a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d4:	4b59      	ldr	r3, [pc, #356]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a58      	ldr	r2, [pc, #352]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052ec:	4b53      	ldr	r3, [pc, #332]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a52      	ldr	r2, [pc, #328]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f8:	4b50      	ldr	r3, [pc, #320]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	494d      	ldr	r1, [pc, #308]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d044      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d107      	bne.n	800532e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531e:	4b47      	ldr	r3, [pc, #284]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d119      	bne.n	800535e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e07f      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d003      	beq.n	800533e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533a:	2b03      	cmp	r3, #3
 800533c:	d107      	bne.n	800534e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533e:	4b3f      	ldr	r3, [pc, #252]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06f      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534e:	4b3b      	ldr	r3, [pc, #236]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e067      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800535e:	4b37      	ldr	r3, [pc, #220]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f023 0203 	bic.w	r2, r3, #3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4934      	ldr	r1, [pc, #208]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	4313      	orrs	r3, r2
 800536e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005370:	f7fd f9e8 	bl	8002744 <HAL_GetTick>
 8005374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	e00a      	b.n	800538e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fd f9e4 	bl	8002744 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e04f      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	4b2b      	ldr	r3, [pc, #172]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 020c 	and.w	r2, r3, #12
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	429a      	cmp	r2, r3
 800539e:	d1eb      	bne.n	8005378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a0:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d20c      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ae:	4b22      	ldr	r3, [pc, #136]	@ (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b6:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e032      	b.n	800542e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d4:	4b19      	ldr	r3, [pc, #100]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4916      	ldr	r1, [pc, #88]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f2:	4b12      	ldr	r3, [pc, #72]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	490e      	ldr	r1, [pc, #56]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005406:	f000 f821 	bl	800544c <HAL_RCC_GetSysClockFreq>
 800540a:	4602      	mov	r2, r0
 800540c:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	490a      	ldr	r1, [pc, #40]	@ (8005440 <HAL_RCC_ClockConfig+0x1c0>)
 8005418:	5ccb      	ldrb	r3, [r1, r3]
 800541a:	fa22 f303 	lsr.w	r3, r2, r3
 800541e:	4a09      	ldr	r2, [pc, #36]	@ (8005444 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005422:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7fd f948 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023c00 	.word	0x40023c00
 800543c:	40023800 	.word	0x40023800
 8005440:	08009a04 	.word	0x08009a04
 8005444:	20000090 	.word	0x20000090
 8005448:	20000088 	.word	0x20000088

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b094      	sub	sp, #80	@ 0x50
 8005452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	647b      	str	r3, [r7, #68]	@ 0x44
 8005458:	2300      	movs	r3, #0
 800545a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800545c:	2300      	movs	r3, #0
 800545e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005464:	4b79      	ldr	r3, [pc, #484]	@ (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b08      	cmp	r3, #8
 800546e:	d00d      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x40>
 8005470:	2b08      	cmp	r3, #8
 8005472:	f200 80e1 	bhi.w	8005638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x34>
 800547a:	2b04      	cmp	r3, #4
 800547c:	d003      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0x3a>
 800547e:	e0db      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005480:	4b73      	ldr	r3, [pc, #460]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x204>)
 8005482:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005484:	e0db      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005486:	4b73      	ldr	r3, [pc, #460]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x208>)
 8005488:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800548a:	e0d8      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800548c:	4b6f      	ldr	r3, [pc, #444]	@ (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005494:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005496:	4b6d      	ldr	r3, [pc, #436]	@ (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d063      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a2:	4b6a      	ldr	r3, [pc, #424]	@ (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	099b      	lsrs	r3, r3, #6
 80054a8:	2200      	movs	r2, #0
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f04f 0100 	mov.w	r1, #0
 80054ca:	0159      	lsls	r1, r3, #5
 80054cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054d0:	0150      	lsls	r0, r2, #5
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4621      	mov	r1, r4
 80054d8:	1a51      	subs	r1, r2, r1
 80054da:	6139      	str	r1, [r7, #16]
 80054dc:	4629      	mov	r1, r5
 80054de:	eb63 0301 	sbc.w	r3, r3, r1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f0:	4659      	mov	r1, fp
 80054f2:	018b      	lsls	r3, r1, #6
 80054f4:	4651      	mov	r1, sl
 80054f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054fa:	4651      	mov	r1, sl
 80054fc:	018a      	lsls	r2, r1, #6
 80054fe:	4651      	mov	r1, sl
 8005500:	ebb2 0801 	subs.w	r8, r2, r1
 8005504:	4659      	mov	r1, fp
 8005506:	eb63 0901 	sbc.w	r9, r3, r1
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800551a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800551e:	4690      	mov	r8, r2
 8005520:	4699      	mov	r9, r3
 8005522:	4623      	mov	r3, r4
 8005524:	eb18 0303 	adds.w	r3, r8, r3
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	462b      	mov	r3, r5
 800552c:	eb49 0303 	adc.w	r3, r9, r3
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800553e:	4629      	mov	r1, r5
 8005540:	024b      	lsls	r3, r1, #9
 8005542:	4621      	mov	r1, r4
 8005544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005548:	4621      	mov	r1, r4
 800554a:	024a      	lsls	r2, r1, #9
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005552:	2200      	movs	r2, #0
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005556:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800555c:	f7fa fe98 	bl	8000290 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4613      	mov	r3, r2
 8005566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005568:	e058      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b38      	ldr	r3, [pc, #224]	@ (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	2200      	movs	r2, #0
 8005572:	4618      	mov	r0, r3
 8005574:	4611      	mov	r1, r2
 8005576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	2300      	movs	r3, #0
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005584:	4642      	mov	r2, r8
 8005586:	464b      	mov	r3, r9
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	0159      	lsls	r1, r3, #5
 8005592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005596:	0150      	lsls	r0, r2, #5
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4641      	mov	r1, r8
 800559e:	ebb2 0a01 	subs.w	sl, r2, r1
 80055a2:	4649      	mov	r1, r9
 80055a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055bc:	ebb2 040a 	subs.w	r4, r2, sl
 80055c0:	eb63 050b 	sbc.w	r5, r3, fp
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	00eb      	lsls	r3, r5, #3
 80055ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d2:	00e2      	lsls	r2, r4, #3
 80055d4:	4614      	mov	r4, r2
 80055d6:	461d      	mov	r5, r3
 80055d8:	4643      	mov	r3, r8
 80055da:	18e3      	adds	r3, r4, r3
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	464b      	mov	r3, r9
 80055e0:	eb45 0303 	adc.w	r3, r5, r3
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055f2:	4629      	mov	r1, r5
 80055f4:	028b      	lsls	r3, r1, #10
 80055f6:	4621      	mov	r1, r4
 80055f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055fc:	4621      	mov	r1, r4
 80055fe:	028a      	lsls	r2, r1, #10
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005606:	2200      	movs	r2, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005610:	f7fa fe3e 	bl	8000290 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800561c:	4b0b      	ldr	r3, [pc, #44]	@ (800564c <HAL_RCC_GetSysClockFreq+0x200>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	3301      	adds	r3, #1
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800562c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800562e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005636:	e002      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x204>)
 800563a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800563c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005640:	4618      	mov	r0, r3
 8005642:	3750      	adds	r7, #80	@ 0x50
 8005644:	46bd      	mov	sp, r7
 8005646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	00f42400 	.word	0x00f42400
 8005654:	007a1200 	.word	0x007a1200

08005658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800565c:	4b03      	ldr	r3, [pc, #12]	@ (800566c <HAL_RCC_GetHCLKFreq+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000090 	.word	0x20000090

08005670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005674:	f7ff fff0 	bl	8005658 <HAL_RCC_GetHCLKFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	0a9b      	lsrs	r3, r3, #10
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	4903      	ldr	r1, [pc, #12]	@ (8005694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800
 8005694:	08009a14 	.word	0x08009a14

08005698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d075      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056cc:	4b91      	ldr	r3, [pc, #580]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056d2:	f7fd f837 	bl	8002744 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056da:	f7fd f833 	bl	8002744 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e189      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f0      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	019a      	lsls	r2, r3, #6
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	071b      	lsls	r3, r3, #28
 8005710:	4981      	ldr	r1, [pc, #516]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01f      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005724:	4b7c      	ldr	r3, [pc, #496]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	019a      	lsls	r2, r3, #6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	431a      	orrs	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	071b      	lsls	r3, r3, #28
 8005744:	4974      	ldr	r1, [pc, #464]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800574c:	4b72      	ldr	r3, [pc, #456]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005752:	f023 021f 	bic.w	r2, r3, #31
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	3b01      	subs	r3, #1
 800575c:	496e      	ldr	r1, [pc, #440]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	019a      	lsls	r2, r3, #6
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	071b      	lsls	r3, r3, #28
 8005784:	4964      	ldr	r1, [pc, #400]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800578c:	4b61      	ldr	r3, [pc, #388]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005792:	f7fc ffd7 	bl	8002744 <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800579a:	f7fc ffd3 	bl	8002744 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e129      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d079      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057d0:	4b52      	ldr	r3, [pc, #328]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d6:	f7fc ffb5 	bl	8002744 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80057de:	f7fc ffb1 	bl	8002744 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e107      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057f0:	4b49      	ldr	r3, [pc, #292]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057fc:	d0ef      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	0f1b      	lsrs	r3, r3, #28
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	019a      	lsls	r2, r3, #6
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	431a      	orrs	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	071b      	lsls	r3, r3, #28
 800582a:	493b      	ldr	r1, [pc, #236]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005832:	4b39      	ldr	r3, [pc, #228]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005838:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	3b01      	subs	r3, #1
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	4934      	ldr	r1, [pc, #208]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01e      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005858:	4b2f      	ldr	r3, [pc, #188]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585e:	0e1b      	lsrs	r3, r3, #24
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	019a      	lsls	r2, r3, #6
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	071b      	lsls	r3, r3, #28
 8005878:	4927      	ldr	r1, [pc, #156]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005880:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005886:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	4922      	ldr	r1, [pc, #136]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005896:	4b21      	ldr	r3, [pc, #132]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800589c:	f7fc ff52 	bl	8002744 <HAL_GetTick>
 80058a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058a4:	f7fc ff4e 	bl	8002744 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0a4      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058b6:	4b18      	ldr	r3, [pc, #96]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c2:	d1ef      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 808b 	beq.w	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	4a0f      	ldr	r2, [pc, #60]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058fa:	f7fc ff23 	bl	8002744 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005900:	e010      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005902:	f7fc ff1f 	bl	8002744 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d909      	bls.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e075      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005914:	42470068 	.word	0x42470068
 8005918:	40023800 	.word	0x40023800
 800591c:	42470070 	.word	0x42470070
 8005920:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005924:	4b38      	ldr	r3, [pc, #224]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0e8      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005930:	4b36      	ldr	r3, [pc, #216]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005938:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02f      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	429a      	cmp	r2, r3
 800594c:	d028      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800594e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005956:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005958:	4b2d      	ldr	r3, [pc, #180]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800595e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005964:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800596a:	4b28      	ldr	r3, [pc, #160]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d114      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005976:	f7fc fee5 	bl	8002744 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fc fee1 	bl	8002744 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e035      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ee      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ac:	d10d      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059ae:	4b17      	ldr	r3, [pc, #92]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c2:	4912      	ldr	r1, [pc, #72]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]
 80059c8:	e005      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80059ca:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4a0f      	ldr	r2, [pc, #60]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059d4:	6093      	str	r3, [r2, #8]
 80059d6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	490a      	ldr	r1, [pc, #40]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40007000 	.word	0x40007000
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	42470e40 	.word	0x42470e40
 8005a14:	424711e0 	.word	0x424711e0

08005a18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e025      	b.n	8005a78 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f81d 	bl	8005a80 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f000 ffd3 	bl	8006a04 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	f001 f828 	bl	8006abe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005aa6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d101      	bne.n	8005ab2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e021      	b.n	8005af6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d002      	beq.n	8005abe <HAL_SDRAM_SendCommand+0x2a>
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d118      	bne.n	8005af0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f85e 	bl	8006b90 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d104      	bne.n	8005ae6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005ae4:	e006      	b.n	8005af4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005aee:	e001      	b.n	8005af4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d101      	bne.n	8005b18 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005b14:	2302      	movs	r3, #2
 8005b16:	e016      	b.n	8005b46 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10f      	bne.n	8005b44 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f869 	bl	8006c0a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e083      	b.n	8005c68 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b70:	d009      	beq.n	8005b86 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	61da      	str	r2, [r3, #28]
 8005b78:	e005      	b.n	8005b86 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f890 	bl	8005cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c04:	ea42 0103 	orr.w	r1, r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	f003 0104 	and.w	r1, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c26:	f003 0210 	and.w	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c3a:	d105      	bne.n	8005c48 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b292      	uxth	r2, r2
 8005c46:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e01a      	b.n	8005cb8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f81a 	bl	8005cd4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_SPI_Transmit+0x22>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e14f      	b.n	8005faa <HAL_SPI_Transmit+0x2c2>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d12:	f7fc fd17 	bl	8002744 <HAL_GetTick>
 8005d16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d002      	beq.n	8005d2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d2c:	e138      	b.n	8005fa0 <HAL_SPI_Transmit+0x2b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_SPI_Transmit+0x52>
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d3e:	e12f      	b.n	8005fa0 <HAL_SPI_Transmit+0x2b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2203      	movs	r2, #3
 8005d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d86:	d10f      	bne.n	8005da8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db0:	d10f      	bne.n	8005dd2 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dd0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ddc:	2b40      	cmp	r3, #64	@ 0x40
 8005dde:	d007      	beq.n	8005df0 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df8:	d14f      	bne.n	8005e9a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x120>
 8005e02:	8afb      	ldrh	r3, [r7, #22]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d142      	bne.n	8005e8e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e2c:	e02f      	b.n	8005e8e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d112      	bne.n	8005e62 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e60:	e015      	b.n	8005e8e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e62:	f7fc fc6f 	bl	8002744 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d803      	bhi.n	8005e7a <HAL_SPI_Transmit+0x192>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_Transmit+0x198>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005e8c:	e088      	b.n	8005fa0 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1ca      	bne.n	8005e2e <HAL_SPI_Transmit+0x146>
 8005e98:	e050      	b.n	8005f3c <HAL_SPI_Transmit+0x254>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Transmit+0x1c0>
 8005ea2:	8afb      	ldrh	r3, [r7, #22]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d144      	bne.n	8005f32 <HAL_SPI_Transmit+0x24a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ece:	e030      	b.n	8005f32 <HAL_SPI_Transmit+0x24a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d113      	bne.n	8005f06 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f04:	e015      	b.n	8005f32 <HAL_SPI_Transmit+0x24a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f06:	f7fc fc1d 	bl	8002744 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d803      	bhi.n	8005f1e <HAL_SPI_Transmit+0x236>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Transmit+0x23c>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <HAL_SPI_Transmit+0x24a>
        {
          errorcode = HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005f30:	e036      	b.n	8005fa0 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1c9      	bne.n	8005ed0 <HAL_SPI_Transmit+0x1e8>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f44:	d107      	bne.n	8005f56 <HAL_SPI_Transmit+0x26e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f54:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fcfe 	bl	800695c <SPI_EndRxTxTransaction>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e003      	b.n	8005fa0 <HAL_SPI_Transmit+0x2b8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08a      	sub	sp, #40	@ 0x28
 8005fb6:	af02      	add	r7, sp, #8
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Receive+0x2a>
  {
    errorcode = HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fda:	e173      	b.n	80062c4 <HAL_SPI_Receive+0x312>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe4:	d112      	bne.n	800600c <HAL_SPI_Receive+0x5a>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10e      	bne.n	800600c <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2204      	movs	r2, #4
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f967 	bl	80062d6 <HAL_SPI_TransmitReceive>
 8006008:	4603      	mov	r3, r0
 800600a:	e160      	b.n	80062ce <HAL_SPI_Receive+0x31c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_SPI_Receive+0x68>
 8006016:	2302      	movs	r3, #2
 8006018:	e159      	b.n	80062ce <HAL_SPI_Receive+0x31c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006022:	f7fc fb8f 	bl	8002744 <HAL_GetTick>
 8006026:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Receive+0x82>
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006038:	e144      	b.n	80062c4 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2204      	movs	r2, #4
 800603e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006080:	d116      	bne.n	80060b0 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060a0:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b8:	d10f      	bne.n	80060da <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d007      	beq.n	80060f8 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d16a      	bne.n	80061d6 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006100:	e032      	b.n	8006168 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d115      	bne.n	800613c <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f103 020c 	add.w	r2, r3, #12
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800613a:	e015      	b.n	8006168 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613c:	f7fc fb02 	bl	8002744 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d803      	bhi.n	8006154 <HAL_SPI_Receive+0x1a2>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d102      	bne.n	800615a <HAL_SPI_Receive+0x1a8>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006166:	e0ad      	b.n	80062c4 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1c7      	bne.n	8006102 <HAL_SPI_Receive+0x150>
 8006172:	e035      	b.n	80061e0 <HAL_SPI_Receive+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d113      	bne.n	80061aa <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	b292      	uxth	r2, r2
 800618e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061a8:	e015      	b.n	80061d6 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061aa:	f7fc facb 	bl	8002744 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d803      	bhi.n	80061c2 <HAL_SPI_Receive+0x210>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d102      	bne.n	80061c8 <HAL_SPI_Receive+0x216>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80061d4:	e076      	b.n	80062c4 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1c9      	bne.n	8006174 <HAL_SPI_Receive+0x1c2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e8:	d144      	bne.n	8006274 <HAL_SPI_Receive+0x2c2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061f8:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	2101      	movs	r1, #1
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fabb 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Receive+0x264>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	77fb      	strb	r3, [r7, #31]
      goto error;
 8006214:	e056      	b.n	80062c4 <HAL_SPI_Receive+0x312>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800621e:	d107      	bne.n	8006230 <HAL_SPI_Receive+0x27e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	b292      	uxth	r2, r2
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e008      	b.n	8006242 <HAL_SPI_Receive+0x290>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f103 020c 	add.w	r2, r3, #12
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	7812      	ldrb	r2, [r2, #0]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	2101      	movs	r1, #1
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fa97 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_SPI_Receive+0x2b8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625c:	f043 0202 	orr.w	r2, r3, #2
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	77fb      	strb	r3, [r7, #31]
      goto error;
 8006268:	e02c      	b.n	80062c4 <HAL_SPI_Receive+0x312>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8006272:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fb09 	bl	8006890 <SPI_EndRxTransaction>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <HAL_SPI_Receive+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b10      	cmp	r3, #16
 8006296:	d10a      	bne.n	80062ae <HAL_SPI_Receive+0x2fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629c:	f043 0202 	orr.w	r2, r3, #2
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80062ac:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Receive+0x30a>
  {
    errorcode = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e003      	b.n	80062c4 <HAL_SPI_Receive+0x312>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80062cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3720      	adds	r7, #32
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b08e      	sub	sp, #56	@ 0x38
 80062da:	af02      	add	r7, sp, #8
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062e8:	2301      	movs	r3, #1
 80062ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x2a>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e22c      	b.n	800675a <HAL_SPI_TransmitReceive+0x484>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006308:	f7fc fa1c 	bl	8002744 <HAL_GetTick>
 800630c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006314:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006322:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006326:	2b01      	cmp	r3, #1
 8006328:	d00f      	beq.n	800634a <HAL_SPI_TransmitReceive+0x74>
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006330:	d107      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x6c>
 800633a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800633e:	2b04      	cmp	r3, #4
 8006340:	d003      	beq.n	800634a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8006342:	2302      	movs	r3, #2
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006348:	e201      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_SPI_TransmitReceive+0x86>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_SPI_TransmitReceive+0x86>
 8006356:	887b      	ldrh	r3, [r7, #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006362:	e1f4      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b04      	cmp	r3, #4
 800636e:	d003      	beq.n	8006378 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2205      	movs	r2, #5
 8006374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	887a      	ldrh	r2, [r7, #2]
 800638e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	887a      	ldrh	r2, [r7, #2]
 800639a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b6:	d10f      	bne.n	80063d8 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063d6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e2:	2b40      	cmp	r3, #64	@ 0x40
 80063e4:	d007      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063fe:	f040 80a2 	bne.w	8006546 <HAL_SPI_TransmitReceive+0x270>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x13c>
 800640a:	8b7b      	ldrh	r3, [r7, #26]
 800640c:	2b01      	cmp	r3, #1
 800640e:	f040 808f 	bne.w	8006530 <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006416:	881a      	ldrh	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d177      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x25a>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006448:	d172      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x25a>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006458:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645a:	e069      	b.n	8006530 <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d12d      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x1f0>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d028      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x1f0>
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d125      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x1f0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	1c9a      	adds	r2, r3, #2
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x1f0>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b4:	d107      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x1f0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064c4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d119      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x232>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d014      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	b292      	uxth	r2, r2
 80064ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006504:	2301      	movs	r3, #1
 8006506:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006508:	f7fc f91c 	bl	8002744 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006514:	429a      	cmp	r2, r3
 8006516:	d80b      	bhi.n	8006530 <HAL_SPI_TransmitReceive+0x25a>
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d007      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800652e:	e10e      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d190      	bne.n	800645c <HAL_SPI_TransmitReceive+0x186>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d18b      	bne.n	800645c <HAL_SPI_TransmitReceive+0x186>
 8006544:	e0a5      	b.n	8006692 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_SPI_TransmitReceive+0x280>
 800654e:	8b7b      	ldrh	r3, [r7, #26]
 8006550:	2b01      	cmp	r3, #1
 8006552:	f040 8094 	bne.w	800667e <HAL_SPI_TransmitReceive+0x3a8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d17b      	bne.n	800667e <HAL_SPI_TransmitReceive+0x3a8>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800658e:	d176      	bne.n	800667e <HAL_SPI_TransmitReceive+0x3a8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800659e:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a0:	e06d      	b.n	800667e <HAL_SPI_TransmitReceive+0x3a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d12e      	bne.n	800660e <HAL_SPI_TransmitReceive+0x338>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d029      	beq.n	800660e <HAL_SPI_TransmitReceive+0x338>
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d126      	bne.n	800660e <HAL_SPI_TransmitReceive+0x338>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10c      	bne.n	800660e <HAL_SPI_TransmitReceive+0x338>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fc:	d107      	bne.n	800660e <HAL_SPI_TransmitReceive+0x338>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800660c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d119      	bne.n	8006650 <HAL_SPI_TransmitReceive+0x37a>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d014      	beq.n	8006650 <HAL_SPI_TransmitReceive+0x37a>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800664c:	2301      	movs	r3, #1
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006650:	f7fc f878 	bl	8002744 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800665c:	429a      	cmp	r2, r3
 800665e:	d803      	bhi.n	8006668 <HAL_SPI_TransmitReceive+0x392>
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d102      	bne.n	800666e <HAL_SPI_TransmitReceive+0x398>
 8006668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d107      	bne.n	800667e <HAL_SPI_TransmitReceive+0x3a8>
      {
        errorcode = HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800667c:	e067      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d18c      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x2cc>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d187      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x2cc>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800669a:	d119      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x3fa>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	2201      	movs	r2, #1
 80066a4:	2101      	movs	r1, #1
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f86a 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0x3f0>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	f043 0202 	orr.w	r2, r3, #2
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 80066c4:	e043      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80066ce:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d10d      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x424>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f043 0202 	orr.w	r2, r3, #2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80066f2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f92c 	bl	800695c <SPI_EndRxTxTransaction>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x442>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006716:	e01a      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x460>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_SPI_TransmitReceive+0x470>
  {
    errorcode = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006744:	e003      	b.n	800674e <HAL_SPI_TransmitReceive+0x478>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800675a:	4618      	mov	r0, r3
 800675c:	3730      	adds	r7, #48	@ 0x30
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006770:	b2db      	uxtb	r3, r3
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006790:	f7fb ffd8 	bl	8002744 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4413      	add	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067a0:	f7fb ffd0 	bl	8002744 <HAL_GetTick>
 80067a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067a6:	4b39      	ldr	r3, [pc, #228]	@ (800688c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	015b      	lsls	r3, r3, #5
 80067ac:	0d1b      	lsrs	r3, r3, #20
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b6:	e054      	b.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d050      	beq.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067c0:	f7fb ffc0 	bl	8002744 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d902      	bls.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d13d      	bne.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067ee:	d111      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f8:	d004      	beq.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006802:	d107      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681c:	d10f      	bne.n	800683e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800683c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e017      	b.n	8006882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3b01      	subs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	bf0c      	ite	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	2300      	movne	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	429a      	cmp	r2, r3
 800687e:	d19b      	bne.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000090 	.word	0x20000090

08006890 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068a4:	d111      	bne.n	80068ca <SPI_EndRxTransaction+0x3a>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ae:	d004      	beq.n	80068ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b8:	d107      	bne.n	80068ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068d2:	d12a      	bne.n	800692a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068dc:	d012      	beq.n	8006904 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2180      	movs	r1, #128	@ 0x80
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7ff ff49 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02d      	beq.n	8006950 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e026      	b.n	8006952 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	2101      	movs	r1, #1
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff ff36 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01a      	beq.n	8006950 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e013      	b.n	8006952 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	2101      	movs	r1, #1
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff ff23 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e000      	b.n	8006952 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2201      	movs	r2, #1
 8006970:	2102      	movs	r1, #2
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff ff04 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e032      	b.n	80069f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800698e:	4b1b      	ldr	r3, [pc, #108]	@ (80069fc <SPI_EndRxTxTransaction+0xa0>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1b      	ldr	r2, [pc, #108]	@ (8006a00 <SPI_EndRxTxTransaction+0xa4>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	0d5b      	lsrs	r3, r3, #21
 800699a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069ac:	d112      	bne.n	80069d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2180      	movs	r1, #128	@ 0x80
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7ff fee1 	bl	8006780 <SPI_WaitFlagStateUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d016      	beq.n	80069f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e00f      	b.n	80069f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	3b01      	subs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ea:	2b80      	cmp	r3, #128	@ 0x80
 80069ec:	d0f2      	beq.n	80069d4 <SPI_EndRxTxTransaction+0x78>
 80069ee:	e000      	b.n	80069f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80069f0:	bf00      	nop
  }

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000090 	.word	0x20000090
 8006a00:	165e9f81 	.word	0x165e9f81

08006a04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d123      	bne.n	8006a5e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	6851      	ldr	r1, [r2, #4]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	6892      	ldr	r2, [r2, #8]
 8006a2a:	4311      	orrs	r1, r2
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	68d2      	ldr	r2, [r2, #12]
 8006a30:	4311      	orrs	r1, r2
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	6912      	ldr	r2, [r2, #16]
 8006a36:	4311      	orrs	r1, r2
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	6952      	ldr	r2, [r2, #20]
 8006a3c:	4311      	orrs	r1, r2
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	6992      	ldr	r2, [r2, #24]
 8006a42:	4311      	orrs	r1, r2
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	69d2      	ldr	r2, [r2, #28]
 8006a48:	4311      	orrs	r1, r2
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	6a12      	ldr	r2, [r2, #32]
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a54:	430a      	orrs	r2, r1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e028      	b.n	8006ab0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	69d9      	ldr	r1, [r3, #28]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	4319      	orrs	r1, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	430b      	orrs	r3, r1
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	6851      	ldr	r1, [r2, #4]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	6892      	ldr	r2, [r2, #8]
 8006a90:	4311      	orrs	r1, r2
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	68d2      	ldr	r2, [r2, #12]
 8006a96:	4311      	orrs	r1, r2
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	6912      	ldr	r2, [r2, #16]
 8006a9c:	4311      	orrs	r1, r2
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	6952      	ldr	r2, [r2, #20]
 8006aa2:	4311      	orrs	r1, r2
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	6992      	ldr	r2, [r2, #24]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d128      	bne.n	8006b22 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	1e59      	subs	r1, r3, #1
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	4319      	orrs	r1, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	4319      	orrs	r1, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	4319      	orrs	r1, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	4319      	orrs	r1, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	051b      	lsls	r3, r3, #20
 8006b0e:	4319      	orrs	r1, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	609a      	str	r2, [r3, #8]
 8006b20:	e02f      	b.n	8006b82 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	68d2      	ldr	r2, [r2, #12]
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0311      	lsls	r1, r2, #12
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6952      	ldr	r2, [r2, #20]
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	0512      	lsls	r2, r2, #20
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1e59      	subs	r1, r3, #1
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	4319      	orrs	r1, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	4319      	orrs	r1, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	4319      	orrs	r1, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	061b      	lsls	r3, r3, #24
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	0d9b      	lsrs	r3, r3, #22
 8006ba6:	059b      	lsls	r3, r3, #22
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	6852      	ldr	r2, [r2, #4]
 8006bb0:	4311      	orrs	r1, r2
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	6892      	ldr	r2, [r2, #8]
 8006bb6:	3a01      	subs	r2, #1
 8006bb8:	0152      	lsls	r2, r2, #5
 8006bba:	4311      	orrs	r1, r2
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	68d2      	ldr	r2, [r2, #12]
 8006bc0:	0252      	lsls	r2, r2, #9
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006bca:	f7fb fdbb 	bl	8002744 <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006bd0:	e010      	b.n	8006bf4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d00c      	beq.n	8006bf4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <FMC_SDRAM_SendCommand+0x60>
 8006be0:	f7fb fdb0 	bl	8002744 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d201      	bcs.n	8006bf4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e006      	b.n	8006c02 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d0e8      	beq.n	8006bd2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c1c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	0052      	lsls	r2, r2, #1
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006c38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8006c74 <LoopFillZerobss+0x16>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c3c:	480e      	ldr	r0, [pc, #56]	@ (8006c78 <LoopFillZerobss+0x1a>)
  ldr r1, =_edata
 8006c3e:	490f      	ldr	r1, [pc, #60]	@ (8006c7c <LoopFillZerobss+0x1e>)
  ldr r2, =_sidata
 8006c40:	4a0f      	ldr	r2, [pc, #60]	@ (8006c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c44:	e002      	b.n	8006c4c <LoopCopyDataInit>

08006c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c4a:	3304      	adds	r3, #4

08006c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c50:	d3f9      	bcc.n	8006c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c52:	4a0c      	ldr	r2, [pc, #48]	@ (8006c84 <LoopFillZerobss+0x26>)
  ldr r4, =_ebss
 8006c54:	4c0c      	ldr	r4, [pc, #48]	@ (8006c88 <LoopFillZerobss+0x2a>)
  movs r3, #0
 8006c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c58:	e001      	b.n	8006c5e <LoopFillZerobss>

08006c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c5c:	3204      	adds	r2, #4

08006c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c60:	d3fb      	bcc.n	8006c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006c62:	f000 f8a7 	bl	8006db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c66:	f000 fc2f 	bl	80074c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl initBoard
 8006c6a:	f000 f8d9 	bl	8006e20 <initBoard>
  bl  main
 8006c6e:	f000 f967 	bl	8006f40 <main>
  bx  lr    
 8006c72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006c74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c7c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8006c80:	08009a60 	.word	0x08009a60
  ldr r2, =_sbss
 8006c84:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8006c88:	20000518 	.word	0x20000518

08006c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c8c:	e7fe      	b.n	8006c8c <ADC_IRQHandler>

08006c8e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	af00      	add	r7, sp, #0
}
 8006c92:	bf00      	nop
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <HardFault_Handler+0x4>

08006ca4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <MemManage_Handler+0x4>

08006cac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006cb0:	bf00      	nop
 8006cb2:	e7fd      	b.n	8006cb0 <BusFault_Handler+0x4>

08006cb4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006cb8:	bf00      	nop
 8006cba:	e7fd      	b.n	8006cb8 <UsageFault_Handler+0x4>

08006cbc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
}
 8006cc0:	bf00      	nop
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	af00      	add	r7, sp, #0
}
 8006cce:	bf00      	nop
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
}
 8006cdc:	bf00      	nop
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8006cea:	f7fb fd17 	bl	800271c <HAL_IncTick>
  //Toggle_Leds();
}
 8006cee:	bf00      	nop
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f7fc fc80 	bl	80035fc <HAL_GPIO_EXTI_IRQHandler>
}
 8006cfc:	bf00      	nop
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  return 1;
 8006d04:	2301      	movs	r3, #1
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <_kill>:

int _kill(int pid, int sig)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006d1a:	f000 fbcf 	bl	80074bc <__errno>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2216      	movs	r2, #22
 8006d22:	601a      	str	r2, [r3, #0]
  return -1;
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <_exit>:

void _exit (int status)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006d38:	f04f 31ff 	mov.w	r1, #4294967295
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ffe7 	bl	8006d10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <_exit+0x12>
	...

08006d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d50:	4a14      	ldr	r2, [pc, #80]	@ (8006da4 <_sbrk+0x5c>)
 8006d52:	4b15      	ldr	r3, [pc, #84]	@ (8006da8 <_sbrk+0x60>)
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d5c:	4b13      	ldr	r3, [pc, #76]	@ (8006dac <_sbrk+0x64>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d64:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <_sbrk+0x64>)
 8006d66:	4a12      	ldr	r2, [pc, #72]	@ (8006db0 <_sbrk+0x68>)
 8006d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d6a:	4b10      	ldr	r3, [pc, #64]	@ (8006dac <_sbrk+0x64>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d207      	bcs.n	8006d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d78:	f000 fba0 	bl	80074bc <__errno>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	220c      	movs	r2, #12
 8006d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	e009      	b.n	8006d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d88:	4b08      	ldr	r3, [pc, #32]	@ (8006dac <_sbrk+0x64>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <_sbrk+0x64>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	4a05      	ldr	r2, [pc, #20]	@ (8006dac <_sbrk+0x64>)
 8006d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20030000 	.word	0x20030000
 8006da8:	00000400 	.word	0x00000400
 8006dac:	200003c0 	.word	0x200003c0
 8006db0:	20000518 	.word	0x20000518

08006db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006db8:	4b16      	ldr	r3, [pc, #88]	@ (8006e14 <SystemInit+0x60>)
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbe:	4a15      	ldr	r2, [pc, #84]	@ (8006e14 <SystemInit+0x60>)
 8006dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <SystemInit+0x64>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a12      	ldr	r2, [pc, #72]	@ (8006e18 <SystemInit+0x64>)
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006dd4:	4b10      	ldr	r3, [pc, #64]	@ (8006e18 <SystemInit+0x64>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006dda:	4b0f      	ldr	r3, [pc, #60]	@ (8006e18 <SystemInit+0x64>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a0e      	ldr	r2, [pc, #56]	@ (8006e18 <SystemInit+0x64>)
 8006de0:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <SystemInit+0x64>)
 8006dec:	4a0b      	ldr	r2, [pc, #44]	@ (8006e1c <SystemInit+0x68>)
 8006dee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006df0:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <SystemInit+0x64>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a08      	ldr	r2, [pc, #32]	@ (8006e18 <SystemInit+0x64>)
 8006df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006dfc:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <SystemInit+0x64>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e02:	4b04      	ldr	r3, [pc, #16]	@ (8006e14 <SystemInit+0x60>)
 8006e04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006e08:	609a      	str	r2, [r3, #8]
#endif
}
 8006e0a:	bf00      	nop
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	e000ed00 	.word	0xe000ed00
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	24003010 	.word	0x24003010

08006e20 <initBoard>:

static void SystemClock_Config(void);
static void initGraphics(void);

void initBoard(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8006e24:	f7fb fc28 	bl	8002678 <HAL_Init>

  /* Configure LED3 and LED4 */
  BSP_LED_Init(LED3);
 8006e28:	2000      	movs	r0, #0
 8006e2a:	f7f9 ffed 	bl	8000e08 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f7f9 ffea 	bl	8000e08 <BSP_LED_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8006e34:	f000 f830 	bl	8006e98 <SystemClock_Config>

  /* Configure USER Button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8006e38:	2101      	movs	r1, #1
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f7fa f838 	bl	8000eb0 <BSP_PB_Init>

  initGraphics();
 8006e40:	f000 f802 	bl	8006e48 <initGraphics>
}
 8006e44:	bf00      	nop
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <initGraphics>:

void initGraphics(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
	short x, y;

	BSP_LCD_Init();
 8006e4e:	f7fa fbf7 	bl	8001640 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8006e52:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8006e56:	2001      	movs	r0, #1
 8006e58:	f7fa fc74 	bl	8001744 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	f7fa fcd5 	bl	800180c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8006e62:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8006e66:	f7fa fd2d 	bl	80018c4 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font8);
 8006e6a:	480a      	ldr	r0, [pc, #40]	@ (8006e94 <initGraphics+0x4c>)
 8006e6c:	f7fa fd10 	bl	8001890 <BSP_LCD_SetFont>

	x = BSP_LCD_GetXSize();
 8006e70:	f7fa fc50 	bl	8001714 <BSP_LCD_GetXSize>
 8006e74:	4603      	mov	r3, r0
 8006e76:	80fb      	strh	r3, [r7, #6]
	y = BSP_LCD_GetYSize();
 8006e78:	f7fa fc58 	bl	800172c <BSP_LCD_GetYSize>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	80bb      	strh	r3, [r7, #4]

	BSP_TS_Init(x, y);
 8006e80:	88fb      	ldrh	r3, [r7, #6]
 8006e82:	88ba      	ldrh	r2, [r7, #4]
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fb fb0a 	bl	80024a0 <BSP_TS_Init>
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	2000007c 	.word	0x2000007c

08006e98 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b094      	sub	sp, #80	@ 0x50
 8006e9c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	4b25      	ldr	r3, [pc, #148]	@ (8006f38 <SystemClock_Config+0xa0>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	4a24      	ldr	r2, [pc, #144]	@ (8006f38 <SystemClock_Config+0xa0>)
 8006ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8006eae:	4b22      	ldr	r3, [pc, #136]	@ (8006f38 <SystemClock_Config+0xa0>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eb6:	60bb      	str	r3, [r7, #8]
 8006eb8:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	607b      	str	r3, [r7, #4]
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8006f3c <SystemClock_Config+0xa4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f3c <SystemClock_Config+0xa4>)
 8006ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	4b1c      	ldr	r3, [pc, #112]	@ (8006f3c <SystemClock_Config+0xa4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006ed2:	607b      	str	r3, [r7, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006eda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ede:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ee4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006eea:	2308      	movs	r3, #8
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8006eee:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8006ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006ef8:	2307      	movs	r3, #7
 8006efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006efc:	f107 030c 	add.w	r3, r7, #12
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fd ff45 	bl	8004d90 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8006f06:	f7fd fef3 	bl	8004cf0 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006f0a:	230f      	movs	r3, #15
 8006f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f12:	2300      	movs	r3, #0
 8006f14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006f16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006f1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8006f22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f26:	2105      	movs	r1, #5
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe f9a9 	bl	8005280 <HAL_RCC_ClockConfig>
}
 8006f2e:	bf00      	nop
 8006f30:	3750      	adds	r7, #80	@ 0x50
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	40007000 	.word	0x40007000

08006f40 <main>:
#include <stm32f4xx_hal.h>
#include "KeyboardTsLcd.h"
#include "LedLcd.h"

int main() {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
	KeyboardTsLcd KeyboardLeft(0);
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f89d 	bl	800708c <_ZN13KeyboardTsLcdC1Eh>
	LedLcd LedRight(2);
 8006f52:	1d3b      	adds	r3, r7, #4
 8006f54:	2102      	movs	r1, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f8e1 	bl	800711e <_ZN6LedLcdC1Eh>
	while(1) {
		switch(KeyboardLeft.eRead()) {
 8006f5c:	f107 0308 	add.w	r3, r7, #8
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f8b6 	bl	80070d2 <_ZN13KeyboardTsLcd5eReadEv>
 8006f66:	4603      	mov	r3, r0
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d822      	bhi.n	8006fb4 <main+0x74>
 8006f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f74 <main+0x34>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006f9d 	.word	0x08006f9d
 8006f80:	08006fa9 	.word	0x08006fa9
			case BUTTON_0:
				LedRight.On(3);
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	2103      	movs	r1, #3
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 f8e5 	bl	8007158 <_ZN6LedLcd2OnEh>
				break;
 8006f8e:	e017      	b.n	8006fc0 <main+0x80>
			case BUTTON_1:
				LedRight.On(2);
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	2102      	movs	r1, #2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 f8df 	bl	8007158 <_ZN6LedLcd2OnEh>
				break;
 8006f9a:	e011      	b.n	8006fc0 <main+0x80>
			case BUTTON_2:
				LedRight.On(1);
 8006f9c:	1d3b      	adds	r3, r7, #4
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f8d9 	bl	8007158 <_ZN6LedLcd2OnEh>
				break;
 8006fa6:	e00b      	b.n	8006fc0 <main+0x80>
			case BUTTON_3:
				LedRight.On(0);
 8006fa8:	1d3b      	adds	r3, r7, #4
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 f8d3 	bl	8007158 <_ZN6LedLcd2OnEh>
				break;
 8006fb2:	e005      	b.n	8006fc0 <main+0x80>
			default:
				LedRight.On(4);
 8006fb4:	1d3b      	adds	r3, r7, #4
 8006fb6:	2104      	movs	r1, #4
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f8cd 	bl	8007158 <_ZN6LedLcd2OnEh>
				break;
 8006fbe:	bf00      	nop
		}
		HAL_Delay(100);
 8006fc0:	2064      	movs	r0, #100	@ 0x64
 8006fc2:	f7fb fbcb 	bl	800275c <HAL_Delay>
		switch(KeyboardLeft.eRead()) {
 8006fc6:	e7c9      	b.n	8006f5c <main+0x1c>

08006fc8 <_ZN10KeyboardTsC1Eh>:
#include <stm32f429i_discovery_ts.h>
#include <stm32f429i_discovery_lcd.h>

TS_StateTypeDef TsState;

KeyboardTs::KeyboardTs(unsigned char ucColumnIndex) {
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8006fd4:	f7fa fb9e 	bl	8001714 <BSP_LCD_GetXSize>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	b29c      	uxth	r4, r3
 8006fdc:	f7fa fba6 	bl	800172c <BSP_LCD_GetYSize>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7fb fa5a 	bl	80024a0 <BSP_TS_Init>
	if(ucColumnIndex < 3) {
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d808      	bhi.n	8007004 <_ZN10KeyboardTsC1Eh+0x3c>
		ucKeyboardOffset = ucColumnIndex * 80;
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e002      	b.n	800700a <_ZN10KeyboardTsC1Eh+0x42>
	} else {
		ucKeyboardOffset = 0;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	701a      	strb	r2, [r3, #0]
	}
}
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bd90      	pop	{r4, r7, pc}

08007014 <_ZN10KeyboardTs5eReadEv>:

enum KeyboardState KeyboardTs::eRead(void) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

	BSP_TS_GetState(&TsState);
 800701c:	481a      	ldr	r0, [pc, #104]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 800701e:	f7fb fa79 	bl	8002514 <BSP_TS_GetState>

	if(TsState.TouchDetected && TsState.X >= 0 + ucKeyboardOffset && TsState.X <= 80 + ucKeyboardOffset) {
 8007022:	4b19      	ldr	r3, [pc, #100]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d029      	beq.n	800707e <_ZN10KeyboardTs5eReadEv+0x6a>
 800702a:	4b17      	ldr	r3, [pc, #92]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 800702c:	885b      	ldrh	r3, [r3, #2]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	4293      	cmp	r3, r2
 8007034:	d323      	bcc.n	800707e <_ZN10KeyboardTs5eReadEv+0x6a>
 8007036:	4b14      	ldr	r3, [pc, #80]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	3350      	adds	r3, #80	@ 0x50
 8007042:	429a      	cmp	r2, r3
 8007044:	dc1b      	bgt.n	800707e <_ZN10KeyboardTs5eReadEv+0x6a>

		if(TsState.Y <= 80) {
 8007046:	4b10      	ldr	r3, [pc, #64]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 8007048:	889b      	ldrh	r3, [r3, #4]
 800704a:	2b50      	cmp	r3, #80	@ 0x50
 800704c:	d801      	bhi.n	8007052 <_ZN10KeyboardTs5eReadEv+0x3e>
			return BUTTON_3;
 800704e:	2304      	movs	r3, #4
 8007050:	e016      	b.n	8007080 <_ZN10KeyboardTs5eReadEv+0x6c>
		} else if(TsState.Y > 80 && TsState.Y <= 160) {
 8007052:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 8007054:	889b      	ldrh	r3, [r3, #4]
 8007056:	2b50      	cmp	r3, #80	@ 0x50
 8007058:	d905      	bls.n	8007066 <_ZN10KeyboardTs5eReadEv+0x52>
 800705a:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 800705c:	889b      	ldrh	r3, [r3, #4]
 800705e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007060:	d801      	bhi.n	8007066 <_ZN10KeyboardTs5eReadEv+0x52>
			return BUTTON_2;
 8007062:	2303      	movs	r3, #3
 8007064:	e00c      	b.n	8007080 <_ZN10KeyboardTs5eReadEv+0x6c>
		} else if(TsState.Y > 160 && TsState.Y <= 240) {
 8007066:	4b08      	ldr	r3, [pc, #32]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 8007068:	889b      	ldrh	r3, [r3, #4]
 800706a:	2ba0      	cmp	r3, #160	@ 0xa0
 800706c:	d905      	bls.n	800707a <_ZN10KeyboardTs5eReadEv+0x66>
 800706e:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <_ZN10KeyboardTs5eReadEv+0x74>)
 8007070:	889b      	ldrh	r3, [r3, #4]
 8007072:	2bf0      	cmp	r3, #240	@ 0xf0
 8007074:	d801      	bhi.n	800707a <_ZN10KeyboardTs5eReadEv+0x66>
			return BUTTON_1;
 8007076:	2302      	movs	r3, #2
 8007078:	e002      	b.n	8007080 <_ZN10KeyboardTs5eReadEv+0x6c>
		} else {
			return BUTTON_0;
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <_ZN10KeyboardTs5eReadEv+0x6c>
		}
	}
	else {
		return RELEASED;
 800707e:	2300      	movs	r3, #0
	}
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	200003c4 	.word	0x200003c4

0800708c <_ZN13KeyboardTsLcdC1Eh>:
#include "KeyboardTsLcd.h"

KeyboardTsLcd::KeyboardTsLcd(unsigned char _ucColumn) {
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]

	pKeyboard = new KeyboardTs(_ucColumn);
 8007098:	2001      	movs	r0, #1
 800709a:	f000 f8c1 	bl	8007220 <_Znwj>
 800709e:	4603      	mov	r3, r0
 80070a0:	461c      	mov	r4, r3
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	4619      	mov	r1, r3
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7ff ff8e 	bl	8006fc8 <_ZN10KeyboardTsC1Eh>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605c      	str	r4, [r3, #4]
	pLed = new LedLcd(_ucColumn);
 80070b0:	2003      	movs	r0, #3
 80070b2:	f000 f8b5 	bl	8007220 <_Znwj>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461c      	mov	r4, r3
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	4619      	mov	r1, r3
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 f82d 	bl	800711e <_ZN6LedLcdC1Eh>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601c      	str	r4, [r3, #0]
};
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd90      	pop	{r4, r7, pc}

080070d2 <_ZN13KeyboardTsLcd5eReadEv>:

enum KeyboardState KeyboardTsLcd::eRead(void) {
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
    KeyboardState state = pKeyboard->eRead();
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff98 	bl	8007014 <_ZN10KeyboardTs5eReadEv>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]

    if (state >= BUTTON_0 && state <= BUTTON_3) {
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <_ZN13KeyboardTsLcd5eReadEv+0x36>
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d809      	bhi.n	8007108 <_ZN13KeyboardTsLcd5eReadEv+0x36>
        pLed->On(state - BUTTON_0);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f000 f829 	bl	8007158 <_ZN6LedLcd2OnEh>
 8007106:	e005      	b.n	8007114 <_ZN13KeyboardTsLcd5eReadEv+0x42>
    } else {
        pLed->On(4);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2104      	movs	r1, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f000 f822 	bl	8007158 <_ZN6LedLcd2OnEh>
    }

    return state;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <_ZN6LedLcdC1Eh>:
#include "LedLcd.h"
#include <stm32f429i_discovery.h>
#include <stm32f429i_discovery_lcd.h>
#include <cstdio>

LedLcd::LedLcd(unsigned char ucColumnIndex) {
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	70fb      	strb	r3, [r7, #3]

	BSP_LCD_Init();
 800712a:	f7fa fa89 	bl	8001640 <BSP_LCD_Init>
	if(ucColumnIndex < 3) {
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d808      	bhi.n	8007146 <_ZN6LedLcdC1Eh+0x28>
		ucLedOffset = ucColumnIndex * 80;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	461a      	mov	r2, r3
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	4413      	add	r3, r2
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	b2da      	uxtb	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	e002      	b.n	800714c <_ZN6LedLcdC1Eh+0x2e>
	} else {
		ucLedOffset = 0;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
	}
}
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <_ZN6LedLcd2OnEh>:

void LedLcd::On(unsigned char ucLedIndex) {
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
	for(unsigned char ucCounter = 0; ucCounter < 4; ucCounter++) {
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]
 8007168:	e04c      	b.n	8007204 <_ZN6LedLcd2OnEh+0xac>
		if(ucCounter == ucLedIndex) {
 800716a:	7bfa      	ldrb	r2, [r7, #15]
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	429a      	cmp	r2, r3
 8007170:	d104      	bne.n	800717c <_ZN6LedLcd2OnEh+0x24>
			BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007172:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8007176:	f7fa fb59 	bl	800182c <BSP_LCD_SetTextColor>
 800717a:	e002      	b.n	8007182 <_ZN6LedLcd2OnEh+0x2a>
		} else {
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800717c:	4825      	ldr	r0, [pc, #148]	@ (8007214 <_ZN6LedLcd2OnEh+0xbc>)
 800717e:	f7fa fb55 	bl	800182c <BSP_LCD_SetTextColor>
		}
		BSP_LCD_FillRect(ucLedOffset, ucCounter * 80, 80, 80);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	0092      	lsls	r2, r2, #2
 8007190:	4413      	add	r3, r2
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	b299      	uxth	r1, r3
 8007196:	2350      	movs	r3, #80	@ 0x50
 8007198:	2250      	movs	r2, #80	@ 0x50
 800719a:	f7fa fd6f 	bl	8001c7c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800719e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80071a2:	f7fa fb43 	bl	800182c <BSP_LCD_SetTextColor>
		BSP_LCD_DrawRect(ucLedOffset, ucCounter * 80, 80, 80);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	b299      	uxth	r1, r3
 80071ba:	2350      	movs	r3, #80	@ 0x50
 80071bc:	2250      	movs	r2, #80	@ 0x50
 80071be:	f7fa fd2b 	bl	8001c18 <BSP_LCD_DrawRect>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	f7fa fb31 	bl	800182c <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80071ca:	4813      	ldr	r0, [pc, #76]	@ (8007218 <_ZN6LedLcd2OnEh+0xc0>)
 80071cc:	f7fa fb46 	bl	800185c <BSP_LCD_SetBackColor>
		sprintf(cCharBuffer, "%d", ucCounter + 1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	1c58      	adds	r0, r3, #1
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	3301      	adds	r3, #1
 80071d8:	461a      	mov	r2, r3
 80071da:	4910      	ldr	r1, [pc, #64]	@ (800721c <_ZN6LedLcd2OnEh+0xc4>)
 80071dc:	f000 f8f8 	bl	80073d0 <siprintf>
		BSP_LCD_DisplayStringAt(ucLedOffset, ucCounter * 80, (uint8_t*)cCharBuffer, LEFT_MODE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	0092      	lsls	r2, r2, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	b299      	uxth	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	2303      	movs	r3, #3
 80071fa:	f7fa fbcf 	bl	800199c <BSP_LCD_DisplayStringAt>
	for(unsigned char ucCounter = 0; ucCounter < 4; ucCounter++) {
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	3301      	adds	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b03      	cmp	r3, #3
 8007208:	d9af      	bls.n	800716a <_ZN6LedLcd2OnEh+0x12>
	}
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	ff0000ff 	.word	0xff0000ff
 8007218:	ffff0000 	.word	0xffff0000
 800721c:	08007c44 	.word	0x08007c44

08007220 <_Znwj>:
 8007220:	2801      	cmp	r0, #1
 8007222:	bf38      	it	cc
 8007224:	2001      	movcc	r0, #1
 8007226:	b510      	push	{r4, lr}
 8007228:	4604      	mov	r4, r0
 800722a:	4620      	mov	r0, r4
 800722c:	f000 f81a 	bl	8007264 <malloc>
 8007230:	b100      	cbz	r0, 8007234 <_Znwj+0x14>
 8007232:	bd10      	pop	{r4, pc}
 8007234:	f000 f806 	bl	8007244 <_ZSt15get_new_handlerv>
 8007238:	b908      	cbnz	r0, 800723e <_Znwj+0x1e>
 800723a:	f000 f80b 	bl	8007254 <abort>
 800723e:	4780      	blx	r0
 8007240:	e7f3      	b.n	800722a <_Znwj+0xa>
	...

08007244 <_ZSt15get_new_handlerv>:
 8007244:	4b02      	ldr	r3, [pc, #8]	@ (8007250 <_ZSt15get_new_handlerv+0xc>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	f3bf 8f5b 	dmb	ish
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	200003cc 	.word	0x200003cc

08007254 <abort>:
 8007254:	b508      	push	{r3, lr}
 8007256:	2006      	movs	r0, #6
 8007258:	f000 f904 	bl	8007464 <raise>
 800725c:	2001      	movs	r0, #1
 800725e:	f7ff fd67 	bl	8006d30 <_exit>
	...

08007264 <malloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	@ (8007270 <malloc+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 b825 	b.w	80072b8 <_malloc_r>
 800726e:	bf00      	nop
 8007270:	20000094 	.word	0x20000094

08007274 <sbrk_aligned>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4e0f      	ldr	r6, [pc, #60]	@ (80072b4 <sbrk_aligned+0x40>)
 8007278:	460c      	mov	r4, r1
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	4605      	mov	r5, r0
 800727e:	b911      	cbnz	r1, 8007286 <sbrk_aligned+0x12>
 8007280:	f000 f90c 	bl	800749c <_sbrk_r>
 8007284:	6030      	str	r0, [r6, #0]
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f907 	bl	800749c <_sbrk_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	d103      	bne.n	800729a <sbrk_aligned+0x26>
 8007292:	f04f 34ff 	mov.w	r4, #4294967295
 8007296:	4620      	mov	r0, r4
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d0f8      	beq.n	8007296 <sbrk_aligned+0x22>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 f8f8 	bl	800749c <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d1f2      	bne.n	8007296 <sbrk_aligned+0x22>
 80072b0:	e7ef      	b.n	8007292 <sbrk_aligned+0x1e>
 80072b2:	bf00      	nop
 80072b4:	200003d0 	.word	0x200003d0

080072b8 <_malloc_r>:
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072bc:	1ccd      	adds	r5, r1, #3
 80072be:	f025 0503 	bic.w	r5, r5, #3
 80072c2:	3508      	adds	r5, #8
 80072c4:	2d0c      	cmp	r5, #12
 80072c6:	bf38      	it	cc
 80072c8:	250c      	movcc	r5, #12
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	4606      	mov	r6, r0
 80072ce:	db01      	blt.n	80072d4 <_malloc_r+0x1c>
 80072d0:	42a9      	cmp	r1, r5
 80072d2:	d904      	bls.n	80072de <_malloc_r+0x26>
 80072d4:	230c      	movs	r3, #12
 80072d6:	6033      	str	r3, [r6, #0]
 80072d8:	2000      	movs	r0, #0
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073b4 <_malloc_r+0xfc>
 80072e2:	f000 f869 	bl	80073b8 <__malloc_lock>
 80072e6:	f8d8 3000 	ldr.w	r3, [r8]
 80072ea:	461c      	mov	r4, r3
 80072ec:	bb44      	cbnz	r4, 8007340 <_malloc_r+0x88>
 80072ee:	4629      	mov	r1, r5
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff ffbf 	bl	8007274 <sbrk_aligned>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	4604      	mov	r4, r0
 80072fa:	d158      	bne.n	80073ae <_malloc_r+0xf6>
 80072fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007300:	4627      	mov	r7, r4
 8007302:	2f00      	cmp	r7, #0
 8007304:	d143      	bne.n	800738e <_malloc_r+0xd6>
 8007306:	2c00      	cmp	r4, #0
 8007308:	d04b      	beq.n	80073a2 <_malloc_r+0xea>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	4639      	mov	r1, r7
 800730e:	4630      	mov	r0, r6
 8007310:	eb04 0903 	add.w	r9, r4, r3
 8007314:	f000 f8c2 	bl	800749c <_sbrk_r>
 8007318:	4581      	cmp	r9, r0
 800731a:	d142      	bne.n	80073a2 <_malloc_r+0xea>
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	1a6d      	subs	r5, r5, r1
 8007320:	4629      	mov	r1, r5
 8007322:	4630      	mov	r0, r6
 8007324:	f7ff ffa6 	bl	8007274 <sbrk_aligned>
 8007328:	3001      	adds	r0, #1
 800732a:	d03a      	beq.n	80073a2 <_malloc_r+0xea>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	442b      	add	r3, r5
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	f8d8 3000 	ldr.w	r3, [r8]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	bb62      	cbnz	r2, 8007394 <_malloc_r+0xdc>
 800733a:	f8c8 7000 	str.w	r7, [r8]
 800733e:	e00f      	b.n	8007360 <_malloc_r+0xa8>
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	1b52      	subs	r2, r2, r5
 8007344:	d420      	bmi.n	8007388 <_malloc_r+0xd0>
 8007346:	2a0b      	cmp	r2, #11
 8007348:	d917      	bls.n	800737a <_malloc_r+0xc2>
 800734a:	1961      	adds	r1, r4, r5
 800734c:	42a3      	cmp	r3, r4
 800734e:	6025      	str	r5, [r4, #0]
 8007350:	bf18      	it	ne
 8007352:	6059      	strne	r1, [r3, #4]
 8007354:	6863      	ldr	r3, [r4, #4]
 8007356:	bf08      	it	eq
 8007358:	f8c8 1000 	streq.w	r1, [r8]
 800735c:	5162      	str	r2, [r4, r5]
 800735e:	604b      	str	r3, [r1, #4]
 8007360:	4630      	mov	r0, r6
 8007362:	f000 f82f 	bl	80073c4 <__malloc_unlock>
 8007366:	f104 000b 	add.w	r0, r4, #11
 800736a:	1d23      	adds	r3, r4, #4
 800736c:	f020 0007 	bic.w	r0, r0, #7
 8007370:	1ac2      	subs	r2, r0, r3
 8007372:	bf1c      	itt	ne
 8007374:	1a1b      	subne	r3, r3, r0
 8007376:	50a3      	strne	r3, [r4, r2]
 8007378:	e7af      	b.n	80072da <_malloc_r+0x22>
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	42a3      	cmp	r3, r4
 800737e:	bf0c      	ite	eq
 8007380:	f8c8 2000 	streq.w	r2, [r8]
 8007384:	605a      	strne	r2, [r3, #4]
 8007386:	e7eb      	b.n	8007360 <_malloc_r+0xa8>
 8007388:	4623      	mov	r3, r4
 800738a:	6864      	ldr	r4, [r4, #4]
 800738c:	e7ae      	b.n	80072ec <_malloc_r+0x34>
 800738e:	463c      	mov	r4, r7
 8007390:	687f      	ldr	r7, [r7, #4]
 8007392:	e7b6      	b.n	8007302 <_malloc_r+0x4a>
 8007394:	461a      	mov	r2, r3
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	42a3      	cmp	r3, r4
 800739a:	d1fb      	bne.n	8007394 <_malloc_r+0xdc>
 800739c:	2300      	movs	r3, #0
 800739e:	6053      	str	r3, [r2, #4]
 80073a0:	e7de      	b.n	8007360 <_malloc_r+0xa8>
 80073a2:	230c      	movs	r3, #12
 80073a4:	6033      	str	r3, [r6, #0]
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 f80c 	bl	80073c4 <__malloc_unlock>
 80073ac:	e794      	b.n	80072d8 <_malloc_r+0x20>
 80073ae:	6005      	str	r5, [r0, #0]
 80073b0:	e7d6      	b.n	8007360 <_malloc_r+0xa8>
 80073b2:	bf00      	nop
 80073b4:	200003d4 	.word	0x200003d4

080073b8 <__malloc_lock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	@ (80073c0 <__malloc_lock+0x8>)
 80073ba:	f000 b8a9 	b.w	8007510 <__retarget_lock_acquire_recursive>
 80073be:	bf00      	nop
 80073c0:	20000514 	.word	0x20000514

080073c4 <__malloc_unlock>:
 80073c4:	4801      	ldr	r0, [pc, #4]	@ (80073cc <__malloc_unlock+0x8>)
 80073c6:	f000 b8a4 	b.w	8007512 <__retarget_lock_release_recursive>
 80073ca:	bf00      	nop
 80073cc:	20000514 	.word	0x20000514

080073d0 <siprintf>:
 80073d0:	b40e      	push	{r1, r2, r3}
 80073d2:	b510      	push	{r4, lr}
 80073d4:	b09d      	sub	sp, #116	@ 0x74
 80073d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80073d8:	9002      	str	r0, [sp, #8]
 80073da:	9006      	str	r0, [sp, #24]
 80073dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073e0:	480a      	ldr	r0, [pc, #40]	@ (800740c <siprintf+0x3c>)
 80073e2:	9107      	str	r1, [sp, #28]
 80073e4:	9104      	str	r1, [sp, #16]
 80073e6:	490a      	ldr	r1, [pc, #40]	@ (8007410 <siprintf+0x40>)
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	9105      	str	r1, [sp, #20]
 80073ee:	2400      	movs	r4, #0
 80073f0:	a902      	add	r1, sp, #8
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80073f8:	f000 f932 	bl	8007660 <_svfiprintf_r>
 80073fc:	9b02      	ldr	r3, [sp, #8]
 80073fe:	701c      	strb	r4, [r3, #0]
 8007400:	b01d      	add	sp, #116	@ 0x74
 8007402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007406:	b003      	add	sp, #12
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000094 	.word	0x20000094
 8007410:	ffff0208 	.word	0xffff0208

08007414 <_raise_r>:
 8007414:	291f      	cmp	r1, #31
 8007416:	b538      	push	{r3, r4, r5, lr}
 8007418:	4605      	mov	r5, r0
 800741a:	460c      	mov	r4, r1
 800741c:	d904      	bls.n	8007428 <_raise_r+0x14>
 800741e:	2316      	movs	r3, #22
 8007420:	6003      	str	r3, [r0, #0]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800742a:	b112      	cbz	r2, 8007432 <_raise_r+0x1e>
 800742c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007430:	b94b      	cbnz	r3, 8007446 <_raise_r+0x32>
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f830 	bl	8007498 <_getpid_r>
 8007438:	4622      	mov	r2, r4
 800743a:	4601      	mov	r1, r0
 800743c:	4628      	mov	r0, r5
 800743e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007442:	f000 b817 	b.w	8007474 <_kill_r>
 8007446:	2b01      	cmp	r3, #1
 8007448:	d00a      	beq.n	8007460 <_raise_r+0x4c>
 800744a:	1c59      	adds	r1, r3, #1
 800744c:	d103      	bne.n	8007456 <_raise_r+0x42>
 800744e:	2316      	movs	r3, #22
 8007450:	6003      	str	r3, [r0, #0]
 8007452:	2001      	movs	r0, #1
 8007454:	e7e7      	b.n	8007426 <_raise_r+0x12>
 8007456:	2100      	movs	r1, #0
 8007458:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800745c:	4620      	mov	r0, r4
 800745e:	4798      	blx	r3
 8007460:	2000      	movs	r0, #0
 8007462:	e7e0      	b.n	8007426 <_raise_r+0x12>

08007464 <raise>:
 8007464:	4b02      	ldr	r3, [pc, #8]	@ (8007470 <raise+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f7ff bfd3 	b.w	8007414 <_raise_r>
 800746e:	bf00      	nop
 8007470:	20000094 	.word	0x20000094

08007474 <_kill_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	@ (8007494 <_kill_r+0x20>)
 8007478:	2300      	movs	r3, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	f7ff fc45 	bl	8006d10 <_kill>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d102      	bne.n	8007490 <_kill_r+0x1c>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	b103      	cbz	r3, 8007490 <_kill_r+0x1c>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	20000510 	.word	0x20000510

08007498 <_getpid_r>:
 8007498:	f7ff bc32 	b.w	8006d00 <_getpid>

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d06      	ldr	r5, [pc, #24]	@ (80074b8 <_sbrk_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7ff fc4e 	bl	8006d48 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20000510 	.word	0x20000510

080074bc <__errno>:
 80074bc:	4b01      	ldr	r3, [pc, #4]	@ (80074c4 <__errno+0x8>)
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000094 	.word	0x20000094

080074c8 <__libc_init_array>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007500 <__libc_init_array+0x38>)
 80074cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007504 <__libc_init_array+0x3c>)
 80074ce:	1b64      	subs	r4, r4, r5
 80074d0:	10a4      	asrs	r4, r4, #2
 80074d2:	2600      	movs	r6, #0
 80074d4:	42a6      	cmp	r6, r4
 80074d6:	d109      	bne.n	80074ec <__libc_init_array+0x24>
 80074d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007508 <__libc_init_array+0x40>)
 80074da:	4c0c      	ldr	r4, [pc, #48]	@ (800750c <__libc_init_array+0x44>)
 80074dc:	f000 fba6 	bl	8007c2c <_init>
 80074e0:	1b64      	subs	r4, r4, r5
 80074e2:	10a4      	asrs	r4, r4, #2
 80074e4:	2600      	movs	r6, #0
 80074e6:	42a6      	cmp	r6, r4
 80074e8:	d105      	bne.n	80074f6 <__libc_init_array+0x2e>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f0:	4798      	blx	r3
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7ee      	b.n	80074d4 <__libc_init_array+0xc>
 80074f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fa:	4798      	blx	r3
 80074fc:	3601      	adds	r6, #1
 80074fe:	e7f2      	b.n	80074e6 <__libc_init_array+0x1e>
 8007500:	08009a58 	.word	0x08009a58
 8007504:	08009a58 	.word	0x08009a58
 8007508:	08009a58 	.word	0x08009a58
 800750c:	08009a5c 	.word	0x08009a5c

08007510 <__retarget_lock_acquire_recursive>:
 8007510:	4770      	bx	lr

08007512 <__retarget_lock_release_recursive>:
 8007512:	4770      	bx	lr

08007514 <_free_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4605      	mov	r5, r0
 8007518:	2900      	cmp	r1, #0
 800751a:	d041      	beq.n	80075a0 <_free_r+0x8c>
 800751c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007520:	1f0c      	subs	r4, r1, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfb8      	it	lt
 8007526:	18e4      	addlt	r4, r4, r3
 8007528:	f7ff ff46 	bl	80073b8 <__malloc_lock>
 800752c:	4a1d      	ldr	r2, [pc, #116]	@ (80075a4 <_free_r+0x90>)
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	b933      	cbnz	r3, 8007540 <_free_r+0x2c>
 8007532:	6063      	str	r3, [r4, #4]
 8007534:	6014      	str	r4, [r2, #0]
 8007536:	4628      	mov	r0, r5
 8007538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753c:	f7ff bf42 	b.w	80073c4 <__malloc_unlock>
 8007540:	42a3      	cmp	r3, r4
 8007542:	d908      	bls.n	8007556 <_free_r+0x42>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	1821      	adds	r1, r4, r0
 8007548:	428b      	cmp	r3, r1
 800754a:	bf01      	itttt	eq
 800754c:	6819      	ldreq	r1, [r3, #0]
 800754e:	685b      	ldreq	r3, [r3, #4]
 8007550:	1809      	addeq	r1, r1, r0
 8007552:	6021      	streq	r1, [r4, #0]
 8007554:	e7ed      	b.n	8007532 <_free_r+0x1e>
 8007556:	461a      	mov	r2, r3
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	b10b      	cbz	r3, 8007560 <_free_r+0x4c>
 800755c:	42a3      	cmp	r3, r4
 800755e:	d9fa      	bls.n	8007556 <_free_r+0x42>
 8007560:	6811      	ldr	r1, [r2, #0]
 8007562:	1850      	adds	r0, r2, r1
 8007564:	42a0      	cmp	r0, r4
 8007566:	d10b      	bne.n	8007580 <_free_r+0x6c>
 8007568:	6820      	ldr	r0, [r4, #0]
 800756a:	4401      	add	r1, r0
 800756c:	1850      	adds	r0, r2, r1
 800756e:	4283      	cmp	r3, r0
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	d1e0      	bne.n	8007536 <_free_r+0x22>
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	6053      	str	r3, [r2, #4]
 800757a:	4408      	add	r0, r1
 800757c:	6010      	str	r0, [r2, #0]
 800757e:	e7da      	b.n	8007536 <_free_r+0x22>
 8007580:	d902      	bls.n	8007588 <_free_r+0x74>
 8007582:	230c      	movs	r3, #12
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	e7d6      	b.n	8007536 <_free_r+0x22>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	1821      	adds	r1, r4, r0
 800758c:	428b      	cmp	r3, r1
 800758e:	bf04      	itt	eq
 8007590:	6819      	ldreq	r1, [r3, #0]
 8007592:	685b      	ldreq	r3, [r3, #4]
 8007594:	6063      	str	r3, [r4, #4]
 8007596:	bf04      	itt	eq
 8007598:	1809      	addeq	r1, r1, r0
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	6054      	str	r4, [r2, #4]
 800759e:	e7ca      	b.n	8007536 <_free_r+0x22>
 80075a0:	bd38      	pop	{r3, r4, r5, pc}
 80075a2:	bf00      	nop
 80075a4:	200003d4 	.word	0x200003d4

080075a8 <__ssputs_r>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	688e      	ldr	r6, [r1, #8]
 80075ae:	461f      	mov	r7, r3
 80075b0:	42be      	cmp	r6, r7
 80075b2:	680b      	ldr	r3, [r1, #0]
 80075b4:	4682      	mov	sl, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	4690      	mov	r8, r2
 80075ba:	d82d      	bhi.n	8007618 <__ssputs_r+0x70>
 80075bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075c4:	d026      	beq.n	8007614 <__ssputs_r+0x6c>
 80075c6:	6965      	ldr	r5, [r4, #20]
 80075c8:	6909      	ldr	r1, [r1, #16]
 80075ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ce:	eba3 0901 	sub.w	r9, r3, r1
 80075d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075d6:	1c7b      	adds	r3, r7, #1
 80075d8:	444b      	add	r3, r9
 80075da:	106d      	asrs	r5, r5, #1
 80075dc:	429d      	cmp	r5, r3
 80075de:	bf38      	it	cc
 80075e0:	461d      	movcc	r5, r3
 80075e2:	0553      	lsls	r3, r2, #21
 80075e4:	d527      	bpl.n	8007636 <__ssputs_r+0x8e>
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7ff fe66 	bl	80072b8 <_malloc_r>
 80075ec:	4606      	mov	r6, r0
 80075ee:	b360      	cbz	r0, 800764a <__ssputs_r+0xa2>
 80075f0:	6921      	ldr	r1, [r4, #16]
 80075f2:	464a      	mov	r2, r9
 80075f4:	f000 fad6 	bl	8007ba4 <memcpy>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	6126      	str	r6, [r4, #16]
 8007606:	6165      	str	r5, [r4, #20]
 8007608:	444e      	add	r6, r9
 800760a:	eba5 0509 	sub.w	r5, r5, r9
 800760e:	6026      	str	r6, [r4, #0]
 8007610:	60a5      	str	r5, [r4, #8]
 8007612:	463e      	mov	r6, r7
 8007614:	42be      	cmp	r6, r7
 8007616:	d900      	bls.n	800761a <__ssputs_r+0x72>
 8007618:	463e      	mov	r6, r7
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	4632      	mov	r2, r6
 800761e:	4641      	mov	r1, r8
 8007620:	f000 faa6 	bl	8007b70 <memmove>
 8007624:	68a3      	ldr	r3, [r4, #8]
 8007626:	1b9b      	subs	r3, r3, r6
 8007628:	60a3      	str	r3, [r4, #8]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	4433      	add	r3, r6
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	2000      	movs	r0, #0
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	462a      	mov	r2, r5
 8007638:	f000 fac2 	bl	8007bc0 <_realloc_r>
 800763c:	4606      	mov	r6, r0
 800763e:	2800      	cmp	r0, #0
 8007640:	d1e0      	bne.n	8007604 <__ssputs_r+0x5c>
 8007642:	6921      	ldr	r1, [r4, #16]
 8007644:	4650      	mov	r0, sl
 8007646:	f7ff ff65 	bl	8007514 <_free_r>
 800764a:	230c      	movs	r3, #12
 800764c:	f8ca 3000 	str.w	r3, [sl]
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007656:	81a3      	strh	r3, [r4, #12]
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	e7e9      	b.n	8007632 <__ssputs_r+0x8a>
	...

08007660 <_svfiprintf_r>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	4698      	mov	r8, r3
 8007666:	898b      	ldrh	r3, [r1, #12]
 8007668:	061b      	lsls	r3, r3, #24
 800766a:	b09d      	sub	sp, #116	@ 0x74
 800766c:	4607      	mov	r7, r0
 800766e:	460d      	mov	r5, r1
 8007670:	4614      	mov	r4, r2
 8007672:	d510      	bpl.n	8007696 <_svfiprintf_r+0x36>
 8007674:	690b      	ldr	r3, [r1, #16]
 8007676:	b973      	cbnz	r3, 8007696 <_svfiprintf_r+0x36>
 8007678:	2140      	movs	r1, #64	@ 0x40
 800767a:	f7ff fe1d 	bl	80072b8 <_malloc_r>
 800767e:	6028      	str	r0, [r5, #0]
 8007680:	6128      	str	r0, [r5, #16]
 8007682:	b930      	cbnz	r0, 8007692 <_svfiprintf_r+0x32>
 8007684:	230c      	movs	r3, #12
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b01d      	add	sp, #116	@ 0x74
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	2340      	movs	r3, #64	@ 0x40
 8007694:	616b      	str	r3, [r5, #20]
 8007696:	2300      	movs	r3, #0
 8007698:	9309      	str	r3, [sp, #36]	@ 0x24
 800769a:	2320      	movs	r3, #32
 800769c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a4:	2330      	movs	r3, #48	@ 0x30
 80076a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007844 <_svfiprintf_r+0x1e4>
 80076aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076ae:	f04f 0901 	mov.w	r9, #1
 80076b2:	4623      	mov	r3, r4
 80076b4:	469a      	mov	sl, r3
 80076b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ba:	b10a      	cbz	r2, 80076c0 <_svfiprintf_r+0x60>
 80076bc:	2a25      	cmp	r2, #37	@ 0x25
 80076be:	d1f9      	bne.n	80076b4 <_svfiprintf_r+0x54>
 80076c0:	ebba 0b04 	subs.w	fp, sl, r4
 80076c4:	d00b      	beq.n	80076de <_svfiprintf_r+0x7e>
 80076c6:	465b      	mov	r3, fp
 80076c8:	4622      	mov	r2, r4
 80076ca:	4629      	mov	r1, r5
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff ff6b 	bl	80075a8 <__ssputs_r>
 80076d2:	3001      	adds	r0, #1
 80076d4:	f000 80a7 	beq.w	8007826 <_svfiprintf_r+0x1c6>
 80076d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076da:	445a      	add	r2, fp
 80076dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80076de:	f89a 3000 	ldrb.w	r3, [sl]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 809f 	beq.w	8007826 <_svfiprintf_r+0x1c6>
 80076e8:	2300      	movs	r3, #0
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f2:	f10a 0a01 	add.w	sl, sl, #1
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	9307      	str	r3, [sp, #28]
 80076fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007700:	4654      	mov	r4, sl
 8007702:	2205      	movs	r2, #5
 8007704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007708:	484e      	ldr	r0, [pc, #312]	@ (8007844 <_svfiprintf_r+0x1e4>)
 800770a:	f7f8 fd71 	bl	80001f0 <memchr>
 800770e:	9a04      	ldr	r2, [sp, #16]
 8007710:	b9d8      	cbnz	r0, 800774a <_svfiprintf_r+0xea>
 8007712:	06d0      	lsls	r0, r2, #27
 8007714:	bf44      	itt	mi
 8007716:	2320      	movmi	r3, #32
 8007718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800771c:	0711      	lsls	r1, r2, #28
 800771e:	bf44      	itt	mi
 8007720:	232b      	movmi	r3, #43	@ 0x2b
 8007722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007726:	f89a 3000 	ldrb.w	r3, [sl]
 800772a:	2b2a      	cmp	r3, #42	@ 0x2a
 800772c:	d015      	beq.n	800775a <_svfiprintf_r+0xfa>
 800772e:	9a07      	ldr	r2, [sp, #28]
 8007730:	4654      	mov	r4, sl
 8007732:	2000      	movs	r0, #0
 8007734:	f04f 0c0a 	mov.w	ip, #10
 8007738:	4621      	mov	r1, r4
 800773a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773e:	3b30      	subs	r3, #48	@ 0x30
 8007740:	2b09      	cmp	r3, #9
 8007742:	d94b      	bls.n	80077dc <_svfiprintf_r+0x17c>
 8007744:	b1b0      	cbz	r0, 8007774 <_svfiprintf_r+0x114>
 8007746:	9207      	str	r2, [sp, #28]
 8007748:	e014      	b.n	8007774 <_svfiprintf_r+0x114>
 800774a:	eba0 0308 	sub.w	r3, r0, r8
 800774e:	fa09 f303 	lsl.w	r3, r9, r3
 8007752:	4313      	orrs	r3, r2
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	46a2      	mov	sl, r4
 8007758:	e7d2      	b.n	8007700 <_svfiprintf_r+0xa0>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	1d19      	adds	r1, r3, #4
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	9103      	str	r1, [sp, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfbb      	ittet	lt
 8007766:	425b      	neglt	r3, r3
 8007768:	f042 0202 	orrlt.w	r2, r2, #2
 800776c:	9307      	strge	r3, [sp, #28]
 800776e:	9307      	strlt	r3, [sp, #28]
 8007770:	bfb8      	it	lt
 8007772:	9204      	strlt	r2, [sp, #16]
 8007774:	7823      	ldrb	r3, [r4, #0]
 8007776:	2b2e      	cmp	r3, #46	@ 0x2e
 8007778:	d10a      	bne.n	8007790 <_svfiprintf_r+0x130>
 800777a:	7863      	ldrb	r3, [r4, #1]
 800777c:	2b2a      	cmp	r3, #42	@ 0x2a
 800777e:	d132      	bne.n	80077e6 <_svfiprintf_r+0x186>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	9203      	str	r2, [sp, #12]
 8007788:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800778c:	3402      	adds	r4, #2
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007854 <_svfiprintf_r+0x1f4>
 8007794:	7821      	ldrb	r1, [r4, #0]
 8007796:	2203      	movs	r2, #3
 8007798:	4650      	mov	r0, sl
 800779a:	f7f8 fd29 	bl	80001f0 <memchr>
 800779e:	b138      	cbz	r0, 80077b0 <_svfiprintf_r+0x150>
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	eba0 000a 	sub.w	r0, r0, sl
 80077a6:	2240      	movs	r2, #64	@ 0x40
 80077a8:	4082      	lsls	r2, r0
 80077aa:	4313      	orrs	r3, r2
 80077ac:	3401      	adds	r4, #1
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b4:	4824      	ldr	r0, [pc, #144]	@ (8007848 <_svfiprintf_r+0x1e8>)
 80077b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077ba:	2206      	movs	r2, #6
 80077bc:	f7f8 fd18 	bl	80001f0 <memchr>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d036      	beq.n	8007832 <_svfiprintf_r+0x1d2>
 80077c4:	4b21      	ldr	r3, [pc, #132]	@ (800784c <_svfiprintf_r+0x1ec>)
 80077c6:	bb1b      	cbnz	r3, 8007810 <_svfiprintf_r+0x1b0>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	3307      	adds	r3, #7
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	3308      	adds	r3, #8
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d6:	4433      	add	r3, r6
 80077d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077da:	e76a      	b.n	80076b2 <_svfiprintf_r+0x52>
 80077dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e0:	460c      	mov	r4, r1
 80077e2:	2001      	movs	r0, #1
 80077e4:	e7a8      	b.n	8007738 <_svfiprintf_r+0xd8>
 80077e6:	2300      	movs	r3, #0
 80077e8:	3401      	adds	r4, #1
 80077ea:	9305      	str	r3, [sp, #20]
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0c0a 	mov.w	ip, #10
 80077f2:	4620      	mov	r0, r4
 80077f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f8:	3a30      	subs	r2, #48	@ 0x30
 80077fa:	2a09      	cmp	r2, #9
 80077fc:	d903      	bls.n	8007806 <_svfiprintf_r+0x1a6>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0c6      	beq.n	8007790 <_svfiprintf_r+0x130>
 8007802:	9105      	str	r1, [sp, #20]
 8007804:	e7c4      	b.n	8007790 <_svfiprintf_r+0x130>
 8007806:	fb0c 2101 	mla	r1, ip, r1, r2
 800780a:	4604      	mov	r4, r0
 800780c:	2301      	movs	r3, #1
 800780e:	e7f0      	b.n	80077f2 <_svfiprintf_r+0x192>
 8007810:	ab03      	add	r3, sp, #12
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	462a      	mov	r2, r5
 8007816:	4b0e      	ldr	r3, [pc, #56]	@ (8007850 <_svfiprintf_r+0x1f0>)
 8007818:	a904      	add	r1, sp, #16
 800781a:	4638      	mov	r0, r7
 800781c:	f3af 8000 	nop.w
 8007820:	1c42      	adds	r2, r0, #1
 8007822:	4606      	mov	r6, r0
 8007824:	d1d6      	bne.n	80077d4 <_svfiprintf_r+0x174>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	065b      	lsls	r3, r3, #25
 800782a:	f53f af2d 	bmi.w	8007688 <_svfiprintf_r+0x28>
 800782e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007830:	e72c      	b.n	800768c <_svfiprintf_r+0x2c>
 8007832:	ab03      	add	r3, sp, #12
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	462a      	mov	r2, r5
 8007838:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <_svfiprintf_r+0x1f0>)
 800783a:	a904      	add	r1, sp, #16
 800783c:	4638      	mov	r0, r7
 800783e:	f000 f879 	bl	8007934 <_printf_i>
 8007842:	e7ed      	b.n	8007820 <_svfiprintf_r+0x1c0>
 8007844:	08009a1c 	.word	0x08009a1c
 8007848:	08009a26 	.word	0x08009a26
 800784c:	00000000 	.word	0x00000000
 8007850:	080075a9 	.word	0x080075a9
 8007854:	08009a22 	.word	0x08009a22

08007858 <_printf_common>:
 8007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	4616      	mov	r6, r2
 800785e:	4698      	mov	r8, r3
 8007860:	688a      	ldr	r2, [r1, #8]
 8007862:	690b      	ldr	r3, [r1, #16]
 8007864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007868:	4293      	cmp	r3, r2
 800786a:	bfb8      	it	lt
 800786c:	4613      	movlt	r3, r2
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007874:	4607      	mov	r7, r0
 8007876:	460c      	mov	r4, r1
 8007878:	b10a      	cbz	r2, 800787e <_printf_common+0x26>
 800787a:	3301      	adds	r3, #1
 800787c:	6033      	str	r3, [r6, #0]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	0699      	lsls	r1, r3, #26
 8007882:	bf42      	ittt	mi
 8007884:	6833      	ldrmi	r3, [r6, #0]
 8007886:	3302      	addmi	r3, #2
 8007888:	6033      	strmi	r3, [r6, #0]
 800788a:	6825      	ldr	r5, [r4, #0]
 800788c:	f015 0506 	ands.w	r5, r5, #6
 8007890:	d106      	bne.n	80078a0 <_printf_common+0x48>
 8007892:	f104 0a19 	add.w	sl, r4, #25
 8007896:	68e3      	ldr	r3, [r4, #12]
 8007898:	6832      	ldr	r2, [r6, #0]
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	42ab      	cmp	r3, r5
 800789e:	dc26      	bgt.n	80078ee <_printf_common+0x96>
 80078a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	3b00      	subs	r3, #0
 80078a8:	bf18      	it	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	0692      	lsls	r2, r2, #26
 80078ae:	d42b      	bmi.n	8007908 <_printf_common+0xb0>
 80078b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078b4:	4641      	mov	r1, r8
 80078b6:	4638      	mov	r0, r7
 80078b8:	47c8      	blx	r9
 80078ba:	3001      	adds	r0, #1
 80078bc:	d01e      	beq.n	80078fc <_printf_common+0xa4>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	6922      	ldr	r2, [r4, #16]
 80078c2:	f003 0306 	and.w	r3, r3, #6
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	bf02      	ittt	eq
 80078ca:	68e5      	ldreq	r5, [r4, #12]
 80078cc:	6833      	ldreq	r3, [r6, #0]
 80078ce:	1aed      	subeq	r5, r5, r3
 80078d0:	68a3      	ldr	r3, [r4, #8]
 80078d2:	bf0c      	ite	eq
 80078d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d8:	2500      	movne	r5, #0
 80078da:	4293      	cmp	r3, r2
 80078dc:	bfc4      	itt	gt
 80078de:	1a9b      	subgt	r3, r3, r2
 80078e0:	18ed      	addgt	r5, r5, r3
 80078e2:	2600      	movs	r6, #0
 80078e4:	341a      	adds	r4, #26
 80078e6:	42b5      	cmp	r5, r6
 80078e8:	d11a      	bne.n	8007920 <_printf_common+0xc8>
 80078ea:	2000      	movs	r0, #0
 80078ec:	e008      	b.n	8007900 <_printf_common+0xa8>
 80078ee:	2301      	movs	r3, #1
 80078f0:	4652      	mov	r2, sl
 80078f2:	4641      	mov	r1, r8
 80078f4:	4638      	mov	r0, r7
 80078f6:	47c8      	blx	r9
 80078f8:	3001      	adds	r0, #1
 80078fa:	d103      	bne.n	8007904 <_printf_common+0xac>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	3501      	adds	r5, #1
 8007906:	e7c6      	b.n	8007896 <_printf_common+0x3e>
 8007908:	18e1      	adds	r1, r4, r3
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	2030      	movs	r0, #48	@ 0x30
 800790e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007912:	4422      	add	r2, r4
 8007914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800791c:	3302      	adds	r3, #2
 800791e:	e7c7      	b.n	80078b0 <_printf_common+0x58>
 8007920:	2301      	movs	r3, #1
 8007922:	4622      	mov	r2, r4
 8007924:	4641      	mov	r1, r8
 8007926:	4638      	mov	r0, r7
 8007928:	47c8      	blx	r9
 800792a:	3001      	adds	r0, #1
 800792c:	d0e6      	beq.n	80078fc <_printf_common+0xa4>
 800792e:	3601      	adds	r6, #1
 8007930:	e7d9      	b.n	80078e6 <_printf_common+0x8e>
	...

08007934 <_printf_i>:
 8007934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	7e0f      	ldrb	r7, [r1, #24]
 800793a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800793c:	2f78      	cmp	r7, #120	@ 0x78
 800793e:	4691      	mov	r9, r2
 8007940:	4680      	mov	r8, r0
 8007942:	460c      	mov	r4, r1
 8007944:	469a      	mov	sl, r3
 8007946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800794a:	d807      	bhi.n	800795c <_printf_i+0x28>
 800794c:	2f62      	cmp	r7, #98	@ 0x62
 800794e:	d80a      	bhi.n	8007966 <_printf_i+0x32>
 8007950:	2f00      	cmp	r7, #0
 8007952:	f000 80d1 	beq.w	8007af8 <_printf_i+0x1c4>
 8007956:	2f58      	cmp	r7, #88	@ 0x58
 8007958:	f000 80b8 	beq.w	8007acc <_printf_i+0x198>
 800795c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007964:	e03a      	b.n	80079dc <_printf_i+0xa8>
 8007966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800796a:	2b15      	cmp	r3, #21
 800796c:	d8f6      	bhi.n	800795c <_printf_i+0x28>
 800796e:	a101      	add	r1, pc, #4	@ (adr r1, 8007974 <_printf_i+0x40>)
 8007970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007974:	080079cd 	.word	0x080079cd
 8007978:	080079e1 	.word	0x080079e1
 800797c:	0800795d 	.word	0x0800795d
 8007980:	0800795d 	.word	0x0800795d
 8007984:	0800795d 	.word	0x0800795d
 8007988:	0800795d 	.word	0x0800795d
 800798c:	080079e1 	.word	0x080079e1
 8007990:	0800795d 	.word	0x0800795d
 8007994:	0800795d 	.word	0x0800795d
 8007998:	0800795d 	.word	0x0800795d
 800799c:	0800795d 	.word	0x0800795d
 80079a0:	08007adf 	.word	0x08007adf
 80079a4:	08007a0b 	.word	0x08007a0b
 80079a8:	08007a99 	.word	0x08007a99
 80079ac:	0800795d 	.word	0x0800795d
 80079b0:	0800795d 	.word	0x0800795d
 80079b4:	08007b01 	.word	0x08007b01
 80079b8:	0800795d 	.word	0x0800795d
 80079bc:	08007a0b 	.word	0x08007a0b
 80079c0:	0800795d 	.word	0x0800795d
 80079c4:	0800795d 	.word	0x0800795d
 80079c8:	08007aa1 	.word	0x08007aa1
 80079cc:	6833      	ldr	r3, [r6, #0]
 80079ce:	1d1a      	adds	r2, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6032      	str	r2, [r6, #0]
 80079d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079dc:	2301      	movs	r3, #1
 80079de:	e09c      	b.n	8007b1a <_printf_i+0x1e6>
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	1d19      	adds	r1, r3, #4
 80079e6:	6031      	str	r1, [r6, #0]
 80079e8:	0606      	lsls	r6, r0, #24
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0xbc>
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	e003      	b.n	80079f8 <_printf_i+0xc4>
 80079f0:	0645      	lsls	r5, r0, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0xb8>
 80079f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079f8:	2d00      	cmp	r5, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xd0>
 80079fc:	232d      	movs	r3, #45	@ 0x2d
 80079fe:	426d      	negs	r5, r5
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a04:	4858      	ldr	r0, [pc, #352]	@ (8007b68 <_printf_i+0x234>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e011      	b.n	8007a2e <_printf_i+0xfa>
 8007a0a:	6821      	ldr	r1, [r4, #0]
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	0608      	lsls	r0, r1, #24
 8007a10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a14:	d402      	bmi.n	8007a1c <_printf_i+0xe8>
 8007a16:	0649      	lsls	r1, r1, #25
 8007a18:	bf48      	it	mi
 8007a1a:	b2ad      	uxthmi	r5, r5
 8007a1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a1e:	4852      	ldr	r0, [pc, #328]	@ (8007b68 <_printf_i+0x234>)
 8007a20:	6033      	str	r3, [r6, #0]
 8007a22:	bf14      	ite	ne
 8007a24:	230a      	movne	r3, #10
 8007a26:	2308      	moveq	r3, #8
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a2e:	6866      	ldr	r6, [r4, #4]
 8007a30:	60a6      	str	r6, [r4, #8]
 8007a32:	2e00      	cmp	r6, #0
 8007a34:	db05      	blt.n	8007a42 <_printf_i+0x10e>
 8007a36:	6821      	ldr	r1, [r4, #0]
 8007a38:	432e      	orrs	r6, r5
 8007a3a:	f021 0104 	bic.w	r1, r1, #4
 8007a3e:	6021      	str	r1, [r4, #0]
 8007a40:	d04b      	beq.n	8007ada <_printf_i+0x1a6>
 8007a42:	4616      	mov	r6, r2
 8007a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a48:	fb03 5711 	mls	r7, r3, r1, r5
 8007a4c:	5dc7      	ldrb	r7, [r0, r7]
 8007a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a52:	462f      	mov	r7, r5
 8007a54:	42bb      	cmp	r3, r7
 8007a56:	460d      	mov	r5, r1
 8007a58:	d9f4      	bls.n	8007a44 <_printf_i+0x110>
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d10b      	bne.n	8007a76 <_printf_i+0x142>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	07df      	lsls	r7, r3, #31
 8007a62:	d508      	bpl.n	8007a76 <_printf_i+0x142>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	6861      	ldr	r1, [r4, #4]
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	bfde      	ittt	le
 8007a6c:	2330      	movle	r3, #48	@ 0x30
 8007a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a76:	1b92      	subs	r2, r2, r6
 8007a78:	6122      	str	r2, [r4, #16]
 8007a7a:	f8cd a000 	str.w	sl, [sp]
 8007a7e:	464b      	mov	r3, r9
 8007a80:	aa03      	add	r2, sp, #12
 8007a82:	4621      	mov	r1, r4
 8007a84:	4640      	mov	r0, r8
 8007a86:	f7ff fee7 	bl	8007858 <_printf_common>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d14a      	bne.n	8007b24 <_printf_i+0x1f0>
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	b004      	add	sp, #16
 8007a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	f043 0320 	orr.w	r3, r3, #32
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	4832      	ldr	r0, [pc, #200]	@ (8007b6c <_printf_i+0x238>)
 8007aa2:	2778      	movs	r7, #120	@ 0x78
 8007aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	6831      	ldr	r1, [r6, #0]
 8007aac:	061f      	lsls	r7, r3, #24
 8007aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ab2:	d402      	bmi.n	8007aba <_printf_i+0x186>
 8007ab4:	065f      	lsls	r7, r3, #25
 8007ab6:	bf48      	it	mi
 8007ab8:	b2ad      	uxthmi	r5, r5
 8007aba:	6031      	str	r1, [r6, #0]
 8007abc:	07d9      	lsls	r1, r3, #31
 8007abe:	bf44      	itt	mi
 8007ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac4:	6023      	strmi	r3, [r4, #0]
 8007ac6:	b11d      	cbz	r5, 8007ad0 <_printf_i+0x19c>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	e7ad      	b.n	8007a28 <_printf_i+0xf4>
 8007acc:	4826      	ldr	r0, [pc, #152]	@ (8007b68 <_printf_i+0x234>)
 8007ace:	e7e9      	b.n	8007aa4 <_printf_i+0x170>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	f023 0320 	bic.w	r3, r3, #32
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	e7f6      	b.n	8007ac8 <_printf_i+0x194>
 8007ada:	4616      	mov	r6, r2
 8007adc:	e7bd      	b.n	8007a5a <_printf_i+0x126>
 8007ade:	6833      	ldr	r3, [r6, #0]
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	6961      	ldr	r1, [r4, #20]
 8007ae4:	1d18      	adds	r0, r3, #4
 8007ae6:	6030      	str	r0, [r6, #0]
 8007ae8:	062e      	lsls	r6, r5, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	d501      	bpl.n	8007af2 <_printf_i+0x1be>
 8007aee:	6019      	str	r1, [r3, #0]
 8007af0:	e002      	b.n	8007af8 <_printf_i+0x1c4>
 8007af2:	0668      	lsls	r0, r5, #25
 8007af4:	d5fb      	bpl.n	8007aee <_printf_i+0x1ba>
 8007af6:	8019      	strh	r1, [r3, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	6123      	str	r3, [r4, #16]
 8007afc:	4616      	mov	r6, r2
 8007afe:	e7bc      	b.n	8007a7a <_printf_i+0x146>
 8007b00:	6833      	ldr	r3, [r6, #0]
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	6032      	str	r2, [r6, #0]
 8007b06:	681e      	ldr	r6, [r3, #0]
 8007b08:	6862      	ldr	r2, [r4, #4]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7f8 fb6f 	bl	80001f0 <memchr>
 8007b12:	b108      	cbz	r0, 8007b18 <_printf_i+0x1e4>
 8007b14:	1b80      	subs	r0, r0, r6
 8007b16:	6060      	str	r0, [r4, #4]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b22:	e7aa      	b.n	8007a7a <_printf_i+0x146>
 8007b24:	6923      	ldr	r3, [r4, #16]
 8007b26:	4632      	mov	r2, r6
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	47d0      	blx	sl
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0ad      	beq.n	8007a8e <_printf_i+0x15a>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	079b      	lsls	r3, r3, #30
 8007b36:	d413      	bmi.n	8007b60 <_printf_i+0x22c>
 8007b38:	68e0      	ldr	r0, [r4, #12]
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	4298      	cmp	r0, r3
 8007b3e:	bfb8      	it	lt
 8007b40:	4618      	movlt	r0, r3
 8007b42:	e7a6      	b.n	8007a92 <_printf_i+0x15e>
 8007b44:	2301      	movs	r3, #1
 8007b46:	4632      	mov	r2, r6
 8007b48:	4649      	mov	r1, r9
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	47d0      	blx	sl
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d09d      	beq.n	8007a8e <_printf_i+0x15a>
 8007b52:	3501      	adds	r5, #1
 8007b54:	68e3      	ldr	r3, [r4, #12]
 8007b56:	9903      	ldr	r1, [sp, #12]
 8007b58:	1a5b      	subs	r3, r3, r1
 8007b5a:	42ab      	cmp	r3, r5
 8007b5c:	dcf2      	bgt.n	8007b44 <_printf_i+0x210>
 8007b5e:	e7eb      	b.n	8007b38 <_printf_i+0x204>
 8007b60:	2500      	movs	r5, #0
 8007b62:	f104 0619 	add.w	r6, r4, #25
 8007b66:	e7f5      	b.n	8007b54 <_printf_i+0x220>
 8007b68:	08009a2d 	.word	0x08009a2d
 8007b6c:	08009a3e 	.word	0x08009a3e

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0402 	add.w	r4, r1, r2
 8007b78:	d902      	bls.n	8007b80 <memmove+0x10>
 8007b7a:	4284      	cmp	r4, r0
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	d807      	bhi.n	8007b90 <memmove+0x20>
 8007b80:	1e43      	subs	r3, r0, #1
 8007b82:	42a1      	cmp	r1, r4
 8007b84:	d008      	beq.n	8007b98 <memmove+0x28>
 8007b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b8e:	e7f8      	b.n	8007b82 <memmove+0x12>
 8007b90:	4402      	add	r2, r0
 8007b92:	4601      	mov	r1, r0
 8007b94:	428a      	cmp	r2, r1
 8007b96:	d100      	bne.n	8007b9a <memmove+0x2a>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba2:	e7f7      	b.n	8007b94 <memmove+0x24>

08007ba4 <memcpy>:
 8007ba4:	440a      	add	r2, r1
 8007ba6:	4291      	cmp	r1, r2
 8007ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bac:	d100      	bne.n	8007bb0 <memcpy+0xc>
 8007bae:	4770      	bx	lr
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	d1f9      	bne.n	8007bb2 <memcpy+0xe>
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <_realloc_r>:
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	4614      	mov	r4, r2
 8007bc8:	460d      	mov	r5, r1
 8007bca:	b921      	cbnz	r1, 8007bd6 <_realloc_r+0x16>
 8007bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	f7ff bb71 	b.w	80072b8 <_malloc_r>
 8007bd6:	b92a      	cbnz	r2, 8007be4 <_realloc_r+0x24>
 8007bd8:	f7ff fc9c 	bl	8007514 <_free_r>
 8007bdc:	4625      	mov	r5, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be4:	f000 f81a 	bl	8007c1c <_malloc_usable_size_r>
 8007be8:	4284      	cmp	r4, r0
 8007bea:	4606      	mov	r6, r0
 8007bec:	d802      	bhi.n	8007bf4 <_realloc_r+0x34>
 8007bee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bf2:	d8f4      	bhi.n	8007bde <_realloc_r+0x1e>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7ff fb5e 	bl	80072b8 <_malloc_r>
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	b908      	cbnz	r0, 8007c04 <_realloc_r+0x44>
 8007c00:	4645      	mov	r5, r8
 8007c02:	e7ec      	b.n	8007bde <_realloc_r+0x1e>
 8007c04:	42b4      	cmp	r4, r6
 8007c06:	4622      	mov	r2, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	bf28      	it	cs
 8007c0c:	4632      	movcs	r2, r6
 8007c0e:	f7ff ffc9 	bl	8007ba4 <memcpy>
 8007c12:	4629      	mov	r1, r5
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff fc7d 	bl	8007514 <_free_r>
 8007c1a:	e7f1      	b.n	8007c00 <_realloc_r+0x40>

08007c1c <_malloc_usable_size_r>:
 8007c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c20:	1f18      	subs	r0, r3, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfbc      	itt	lt
 8007c26:	580b      	ldrlt	r3, [r1, r0]
 8007c28:	18c0      	addlt	r0, r0, r3
 8007c2a:	4770      	bx	lr

08007c2c <_init>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	bf00      	nop
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr

08007c38 <_fini>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr
